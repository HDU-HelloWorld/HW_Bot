Index: plugins/word_bank/model.py
===================================================================
diff --git a/plugins/word_bank/model.py b/plugins/word_bank/model.py
deleted file mode 100644
--- a/plugins/word_bank/model.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ /dev/null	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
@@ -1,269 +0,0 @@
-from services.db_context import db
-from typing import Optional, List, Union, Tuple
-from datetime import datetime
-from configs.path_config import DATA_PATH
-import random
-from configs.config import Config
-
-
-class WordBank(db.Model):
-    __tablename__ = "word_bank"
-
-    user_qq = db.Column(db.BigInteger(), nullable=False)
-    group_id = db.Column(db.Integer())
-    search_type = db.Column(db.Integer(), nullable=False, default=0)
-    problem = db.Column(db.String(), nullable=False)
-    answer = db.Column(db.String(), nullable=False)
-    format = db.Column(db.String())
-    create_time = db.Column(db.DateTime(), nullable=False)
-    update_time = db.Column(db.DateTime(), nullable=False)
-
-    @classmethod
-    async def add_problem_answer(
-            cls,
-            user_id: int,
-            group_id: Optional[int],
-            search_type: [int],
-            problem: str,
-            answer: str,
-            format_: Optional[List[Tuple[int, Union[int, str]]]],
-    ) -> bool:
-        """
-        添加或新增一个问答
-        :param user_id: 用户id
-        :param group_id: 群号
-        :search_type: 问题类型,
-        :param problem: 问题
-        :param answer: 回答
-        :param format_: 格式化数据
-        """
-        _str = None
-        if format_:
-            _str = ""
-            for x, y in format_:
-                _str += f"{x}<_s>{y}<format>"
-        return await cls._problem_answer_handle(
-            user_id, group_id, problem, "add", search_type=search_type, answer=answer, format_=_str
-        )
-
-    @classmethod
-    async def delete_problem_answer(
-            cls, user_id: int, group_id: Optional[int], problem: str, index: Optional[int]
-    ) -> str:
-        """
-        删除某问题一个或全部回答
-        :param user_id: 用户id
-        :param group_id: 群号
-        :param problem: 问题
-        :param index: 回答下标
-        """
-        return await cls._problem_answer_handle(
-            user_id, group_id, problem, "delete", index=index
-        )
-
-    @classmethod
-    async def update_problem_answer(
-            cls,
-            user_id: int,
-            group_id: Optional[int],
-            problem: str,
-            answer: str,
-            index: Optional[int],
-            format_: Optional[List[Tuple[int, Union[int, str]]]],
-    ) -> str:
-        """
-        修改某问题一个或全部回答
-        :param user_id: 用户id
-        :param group_id: 群号
-        :param problem: 问题
-        :param index: 回答下标
-        """
-        _str = None
-        if format_:
-            _str = ""
-            for x, y in format_:
-                _str += f"{x}<_s>{y}<format>"
-        return await cls._problem_answer_handle(
-            user_id, group_id, problem, "update", answer=answer, index=index, format_=_str
-        )
-
-    @classmethod
-    async def get_problem_answer(
-            cls, user_id: int, group_id: Optional[int], problem: str
-    ) -> List[str]:
-        """
-        获取问题的所有回答
-        :param user_id: 用户id
-        :param group_id: 群号
-        :param problem: 问题
-        """
-        return await cls._problem_answer_handle(user_id, group_id, problem, "get")
-
-    @classmethod
-    async def get_group_all_answer(cls, group_id: int, problem: str) -> List[str]:
-        """
-        获取群聊指定词条所有回答
-        :param group_id: 群号
-        :param problem: 问题
-        """
-        q = await cls.query.where(
-            (cls.group_id == group_id) & (cls.problem == problem)
-        ).gino.all()
-
-        return [(x.answer, x.format) for x in q] if q else None
-
-    @classmethod
-    async def get_group_all_problem(cls, group_id: int) -> List[str]:
-        """
-        获取群聊所有词条
-        :param group_id: 群号
-        """
-        q = await cls.query.where(cls.group_id == group_id).gino.all()
-        q = [x.problem for x in q]
-        q.sort()
-        _tmp = []
-        for problem in q:
-            _tmp.append(problem)
-        return list(set(_tmp))
-
-    @classmethod
-    async def check(cls, group_id: int, problem: str) -> Optional["WordBank"]:
-        """
-        检测词条并随机返回
-        :param group_id: 群号
-        :param problem: 问题
-        """
-        if problem:
-            FUZZY = Config.get_config("word_bank", "WORD_BANK_FUZZY")
-            KEY = Config.get_config("word_bank", "WORD_BANK_KEY")
-            q = await cls.query.where(
-                (cls.group_id == group_id) & (cls.problem == problem)
-            ).gino.all()
-            if KEY and FUZZY:
-                q_fuzzy = await cls.query.where(
-                    (cls.group_id == group_id) & (cls.search_type == 2) & (
-                        cls.problem.contains(f'{problem}'))).gino.all()
-                q_key = await cls.query.where((cls.group_id == group_id) & (cls.search_type == 1)).gino.all()
-                q_key = [x for x in q_key if str(x.problem) in (problem)]
-                q += q_fuzzy + q_key
-            elif FUZZY:
-                q_fuzzy = await cls.query.where(
-                    (cls.group_id == group_id) & (cls.search_type == 2) & (
-                        cls.problem.contains(f'{problem}'))).gino.all()
-                q += q_fuzzy
-            elif KEY:
-                q_key = await cls.query.where((cls.group_id == group_id) & (cls.search_type == 1)).gino.all()
-                q_key = [x for x in q_key if str(x.problem) in (problem)]
-                q += q_key
-        else:
-            return None
-
-        return random.choice(q) if q else None
-
-    @classmethod
-    async def _problem_answer_handle(
-            cls,
-            user_id: int,
-            group_id: Optional[int],
-            problem: str,
-            type_: str,
-            *,
-            search_type: [int] = 0,
-            answer: Optional[str] = None,
-            index: Optional[int] = None,
-            format_: Optional[str] = None,
-    ) -> Union[List[Union[str, Tuple[str, str]]], bool, str]:
-        """
-        添加或新增一个问答
-        :param user_id: 用户id
-        :param group_id: 群号
-        :param problem: 问题
-        :param type_: 操作类型
-        :param answer: 回答
-        :param format_: 格式化数据
-        """
-        if problem.startswith("id:"):
-            problem_index = int(problem.split(":")[-1])
-            q = await cls.get_group_all_problem(group_id)
-            if not q:
-                return []
-            if len(q) > problem_index:
-                problem = q[problem_index]
-        if group_id:
-            q = cls.query.where((cls.group_id == group_id) & (cls.problem == problem))
-        else:
-            q = cls.query.where((cls.user_qq == user_id) & (cls.problem == problem))
-        if type_ == "add":
-            q = await q.where((cls.answer == answer) & (cls.search_type == search_type)).gino.all()
-            try:
-                if not q or ".jpg" in format_:
-                    await cls.create(
-                        user_qq=user_id,
-                        group_id=group_id,
-                        search_type=search_type,
-                        problem=problem,
-                        answer=answer,
-                        format=format_,
-                        create_time=datetime.now().replace(microsecond=0),
-                        update_time=datetime.now().replace(microsecond=0),
-                    )
-            except:
-                return False
-            return True
-        elif type_ == "delete":
-            q = await q.with_for_update().gino.all()
-            if q:
-                path = DATA_PATH / "word_bank" / f"{group_id}"
-                if index is not None:
-                    q = [q[index]]
-                answer = "\n".join([x.answer for x in q])
-                for x in q:
-                    format_ = x.format
-                    if format_:
-                        for sp in format_.split("<format>")[:-1]:
-                            _, image_name = sp.split("<_s>")
-                            if image_name.endswith("jpg"):
-                                _path = path / image_name
-                                if _path.exists():
-                                    _path.unlink()
-                    await cls.delete.where(
-                        (cls.update_time == x.update_time)
-                        & (cls.problem == problem)
-                        & (cls.answer == x.answer)
-                        & (cls.group_id == group_id)
-                    ).gino.status()
-                return answer
-        elif type_ == "update":
-            new_format = format_
-            new_answer = answer
-            q = await q.with_for_update().gino.all()
-            if q:
-                path = DATA_PATH / "word_bank" / f"{group_id}"
-                if index is not None:
-                    q = [q[index]]
-                else:
-                    q = [q[0]]
-                for x in q:
-                    format_ = x.format
-                    if format_:
-                        for sp in format_.split("<format>")[:-1]:
-                            _, image_name = sp.split("<_s>")
-                            if image_name.endswith("jpg"):
-                                _path = path / image_name
-                                if _path.exists():
-                                    _path.unlink()
-                    await cls.update.values(answer=new_answer,
-                                            format=new_format,
-                                            update_time=datetime.now().replace(microsecond=0), ).where(
-                        (cls.problem == problem)
-                        & (cls.answer == x.answer)
-                        & (cls.group_id == group_id)
-                        & (cls.group_id == group_id)
-                        & (cls.update_time == x.update_time)
-                    ).gino.status()
-                return True
-        elif type_ == "get":
-            q = await q.gino.all()
-            if q:
-                return [(x.answer, x.format.split("<format>")[:-1]) for x in q]
-        return False
Index: plugins/word_bank/word_hanlde.py
===================================================================
diff --git a/plugins/word_bank/word_hanlde.py b/plugins/word_bank/word_hanlde.py
deleted file mode 100644
--- a/plugins/word_bank/word_hanlde.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ /dev/null	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
@@ -1,311 +0,0 @@
-from utils.utils import get_message_at, is_number, get_message_img
-from nonebot.params import CommandArg
-from services.log import logger
-from configs.path_config import DATA_PATH
-from utils.http_utils import AsyncHttpx
-from ._data_source import WordBankBuilder
-from utils.message_builder import image
-from utils.image_utils import text2image
-from .message_handle import get_one_answer, get_one_problem, get_one_image_problem, replace_cq
-from .model import WordBank
-from nonebot.adapters.onebot.v11 import (
-    Bot,
-    GroupMessageEvent,
-    Message
-)
-from nonebot import on_command
-import random
-import os
-import re
-from configs.config import NICKNAME, Config
-from models.group_member_info import GroupInfoUser
-
-__zx_plugin_name__ = "词库问答 [Admin]"
-__plugin_usage__ = """
-usage：
-    对指定问题的随机回答，对相同问题可以设置多个不同回答
-    删除词条后每个词条的id可能会变化，请查看后再删除
-    指令：
-        添加词条 ?[模糊/关键字|词]...答...：添加问答词条，可重复添加相同问题的不同回答
-        删除词条 [问题/下标] ?[下标]：删除指定词条指定或全部回答
-        修改词条 [问题/下标] ?[下标/新回答] [新回答]：修改指定词条指定回答默认修改为第一条
-        查看词条 ?[问题/下标]：查看全部词条或对应词条回答
-        示例：添加词条问谁是萝莉答是我
-        示例：删除词条 谁是萝莉
-        示例：删除词条 谁是萝莉 0
-        示例：删除词条 id:0
-        示例：修改词条 谁是萝莉 是你
-        示例：修改词条 谁是萝莉 0 是你
-        示例：修改词条 id:0 是你
-        示例：查看词条
-        示例：查看词条 谁是萝莉
-        示例：查看词条 id:0
-""".strip()
-__plugin_des__ = "自定义词条内容随机回复"
-__plugin_cmd__ = [
-    "添加词条 ?[模糊/关键字]问...答..",
-    "删除词条 [问题/下标] ?[下标]",
-    "修改词条 [问题/下标] ?[下标/新回答] [新回答]",
-    "查看词条 ?[问题/下标]",
-]
-__plugin_version__ = 0.3
-__plugin_author__ = "HibiKier & yajiwa"
-__plugin_settings__ = {
-    "admin_level": Config.get_config("word_bank", "WORD_BANK_LEVEL [LEVEL]"),
-    "cmd": ["词库问答", "添加词条", "删除词条", "修改词条", "查看词条"],
-}
-
-data_dir = DATA_PATH / "word_bank"
-data_dir.mkdir(parents=True, exist_ok=True)
-
-add_word = on_command("添加词条", priority=5, block=True)
-
-delete_word = on_command("删除词条", priority=5, block=True)
-
-update_word = on_command("修改词条", priority=5, block=True)
-
-show_word = on_command("显示词条", aliases={"查看词条"}, priority=5, block=True)
-
-
-@add_word.handle()
-async def _(event: GroupMessageEvent, arg: Message = CommandArg()):
-    msg = str(arg)
-    r = re.search(r"问(.+)\s?答([\s\S]*)", msg)
-    if not r:
-        await add_word.finish("未检测到词条问题...")
-    problem = r.group(1).strip()
-    if not problem:
-        await add_word.finish("未检测到词条问题...")
-    answer = msg.split("答", maxsplit=1)[-1]
-    if not answer:
-        await add_word.finish("未检测到词条回答...")
-    idx = 0
-    _problem = problem
-    search_type = 0
-    if re.search("^关键字|词(.*)", msg):
-        search_type = 1
-    elif re.search("^模糊(.*)", msg):
-        search_type = 2
-    _builder = await get__builder(event, _problem, answer, idx)
-    if await _builder.save(search_type):
-        logger.info(f"已保存词条 问：{_builder.problem} 答：{answer}")
-        await add_word.send("已保存词条：" + _builder.problem)
-    else:
-        await delete_word.send("保存失败，可能是回答重复")
-
-
-@delete_word.handle()
-async def _(event: GroupMessageEvent, arg: Message = CommandArg()):
-    msg = str(arg)
-    if not msg:
-        await delete_word.finish("此命令之后需要跟随指定词条，通过“显示词条“查看")
-    index = None
-    _sp_msg = msg.split()
-    if len(_sp_msg) > 1:
-        if is_number(_sp_msg[-1]):
-            index = int(_sp_msg[-1])
-            msg = " ".join(_sp_msg[:-1])
-    problem = msg
-    if problem.startswith("id:"):
-        x = problem.split(":")[-1]
-        if not is_number(x) or int(x) < 0:
-            await delete_word.finish("id必须为数字且符合规范！")
-        p = await WordBank.get_group_all_problem(event.group_id)
-        if p:
-            problem = p[int(x)]
-    try:
-        _problem, problem = await get_one_problem(event, problem)
-        if answer := await WordBank.delete_problem_answer(
-                event.user_id, event.group_id, _problem, index
-        ):
-
-            await delete_word.send(Message(
-                "删除词条成功：\n问" + await replace_cq(event.group_id, problem, False) + f"\n回答：\n" + await replace_cq(
-                    event.group_id, answer, False) + "\n"))
-            logger.info(
-                f"(USER {event.user_id}, GROUP "
-                f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
-                f" 删除词条: {problem}"
-            )
-        else:
-            await delete_word.send("删除词条：" + problem + "失败，可能该词条不存在")
-    except IndexError:
-        await delete_word.send("指定下标错误...请通过查看词条来确定..")
-
-
-@update_word.handle()
-async def _(event: GroupMessageEvent, arg: Message = CommandArg()):
-    msg = str(arg)
-    if not msg:
-        await update_word.finish("此命令之后需要跟随指定词条，通过“显示词条“查看")
-    index = None
-    new_answer = None
-    problem = None
-    _sp_msg = msg.split()
-    len_msg = len(_sp_msg)
-    if 1 < len_msg:
-        problem = "".join(_sp_msg[0])
-        if len_msg == 3:
-            if is_number(_sp_msg[1]):
-                index = int(_sp_msg[1])
-            new_answer = "".join(_sp_msg[2:])
-        else:
-            new_answer = "".join(_sp_msg[1:])
-    else:
-        await update_word.finish("此命令之后需要跟随修改内容")
-    idx = 0
-    _problem = problem
-    _builder = await get__builder(event, _problem, new_answer, idx)
-
-    try:
-        if await _builder.update(index):
-            await update_word.send(f"修改词条成功：" + _builder.problem)
-            logger.info(
-                f"(USER {event.user_id}, GROUP "
-                f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
-                f" 修改词条: {problem}"
-            )
-        else:
-            await update_word.send(f"修改词条：" + _builder.problem + f"失败，可能该词条不存在")
-    except IndexError:
-        await update_word.send("指定下标错误...请通过查看词条来确定..")
-
-
-@show_word.handle()
-async def _(bot: Bot, event: GroupMessageEvent, arg: Message = CommandArg()):
-    msg = str(arg).strip()
-    if not msg:
-        _problem_list = await WordBank.get_group_all_problem(event.group_id)
-        if not _problem_list:
-            await show_word.finish("该群未收录任replace_cq何词条..")
-        _problem_list = [f"\t{i}. {await replace_cq(event.group_id, x)}" for i, x in enumerate(_problem_list)]
-        long_problem_list = len(_problem_list)
-        max_line = Config.get_config("word_bank", "WORD_BANK_MIX")
-        if long_problem_list > max_line:
-            pic_list = []
-            mes_list = []
-            img_nu = long_problem_list // max_line
-            one_msg = "该群已收录的词条："
-            await show_word.send(one_msg)
-            for i in range(img_nu + 1):
-                if _problem_list:
-                    one_img = image(
-                        b64=(await text2image("\n".join(_problem_list[:max_line]),
-                                              padding=10,
-                                              color="#f9f6f2",
-                                              )).pic2bs4()
-                    )
-                    if img_nu > 2:
-                        pic_list.append(one_img)
-                    else:
-                        await show_word.send(one_img)
-                del _problem_list[:max_line]
-            if pic_list:
-                for img in pic_list:
-                    data = {
-                        "type": "node",
-                        "data": {"name": f"{NICKNAME}", "uin": f"{bot.self_id}", "content": img},
-                    }
-                    mes_list.append(data)
-                await bot.send_group_forward_msg(group_id=event.group_id, messages=mes_list)
-        else:
-            await show_word.send(
-                image(
-                    b64=(await text2image(
-                        "该群已收录的词条：\n\n" + "\n".join(_problem_list),
-                        padding=10,
-                        color="#f9f6f2",
-                    )).pic2bs4()
-                )
-            )
-    else:
-        _answer_list = []
-        if msg.startswith("id:"):
-            x = msg.split(":")[-1]
-            if not is_number(x) or int(x) < 0:
-                return await delete_word.finish("id必须为数字且符合规范！")
-            p = await WordBank.get_group_all_problem(event.group_id)
-            if p:
-                _problem = p[int(x)]
-                _answer_list = await WordBank.get_group_all_answer(event.group_id, _problem)
-                msg += '问' + await get_one_image_problem(event, _problem)
-        else:
-            _problem, msg = await get_one_problem(event, msg)
-            _answer_list = await WordBank.get_group_all_answer(event.group_id, _problem)
-        if not _answer_list:
-            await show_word.send("未收录该词条...")
-
-        else:
-            # 解析图片和@
-            _answer_img_nu_list = [await get_one_answer(event, format, answer, False) for answer, format in
-                                   _answer_list]
-            word_nu = len(_answer_img_nu_list)
-            img_nu = 0
-            answer = "词条" + msg + "\n回答："
-            for i, x, in enumerate(_answer_img_nu_list):
-                r = re.findall(rf"\[CQ:image,file=", str(x))
-                if r:
-                    img_nu += len(r)
-                answer += "\n" + f"{i}." + x
-            if (img_nu > 2 and word_nu > 5) or word_nu > 10 or img_nu > 4:
-                data = {
-                    "type": "node",
-                    "data": {"name": f"{NICKNAME}", "uin": f"{bot.self_id}", "content": answer},
-                }
-                await bot.send_group_forward_msg(group_id=event.group_id, messages=data)
-            else:
-                await show_word.send(answer)
-            # await show_word.send(f"词条 {msg} 回答：\n" + "\n".join(_answer_list))
-
-
-async def get__builder(event, _problem: str, answer: str, idx: int):
-    (data_dir / f"{event.group_id}").mkdir(exist_ok=True, parents=True)
-    (data_dir / f"{event.group_id}" / "problem").mkdir(exist_ok=True, parents=True)
-    _builder = WordBankBuilder(event.user_id, event.group_id, _problem)
-    problem = ''
-    _p = _problem
-    for at_ in get_message_at(event.json()):
-        r = re.search(rf"\[CQ:at,qq={at_}]", answer)
-        if r:
-            answer = answer.replace(f"[CQ:at,qq={at_}]", f"[__placeholder_{idx}]", 1)
-            _builder.set_placeholder(idx, at_)
-            idx += 1
-        r_problem = re.search(rf"\[CQ:at,qq={at_}]", _problem)
-        if r_problem:
-            q = await GroupInfoUser.get_member_info(
-                int(at_), event.group_id)
-            problem += _p[: _p.find(f"[CQ:at,qq={at_}]")] + "@" + q.user_name
-            _p = _p[_p.find(f"[CQ:at,qq={at_}]") + len(f"[CQ:at,qq={at_}]"):]
-    for img in get_message_img(event.json()):
-        _x = img.split("?")[0]
-        _x_list = img.split("?")
-        r = re.search(rf"\[CQ:image,file=(.*),url={_x}.*?]", answer)
-        if r:
-            rand = random.randint(1, 10000) + random.randint(1, 114514)
-            for _ in range(10):
-                if f"__placeholder_{rand}_{idx}.jpg" not in os.listdir(data_dir / f"{event.group_id}"):
-                    break
-                rand = random.randint(1, 10000) + random.randint(1, 114514)
-            strinfo = re.compile(f"\[CQ:image,file={r.group(1)},.*url={_x_list[0]}\?{_x_list[1]}.*?]")
-            answer = strinfo.sub(f"[__placeholder_{idx}]", answer)
-            await AsyncHttpx.download_file(
-                img, data_dir / f"{event.group_id}" / f"__placeholder_{rand}_{idx}.jpg"
-            )
-            _builder.set_placeholder(idx, f"__placeholder_{rand}_{idx}.jpg")
-            idx += 1
-        r_problem = re.search(rf"\[CQ:image,file=(.*?)(,subType=\d)?,url={_x}.*?]", _p)
-        if r_problem:
-            strinfo = re.compile(f"(,subType=\d)?,url={_x_list[0]}\?{_x_list[1]}.*?]")
-            _problem = strinfo.sub(f"]", _problem)
-            _p = strinfo.sub(f"]", _p)
-            problem += _p[: _p.find(f"[CQ:image,file={r_problem.group(1)}]")] + image(img)
-            _p = _p[_p.find(f"[CQ:image,file={r_problem.group(1)}]") + len(f"[CQ:image,file={r_problem.group(1)}]"):]
-            problem_img = r_problem.group(1)
-            if f"{problem_img}.jpg" not in os.listdir(data_dir / f"{event.group_id}" / f"problem"):
-                await AsyncHttpx.download_file(
-                    img, data_dir / f"{event.group_id}" / f"problem" / f"{problem_img}.jpg"
-                )
-    _builder.set_answer(answer)
-    _builder.set_problem(_problem)
-    _builder.problem = problem + _p
-    return _builder
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>### Python template\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\ntest.py\nserver_ip.py\ngame_utils.py\nmember_activity_handle.py\nYu-Gi-Oh/\ncsgo/\nfantasy_card/\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/.gitignore	(date 1663665690883)
@@ -138,10 +138,26 @@
 # Cython debug symbols
 cython_debug/
 
+demo.py
 test.py
 server_ip.py
-game_utils.py
 member_activity_handle.py
 Yu-Gi-Oh/
 csgo/
 fantasy_card/
+data/
+log/
+backup/
+extensive_plugin/
+test/
+bot.py
+data/
+.env
+.env.dev
+resources/
+!/configs/config.py
+!/configs/config.yaml
+!/.env
+!/.env.dev
+!/plugins/csgo_server/
+!/plugins/activity/
Index: __version__
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>__version__: v0.1.6.2\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/__version__ b/__version__
--- a/__version__	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/__version__	(date 1663665690883)
@@ -1,1 +1,1 @@
-__version__: v0.1.6.2
+__version__: v0.1.6.3-fix1
Index: pyproject.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[tool.poetry]\nname = \"zhenxun_bot\"\nversion = \"0.1.1\"\ndescription = \"基于 Nonebot2 和 go-cqhttp 开发，以 postgresql 作为数据库，非常可爱的绪山真寻bot\"\nauthors = [\"HibiKier <775757368@qq.com>\"]\nlicense = \"AGPL\"\n\n[[tool.poetry.source]]\nname = \"ali\"\ndefault = true\nurl = \"https://mirrors.aliyun.com/pypi/simple/\"\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\nnonebot2 = \"^2.0.0-beta.4\"\nnonebot-adapter-onebot = \"^2.0.0-beta.1\"\naiofiles = \"^0.8.0\"\naiohttp = \"3.7.4.post0\"\nbeautifulsoup4 = \"4.9.3\"\nfeedparser = \"^6.0.8\"\ngino = \"^1.0.1\"\nhttpx = \"^0.23.0\"\nImageHash = \"^4.2.1\"\njieba = \"^0.42.1\"\nlxml = \"4.6.5\"\nnonebot-plugin-apscheduler = \"^0.1.2\"\nopencv-python = \"^4.5.5\"\nPillow = \"^9.0.1\"\nplaywright = \"^1.18.2\"\npsutil = \"^5.9.0\"\nPyYAML = \"5.4.1\"\nretrying = \"^1.3.3\"\nujson = \"^5.1.0\"\n\"ruamel.yaml\" = \"^0.17.21\"\nmatplotlib = \"^3.5.1\"\nblack = \"^22.1.0\"\npypinyin = \"^0.46.0\"\ndateparser = \"^1.1.0\"\ncn2an = \"^0.5.16\"\npython-jose = \"^3.3.0\"\npython-multipart = \"^0.0.5\"\nbilireq = \"^0.2.0\"\nemoji = \"^1.7.0\"\nwordcloud = \"^1.8.1\"\nrich = \"^12.4.3\"\n\n[tool.poetry.dev-dependencies]\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pyproject.toml b/pyproject.toml
--- a/pyproject.toml	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/pyproject.toml	(date 1663665690887)
@@ -39,7 +39,7 @@
 cn2an = "^0.5.16"
 python-jose = "^3.3.0"
 python-multipart = "^0.0.5"
-bilireq = "^0.2.0"
+bilireq = "^0.2.2"
 emoji = "^1.7.0"
 wordcloud = "^1.8.1"
 rich = "^12.4.3"
Index: update_info.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    \"update_file\": [\n      \"plugins\",\n      \"models\",\n      \"services\",\n      \"utils\",\n      \"basic_plugins\",\n      \"configs/path_config.py\",\n      \"configs/utils\",\n      \"poetry.lock\",\n      \"pyproject.toml\",\n      \"resources/font\",\n      \"resources/image/zhenxun\",\n      \"resources/image/other\"\n    ],\n    \"add_file\": [],\n    \"delete_file\": []\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/update_info.json b/update_info.json
--- a/update_info.json	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/update_info.json	(date 1663665690887)
@@ -8,10 +8,7 @@
       "configs/path_config.py",
       "configs/utils",
       "poetry.lock",
-      "pyproject.toml",
-      "resources/font",
-      "resources/image/zhenxun",
-      "resources/image/other"
+      "pyproject.toml"
     ],
     "add_file": [],
     "delete_file": []
Index: poetry.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[[package]]\nname = \"aiofiles\"\nversion = \"0.8.0\"\ndescription = \"File support for asyncio.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6,<4.0\"\n\n[[package]]\nname = \"aiohttp\"\nversion = \"3.7.4.post0\"\ndescription = \"Async http client/server framework (asyncio)\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\nasync-timeout = \">=3.0,<4.0\"\nattrs = \">=17.3.0\"\nchardet = \">=2.0,<5.0\"\nmultidict = \">=4.5,<7.0\"\ntyping-extensions = \">=3.6.5\"\nyarl = \">=1.0,<2.0\"\n\n[package.extras]\nspeedups = [\"aiodns\", \"brotlipy\", \"cchardet\"]\n\n[[package]]\nname = \"anyio\"\nversion = \"3.6.1\"\ndescription = \"High level compatibility layer for multiple asynchronous event loop implementations\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6.2\"\n\n[package.dependencies]\nidna = \">=2.8\"\nsniffio = \">=1.1\"\n\n[package.extras]\ndoc = [\"packaging\", \"sphinx-rtd-theme\", \"sphinx-autodoc-typehints (>=1.2.0)\"]\ntest = [\"coverage[toml] (>=4.5)\", \"hypothesis (>=4.0)\", \"pytest (>=7.0)\", \"pytest-mock (>=3.6.1)\", \"trustme\", \"contextlib2\", \"uvloop (<0.15)\", \"mock (>=4)\", \"uvloop (>=0.15)\"]\ntrio = [\"trio (>=0.16)\"]\n\n[[package]]\nname = \"apscheduler\"\nversion = \"3.9.1\"\ndescription = \"In-process task scheduler with Cron-like capabilities\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4\"\n\n[package.dependencies]\npytz = \"*\"\nsix = \">=1.4.0\"\ntzlocal = \">=2.0,<3.0.0 || >=4.0.0\"\n\n[package.extras]\nasyncio = [\"trollius\"]\ndoc = [\"sphinx\", \"sphinx-rtd-theme\"]\ngevent = [\"gevent\"]\nmongodb = [\"pymongo (>=3.0)\"]\nredis = [\"redis (>=3.0)\"]\nrethinkdb = [\"rethinkdb (>=2.4.0)\"]\nsqlalchemy = [\"sqlalchemy (>=0.8)\"]\ntesting = [\"pytest\", \"pytest-cov\", \"pytest-tornado5\", \"mock\", \"pytest-asyncio (<0.6)\", \"pytest-asyncio\"]\ntornado = [\"tornado (>=4.3)\"]\ntwisted = [\"twisted\"]\nzookeeper = [\"kazoo\"]\n\n[[package]]\nname = \"asgiref\"\nversion = \"3.5.2\"\ndescription = \"ASGI specs, helper code, and adapters\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.extras]\ntests = [\"pytest\", \"pytest-asyncio\", \"mypy (>=0.800)\"]\n\n[[package]]\nname = \"async-timeout\"\nversion = \"3.0.1\"\ndescription = \"Timeout context manager for asyncio programs\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5.3\"\n\n[[package]]\nname = \"asyncpg\"\nversion = \"0.26.0\"\ndescription = \"An asyncio PostgreSQL driver\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6.0\"\n\n[package.extras]\ndev = [\"Cython (>=0.29.24,<0.30.0)\", \"pytest (>=6.0)\", \"Sphinx (>=4.1.2,<4.2.0)\", \"sphinxcontrib-asyncio (>=0.3.0,<0.4.0)\", \"sphinx-rtd-theme (>=0.5.2,<0.6.0)\", \"pycodestyle (>=2.7.0,<2.8.0)\", \"flake8 (>=3.9.2,<3.10.0)\", \"uvloop (>=0.15.3)\"]\ndocs = [\"Sphinx (>=4.1.2,<4.2.0)\", \"sphinxcontrib-asyncio (>=0.3.0,<0.4.0)\", \"sphinx-rtd-theme (>=0.5.2,<0.6.0)\"]\ntest = [\"pycodestyle (>=2.7.0,<2.8.0)\", \"flake8 (>=3.9.2,<3.10.0)\", \"uvloop (>=0.15.3)\"]\n\n[[package]]\nname = \"attrs\"\nversion = \"22.1.0\"\ndescription = \"Classes Without Boilerplate\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5\"\n\n[package.extras]\ndev = [\"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"pympler\", \"pytest (>=4.3.0)\", \"mypy (>=0.900,!=0.940)\", \"pytest-mypy-plugins\", \"zope.interface\", \"furo\", \"sphinx\", \"sphinx-notfound-page\", \"pre-commit\", \"cloudpickle\"]\ndocs = [\"furo\", \"sphinx\", \"zope.interface\", \"sphinx-notfound-page\"]\ntests = [\"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"pympler\", \"pytest (>=4.3.0)\", \"mypy (>=0.900,!=0.940)\", \"pytest-mypy-plugins\", \"zope.interface\", \"cloudpickle\"]\ntests_no_zope = [\"coverage[toml] (>=5.0.2)\", \"hypothesis\", \"pympler\", \"pytest (>=4.3.0)\", \"mypy (>=0.900,!=0.940)\", \"pytest-mypy-plugins\", \"cloudpickle\"]\n\n[[package]]\nname = \"backports.zoneinfo\"\nversion = \"0.2.1\"\ndescription = \"Backport of the standard library zoneinfo module\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.extras]\ntzdata = [\"tzdata\"]\n\n[[package]]\nname = \"beautifulsoup4\"\nversion = \"4.9.3\"\ndescription = \"Screen-scraping library\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[package.dependencies]\nsoupsieve = {version = \">1.2\", markers = \"python_version >= \\\"3.0\\\"\"}\n\n[package.extras]\nhtml5lib = [\"html5lib\"]\nlxml = [\"lxml\"]\n\n[[package]]\nname = \"bilireq\"\nversion = \"0.2.0.post1\"\ndescription = \"\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7,<4.0\"\n\n[package.dependencies]\ngrpcio = \">=1.46.3,<2.0.0\"\nhttpx = \">=0.23.0,<0.24.0\"\nprotobuf = \"3.20.1\"\nrsa = \">=4.8,<5.0\"\n\n[package.extras]\nqrcode = [\"qrcode[pil] (>=7.3.1,<8.0.0)\"]\n\n[[package]]\nname = \"black\"\nversion = \"22.6.0\"\ndescription = \"The uncompromising code formatter.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6.2\"\n\n[package.dependencies]\nclick = \">=8.0.0\"\nmypy-extensions = \">=0.4.3\"\npathspec = \">=0.9.0\"\nplatformdirs = \">=2\"\ntomli = {version = \">=1.1.0\", markers = \"python_full_version < \\\"3.11.0a7\\\"\"}\ntyping-extensions = {version = \">=3.10.0.0\", markers = \"python_version < \\\"3.10\\\"\"}\n\n[package.extras]\ncolorama = [\"colorama (>=0.4.3)\"]\nd = [\"aiohttp (>=3.7.4)\"]\njupyter = [\"ipython (>=7.8.0)\", \"tokenize-rt (>=3.2.0)\"]\nuvloop = [\"uvloop (>=0.15.2)\"]\n\n[[package]]\nname = \"certifi\"\nversion = \"2022.6.15\"\ndescription = \"Python package for providing Mozilla's CA Bundle.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[[package]]\nname = \"chardet\"\nversion = \"4.0.0\"\ndescription = \"Universal encoding detector for Python 2 and 3\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"\n\n[[package]]\nname = \"click\"\nversion = \"8.1.3\"\ndescription = \"Composable command line interface toolkit\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\ncolorama = {version = \"*\", markers = \"platform_system == \\\"Windows\\\"\"}\n\n[[package]]\nname = \"cn2an\"\nversion = \"0.5.17\"\ndescription = \"Convert Chinese numerals and Arabic numerals.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\nproces = \">=0.1.0\"\n\"ruamel.yaml\" = \">=0.16.0\"\n\n[[package]]\nname = \"colorama\"\nversion = \"0.4.5\"\ndescription = \"Cross-platform colored terminal text.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"\n\n[[package]]\nname = \"commonmark\"\nversion = \"0.9.1\"\ndescription = \"Python parser for the CommonMark Markdown spec\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[package.extras]\ntest = [\"hypothesis (==3.55.3)\", \"flake8 (==3.7.8)\"]\n\n[[package]]\nname = \"cycler\"\nversion = \"0.11.0\"\ndescription = \"Composable style cycles\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[[package]]\nname = \"dateparser\"\nversion = \"1.1.1\"\ndescription = \"Date parsing library designed to parse dates from HTML pages\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5\"\n\n[package.dependencies]\npython-dateutil = \"*\"\npytz = \"*\"\nregex = \"<2019.02.19 || >2019.02.19,<2021.8.27 || >2021.8.27,<2022.3.15\"\ntzlocal = \"*\"\n\n[package.extras]\nlangdetect = [\"langdetect\"]\nfasttext = [\"fasttext\"]\ncalendars = [\"convertdate\", \"hijri-converter\", \"convertdate\"]\n\n[[package]]\nname = \"ecdsa\"\nversion = \"0.18.0\"\ndescription = \"ECDSA cryptographic signature library (pure python)\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.6, !=3.0.*, !=3.1.*, !=3.2.*\"\n\n[package.dependencies]\nsix = \">=1.9.0\"\n\n[package.extras]\ngmpy = [\"gmpy\"]\ngmpy2 = [\"gmpy2\"]\n\n[[package]]\nname = \"emoji\"\nversion = \"1.7.0\"\ndescription = \"Emoji for Python\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[package.extras]\ndev = [\"pytest\", \"coverage\", \"coveralls\"]\n\n[[package]]\nname = \"fastapi\"\nversion = \"0.78.0\"\ndescription = \"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6.1\"\n\n[package.dependencies]\npydantic = \">=1.6.2,<1.7 || >1.7,<1.7.1 || >1.7.1,<1.7.2 || >1.7.2,<1.7.3 || >1.7.3,<1.8 || >1.8,<1.8.1 || >1.8.1,<2.0.0\"\nstarlette = \"0.19.1\"\n\n[package.extras]\nall = [\"requests (>=2.24.0,<3.0.0)\", \"jinja2 (>=2.11.2,<4.0.0)\", \"python-multipart (>=0.0.5,<0.0.6)\", \"itsdangerous (>=1.1.0,<3.0.0)\", \"pyyaml (>=5.3.1,<7.0.0)\", \"ujson (>=4.0.1,!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0,<6.0.0)\", \"orjson (>=3.2.1,<4.0.0)\", \"email_validator (>=1.1.1,<2.0.0)\", \"uvicorn[standard] (>=0.12.0,<0.18.0)\"]\ndev = [\"python-jose[cryptography] (>=3.3.0,<4.0.0)\", \"passlib[bcrypt] (>=1.7.2,<2.0.0)\", \"autoflake (>=1.4.0,<2.0.0)\", \"flake8 (>=3.8.3,<4.0.0)\", \"uvicorn[standard] (>=0.12.0,<0.18.0)\", \"pre-commit (>=2.17.0,<3.0.0)\"]\ndoc = [\"mkdocs (>=1.1.2,<2.0.0)\", \"mkdocs-material (>=8.1.4,<9.0.0)\", \"mdx-include (>=1.4.1,<2.0.0)\", \"mkdocs-markdownextradata-plugin (>=0.1.7,<0.3.0)\", \"typer (>=0.4.1,<0.5.0)\", \"pyyaml (>=5.3.1,<7.0.0)\"]\ntest = [\"pytest (>=6.2.4,<7.0.0)\", \"pytest-cov (>=2.12.0,<4.0.0)\", \"mypy (==0.910)\", \"flake8 (>=3.8.3,<4.0.0)\", \"black (==22.3.0)\", \"isort (>=5.0.6,<6.0.0)\", \"requests (>=2.24.0,<3.0.0)\", \"httpx (>=0.14.0,<0.19.0)\", \"email_validator (>=1.1.1,<2.0.0)\", \"sqlalchemy (>=1.3.18,<1.5.0)\", \"peewee (>=3.13.3,<4.0.0)\", \"databases[sqlite] (>=0.3.2,<0.6.0)\", \"orjson (>=3.2.1,<4.0.0)\", \"ujson (>=4.0.1,!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0,<6.0.0)\", \"python-multipart (>=0.0.5,<0.0.6)\", \"flask (>=1.1.2,<3.0.0)\", \"anyio[trio] (>=3.2.1,<4.0.0)\", \"types-ujson (==4.2.1)\", \"types-orjson (==3.6.2)\", \"types-dataclasses (==0.6.5)\"]\n\n[[package]]\nname = \"feedparser\"\nversion = \"6.0.10\"\ndescription = \"Universal feed parser, handles RSS 0.9x, RSS 1.0, RSS 2.0, CDF, Atom 0.3, and Atom 1.0 feeds\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\nsgmllib3k = \"*\"\n\n[[package]]\nname = \"fonttools\"\nversion = \"4.34.4\"\ndescription = \"Tools to manipulate font files\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.extras]\nall = [\"fs (>=2.2.0,<3)\", \"lxml (>=4.0,<5)\", \"zopfli (>=0.1.4)\", \"lz4 (>=1.7.4.2)\", \"matplotlib\", \"sympy\", \"skia-pathops (>=0.5.0)\", \"uharfbuzz (>=0.23.0)\", \"brotlicffi (>=0.8.0)\", \"scipy\", \"brotli (>=1.0.1)\", \"munkres\", \"unicodedata2 (>=14.0.0)\", \"xattr\"]\ngraphite = [\"lz4 (>=1.7.4.2)\"]\ninterpolatable = [\"scipy\", \"munkres\"]\nlxml = [\"lxml (>=4.0,<5)\"]\npathops = [\"skia-pathops (>=0.5.0)\"]\nplot = [\"matplotlib\"]\nrepacker = [\"uharfbuzz (>=0.23.0)\"]\nsymfont = [\"sympy\"]\ntype1 = [\"xattr\"]\nufo = [\"fs (>=2.2.0,<3)\"]\nunicode = [\"unicodedata2 (>=14.0.0)\"]\nwoff = [\"zopfli (>=0.1.4)\", \"brotlicffi (>=0.8.0)\", \"brotli (>=1.0.1)\"]\n\n[[package]]\nname = \"gino\"\nversion = \"1.0.1\"\ndescription = \"GINO Is Not ORM - a Python asyncio ORM on SQLAlchemy core.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5,<4.0\"\n\n[package.dependencies]\nasyncpg = \">=0.18,<1.0\"\nSQLAlchemy = \">=1.2.16,<1.4\"\n\n[package.extras]\nquart = [\"gino-quart (>=0.1.0,<0.2.0)\"]\nsanic = [\"gino-sanic (>=0.1.0,<0.2.0)\"]\ntornado = [\"gino-tornado (>=0.1.0,<0.2.0)\"]\naiohttp = [\"gino-aiohttp (>=0.1.0,<0.2.0)\"]\nstarlette = [\"gino-starlette (>=0.1.1,<0.2.0)\"]\n\n[[package]]\nname = \"greenlet\"\nversion = \"1.1.2\"\ndescription = \"Lightweight in-process concurrent programming\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*\"\n\n[package.extras]\ndocs = [\"sphinx\"]\n\n[[package]]\nname = \"grpcio\"\nversion = \"1.48.0\"\ndescription = \"HTTP/2-based RPC framework\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\nsix = \">=1.5.2\"\n\n[package.extras]\nprotobuf = [\"grpcio-tools (>=1.48.0)\"]\n\n[[package]]\nname = \"h11\"\nversion = \"0.12.0\"\ndescription = \"A pure-Python, bring-your-own-I/O implementation of HTTP/1.1\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[[package]]\nname = \"httpcore\"\nversion = \"0.15.0\"\ndescription = \"A minimal low-level HTTP client.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\nanyio = \">=3.0.0,<4.0.0\"\ncertifi = \"*\"\nh11 = \">=0.11,<0.13\"\nsniffio = \">=1.0.0,<2.0.0\"\n\n[package.extras]\nhttp2 = [\"h2 (>=3,<5)\"]\nsocks = [\"socksio (>=1.0.0,<2.0.0)\"]\n\n[[package]]\nname = \"httptools\"\nversion = \"0.4.0\"\ndescription = \"A collection of framework independent HTTP protocol utils.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5.0\"\n\n[package.extras]\ntest = [\"Cython (>=0.29.24,<0.30.0)\"]\n\n[[package]]\nname = \"httpx\"\nversion = \"0.23.0\"\ndescription = \"The next generation HTTP client.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\ncertifi = \"*\"\nhttpcore = \">=0.15.0,<0.16.0\"\nrfc3986 = {version = \">=1.3,<2\", extras = [\"idna2008\"]}\nsniffio = \"*\"\n\n[package.extras]\nbrotli = [\"brotlicffi\", \"brotli\"]\ncli = [\"click (>=8.0.0,<9.0.0)\", \"rich (>=10,<13)\", \"pygments (>=2.0.0,<3.0.0)\"]\nhttp2 = [\"h2 (>=3,<5)\"]\nsocks = [\"socksio (>=1.0.0,<2.0.0)\"]\n\n[[package]]\nname = \"idna\"\nversion = \"3.3\"\ndescription = \"Internationalized Domain Names in Applications (IDNA)\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5\"\n\n[[package]]\nname = \"imagehash\"\nversion = \"4.2.1\"\ndescription = \"Image Hashing library\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[package.dependencies]\nnumpy = \"*\"\npillow = \"*\"\nPyWavelets = \"*\"\nscipy = \"*\"\nsix = \"*\"\n\n[[package]]\nname = \"jieba\"\nversion = \"0.42.1\"\ndescription = \"Chinese Words Segmentation Utilities\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[[package]]\nname = \"kiwisolver\"\nversion = \"1.4.4\"\ndescription = \"A fast implementation of the Cassowary constraint solver\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[[package]]\nname = \"loguru\"\nversion = \"0.6.0\"\ndescription = \"Python logging made (stupidly) simple\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5\"\n\n[package.dependencies]\ncolorama = {version = \">=0.3.4\", markers = \"sys_platform == \\\"win32\\\"\"}\nwin32-setctime = {version = \">=1.0.0\", markers = \"sys_platform == \\\"win32\\\"\"}\n\n[package.extras]\ndev = [\"sphinx-rtd-theme (>=0.4.3)\", \"sphinx-autobuild (>=0.7.1)\", \"Sphinx (>=4.1.1)\", \"isort (>=5.1.1)\", \"black (>=19.10b0)\", \"pytest-cov (>=2.7.1)\", \"pytest (>=4.6.2)\", \"tox (>=3.9.0)\", \"flake8 (>=3.7.7)\", \"docutils (==0.16)\", \"colorama (>=0.3.4)\"]\n\n[[package]]\nname = \"lxml\"\nversion = \"4.6.5\"\ndescription = \"Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, != 3.4.*\"\n\n[package.extras]\ncssselect = [\"cssselect (>=0.7)\"]\nhtml5 = [\"html5lib\"]\nhtmlsoup = [\"beautifulsoup4\"]\nsource = [\"Cython (>=0.29.7)\"]\n\n[[package]]\nname = \"matplotlib\"\nversion = \"3.5.2\"\ndescription = \"Python plotting package\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\ncycler = \">=0.10\"\nfonttools = \">=4.22.0\"\nkiwisolver = \">=1.0.1\"\nnumpy = \">=1.17\"\npackaging = \">=20.0\"\npillow = \">=6.2.0\"\npyparsing = \">=2.2.1\"\npython-dateutil = \">=2.7\"\nsetuptools_scm = \">=4\"\n\n[[package]]\nname = \"msgpack\"\nversion = \"1.0.4\"\ndescription = \"MessagePack serializer\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[[package]]\nname = \"multidict\"\nversion = \"6.0.2\"\ndescription = \"multidict implementation\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[[package]]\nname = \"mypy-extensions\"\nversion = \"0.4.3\"\ndescription = \"Experimental type system extensions for programs checked with the mypy typechecker.\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[[package]]\nname = \"nonebot-adapter-onebot\"\nversion = \"2.1.1\"\ndescription = \"OneBot(CQHTTP) adapter for nonebot2\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7.3,<4.0.0\"\n\n[package.dependencies]\nmsgpack = \">=1.0.3,<2.0.0\"\nnonebot2 = \">=2.0.0-beta.3,<3.0.0\"\n\n[[package]]\nname = \"nonebot-plugin-apscheduler\"\nversion = \"0.1.3\"\ndescription = \"APScheduler Support for NoneBot2\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7.3,<4.0.0\"\n\n[package.dependencies]\napscheduler = \">=3.7.0,<4.0.0\"\nnonebot2 = \">=2.0.0-alpha.8,<3.0.0\"\n\n[[package]]\nname = \"nonebot2\"\nversion = \"2.0.0b4\"\ndescription = \"An asynchronous python bot framework.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7.3,<4.0.0\"\n\n[package.dependencies]\nfastapi = \">=0.78.0,<0.79.0\"\nloguru = \">=0.6.0,<0.7.0\"\npydantic = {version = \">=1.9.0,<1.10.0\", extras = [\"dotenv\"]}\npygtrie = \">=2.4.1,<3.0.0\"\ntomlkit = \">=0.10.0,<1.0.0\"\ntyping-extensions = \">=3.10.0,<5.0.0\"\nuvicorn = {version = \">=0.17.0,<0.18.0\", extras = [\"standard\"]}\nyarl = \">=1.7.2,<2.0.0\"\n\n[package.extras]\nquart = [\"Quart (>=0.17.0,<0.18.0)\"]\nall = [\"Quart (>=0.17.0,<0.18.0)\", \"websockets (>=10.0,<11.0)\", \"aiohttp[speedups] (>=3.7.4,<4.0.0)\", \"httpx[http2] (>=0.20.0,<1.0.0)\"]\nwebsockets = [\"websockets (>=10.0,<11.0)\"]\naiohttp = [\"aiohttp[speedups] (>=3.7.4,<4.0.0)\"]\nhttpx = [\"httpx[http2] (>=0.20.0,<1.0.0)\"]\n\n[[package]]\nname = \"numpy\"\nversion = \"1.23.1\"\ndescription = \"NumPy is the fundamental package for array computing with Python.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.8\"\n\n[[package]]\nname = \"opencv-python\"\nversion = \"4.6.0.66\"\ndescription = \"Wrapper package for OpenCV python bindings.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\nnumpy = [\n    {version = \">=1.21.2\", markers = \"python_version >= \\\"3.10\\\" or python_version >= \\\"3.6\\\" and platform_system == \\\"Darwin\\\" and platform_machine == \\\"arm64\\\"\"},\n    {version = \">=1.19.3\", markers = \"python_version >= \\\"3.6\\\" and platform_system == \\\"Linux\\\" and platform_machine == \\\"aarch64\\\" or python_version >= \\\"3.9\\\"\"},\n    {version = \">=1.14.5\", markers = \"python_version >= \\\"3.7\\\"\"},\n    {version = \">=1.17.3\", markers = \"python_version >= \\\"3.8\\\"\"},\n]\n\n[[package]]\nname = \"packaging\"\nversion = \"21.3\"\ndescription = \"Core utilities for Python packages\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\npyparsing = \">=2.0.2,<3.0.5 || >3.0.5\"\n\n[[package]]\nname = \"pathspec\"\nversion = \"0.9.0\"\ndescription = \"Utility library for gitignore style pattern matching of file paths.\"\ncategory = \"main\"\noptional = false\npython-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7\"\n\n[[package]]\nname = \"pillow\"\nversion = \"9.2.0\"\ndescription = \"Python Imaging Library (Fork)\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.extras]\ndocs = [\"furo\", \"olefile\", \"sphinx (>=2.4)\", \"sphinx-copybutton\", \"sphinx-issues (>=3.0.1)\", \"sphinx-removed-in\", \"sphinxext-opengraph\"]\ntests = [\"check-manifest\", \"coverage\", \"defusedxml\", \"markdown2\", \"olefile\", \"packaging\", \"pyroma\", \"pytest\", \"pytest-cov\", \"pytest-timeout\"]\n\n[[package]]\nname = \"platformdirs\"\nversion = \"2.5.2\"\ndescription = \"A small Python module for determining appropriate platform-specific dirs, e.g. a \\\"user data dir\\\".\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.extras]\ndocs = [\"furo (>=2021.7.5b38)\", \"proselint (>=0.10.2)\", \"sphinx-autodoc-typehints (>=1.12)\", \"sphinx (>=4)\"]\ntest = [\"appdirs (==1.4.4)\", \"pytest-cov (>=2.7)\", \"pytest-mock (>=3.6)\", \"pytest (>=6)\"]\n\n[[package]]\nname = \"playwright\"\nversion = \"1.24.0\"\ndescription = \"A high-level API to automate web browsers\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\ngreenlet = \"1.1.2\"\npyee = \"8.1.0\"\ntyping-extensions = {version = \"*\", markers = \"python_version <= \\\"3.8\\\"\"}\nwebsockets = \"10.1\"\n\n[[package]]\nname = \"proces\"\nversion = \"0.1.2\"\ndescription = \"text preprocess.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\nzhconv = \"1.4.3\"\n\n[[package]]\nname = \"protobuf\"\nversion = \"3.20.1\"\ndescription = \"Protocol Buffers\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[[package]]\nname = \"psutil\"\nversion = \"5.9.1\"\ndescription = \"Cross-platform lib for process and system monitoring in Python.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"\n\n[package.extras]\ntest = [\"ipaddress\", \"mock\", \"enum34\", \"pywin32\", \"wmi\"]\n\n[[package]]\nname = \"pyasn1\"\nversion = \"0.4.8\"\ndescription = \"ASN.1 types and codecs\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[[package]]\nname = \"pydantic\"\nversion = \"1.9.1\"\ndescription = \"Data validation and settings management using python type hints\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6.1\"\n\n[package.dependencies]\npython-dotenv = {version = \">=0.10.4\", optional = true, markers = \"extra == \\\"dotenv\\\"\"}\ntyping-extensions = \">=3.7.4.3\"\n\n[package.extras]\ndotenv = [\"python-dotenv (>=0.10.4)\"]\nemail = [\"email-validator (>=1.0.3)\"]\n\n[[package]]\nname = \"pyee\"\nversion = \"8.1.0\"\ndescription = \"A port of node.js's EventEmitter to python.\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[[package]]\nname = \"pygments\"\nversion = \"2.12.0\"\ndescription = \"Pygments is a syntax highlighting package written in Python.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[[package]]\nname = \"pygtrie\"\nversion = \"2.5.0\"\ndescription = \"A pure Python trie data structure implementation.\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[[package]]\nname = \"pyparsing\"\nversion = \"3.0.9\"\ndescription = \"pyparsing module - Classes and methods to define and execute parsing grammars\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6.8\"\n\n[package.extras]\ndiagrams = [\"railroad-diagrams\", \"jinja2\"]\n\n[[package]]\nname = \"pypinyin\"\nversion = \"0.46.0\"\ndescription = \"汉字拼音转换模块/工具.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4\"\n\n[[package]]\nname = \"python-dateutil\"\nversion = \"2.8.2\"\ndescription = \"Extensions to the standard Python datetime module\"\ncategory = \"main\"\noptional = false\npython-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,>=2.7\"\n\n[package.dependencies]\nsix = \">=1.5\"\n\n[[package]]\nname = \"python-dotenv\"\nversion = \"0.20.0\"\ndescription = \"Read key-value pairs from a .env file and set them as environment variables\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5\"\n\n[package.extras]\ncli = [\"click (>=5.0)\"]\n\n[[package]]\nname = \"python-jose\"\nversion = \"3.3.0\"\ndescription = \"JOSE implementation in Python\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[package.dependencies]\necdsa = \"!=0.15\"\npyasn1 = \"*\"\nrsa = \"*\"\n\n[package.extras]\ncryptography = [\"cryptography (>=3.4.0)\"]\npycrypto = [\"pycrypto (>=2.6.0,<2.7.0)\", \"pyasn1\"]\npycryptodome = [\"pycryptodome (>=3.3.1,<4.0.0)\", \"pyasn1\"]\n\n[[package]]\nname = \"python-multipart\"\nversion = \"0.0.5\"\ndescription = \"A streaming multipart parser for Python\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[package.dependencies]\nsix = \">=1.4.0\"\n\n[[package]]\nname = \"pytz\"\nversion = \"2022.1\"\ndescription = \"World timezone definitions, modern and historical\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[[package]]\nname = \"pytz-deprecation-shim\"\nversion = \"0.1.0.post0\"\ndescription = \"Shims to make deprecation of pytz easier\"\ncategory = \"main\"\noptional = false\npython-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,>=2.7\"\n\n[package.dependencies]\n\"backports.zoneinfo\" = {version = \"*\", markers = \"python_version >= \\\"3.6\\\" and python_version < \\\"3.9\\\"\"}\ntzdata = {version = \"*\", markers = \"python_version >= \\\"3.6\\\"\"}\n\n[[package]]\nname = \"pywavelets\"\nversion = \"1.3.0\"\ndescription = \"PyWavelets, wavelet transform module\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\nnumpy = \">=1.17.3\"\n\n[[package]]\nname = \"pyyaml\"\nversion = \"5.4.1\"\ndescription = \"YAML parser and emitter for Python\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\"\n\n[[package]]\nname = \"regex\"\nversion = \"2022.3.2\"\ndescription = \"Alternative regular expression module, to replace re.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[[package]]\nname = \"retrying\"\nversion = \"1.3.3\"\ndescription = \"Retrying\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[package.dependencies]\nsix = \">=1.7.0\"\n\n[[package]]\nname = \"rfc3986\"\nversion = \"1.5.0\"\ndescription = \"Validating URI References per RFC 3986\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[package.dependencies]\nidna = {version = \"*\", optional = true, markers = \"extra == \\\"idna2008\\\"\"}\n\n[package.extras]\nidna2008 = [\"idna\"]\n\n[[package]]\nname = \"rich\"\nversion = \"12.5.1\"\ndescription = \"Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6.3,<4.0.0\"\n\n[package.dependencies]\ncommonmark = \">=0.9.0,<0.10.0\"\npygments = \">=2.6.0,<3.0.0\"\ntyping-extensions = {version = \">=4.0.0,<5.0\", markers = \"python_version < \\\"3.9\\\"\"}\n\n[package.extras]\njupyter = [\"ipywidgets (>=7.5.1,<8.0.0)\"]\n\n[[package]]\nname = \"rsa\"\nversion = \"4.9\"\ndescription = \"Pure-Python RSA implementation\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6,<4\"\n\n[package.dependencies]\npyasn1 = \">=0.1.3\"\n\n[[package]]\nname = \"ruamel.yaml\"\nversion = \"0.17.21\"\ndescription = \"ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3\"\n\n[package.dependencies]\n\"ruamel.yaml.clib\" = {version = \">=0.2.6\", markers = \"platform_python_implementation == \\\"CPython\\\" and python_version < \\\"3.11\\\"\"}\n\n[package.extras]\ndocs = [\"ryd\"]\njinja2 = [\"ruamel.yaml.jinja2 (>=0.2)\"]\n\n[[package]]\nname = \"ruamel.yaml.clib\"\nversion = \"0.2.6\"\ndescription = \"C version of reader, parser and emitter for ruamel.yaml derived from libyaml\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5\"\n\n[[package]]\nname = \"scipy\"\nversion = \"1.6.1\"\ndescription = \"SciPy: Scientific Library for Python\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\nnumpy = \">=1.16.5\"\n\n[[package]]\nname = \"setuptools-scm\"\nversion = \"7.0.5\"\ndescription = \"the blessed package to manage your versions by scm tags\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\npackaging = \">=20.0\"\ntomli = \">=1.0.0\"\ntyping-extensions = \"*\"\n\n[package.extras]\ntest = [\"pytest (>=6.2)\", \"virtualenv (>20)\"]\ntoml = [\"setuptools (>=42)\"]\n\n[[package]]\nname = \"sgmllib3k\"\nversion = \"1.0.0\"\ndescription = \"Py3k port of sgmllib.\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[[package]]\nname = \"six\"\nversion = \"1.16.0\"\ndescription = \"Python 2 and 3 compatibility utilities\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\"\n\n[[package]]\nname = \"sniffio\"\nversion = \"1.2.0\"\ndescription = \"Sniff out which async library your code is running under\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5\"\n\n[[package]]\nname = \"soupsieve\"\nversion = \"2.3.2.post1\"\ndescription = \"A modern CSS selector implementation for Beautiful Soup.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[[package]]\nname = \"sqlalchemy\"\nversion = \"1.3.24\"\ndescription = \"Database Abstraction Library\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"\n\n[package.extras]\nmssql = [\"pyodbc\"]\nmssql_pymssql = [\"pymssql\"]\nmssql_pyodbc = [\"pyodbc\"]\nmysql = [\"mysqlclient\"]\noracle = [\"cx-oracle\"]\npostgresql = [\"psycopg2\"]\npostgresql_pg8000 = [\"pg8000 (<1.16.6)\"]\npostgresql_psycopg2binary = [\"psycopg2-binary\"]\npostgresql_psycopg2cffi = [\"psycopg2cffi\"]\npymysql = [\"pymysql (<1)\", \"pymysql\"]\n\n[[package]]\nname = \"starlette\"\nversion = \"0.19.1\"\ndescription = \"The little ASGI library that shines.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\nanyio = \">=3.4.0,<5\"\ntyping-extensions = {version = \">=3.10.0\", markers = \"python_version < \\\"3.10\\\"\"}\n\n[package.extras]\nfull = [\"itsdangerous\", \"jinja2\", \"python-multipart\", \"pyyaml\", \"requests\"]\n\n[[package]]\nname = \"tomli\"\nversion = \"2.0.1\"\ndescription = \"A lil' TOML parser\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[[package]]\nname = \"tomlkit\"\nversion = \"0.11.1\"\ndescription = \"Style preserving TOML library\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6,<4.0\"\n\n[[package]]\nname = \"typing-extensions\"\nversion = \"4.3.0\"\ndescription = \"Backported and Experimental Type Hints for Python 3.7+\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[[package]]\nname = \"tzdata\"\nversion = \"2022.1\"\ndescription = \"Provider of IANA time zone data\"\ncategory = \"main\"\noptional = false\npython-versions = \">=2\"\n\n[[package]]\nname = \"tzlocal\"\nversion = \"4.2\"\ndescription = \"tzinfo object for the local timezone\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\n\"backports.zoneinfo\" = {version = \"*\", markers = \"python_version < \\\"3.9\\\"\"}\npytz-deprecation-shim = \"*\"\ntzdata = {version = \"*\", markers = \"platform_system == \\\"Windows\\\"\"}\n\n[package.extras]\ndevenv = [\"black\", \"pyroma\", \"pytest-cov\", \"zest.releaser\"]\ntest = [\"pytest-mock (>=3.3)\", \"pytest (>=4.3)\"]\n\n[[package]]\nname = \"ujson\"\nversion = \"5.4.0\"\ndescription = \"Ultra fast JSON encoder and decoder for Python\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[[package]]\nname = \"uvicorn\"\nversion = \"0.17.6\"\ndescription = \"The lightning-fast ASGI server.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\nasgiref = \">=3.4.0\"\nclick = \">=7.0\"\ncolorama = {version = \">=0.4\", optional = true, markers = \"sys_platform == \\\"win32\\\" and extra == \\\"standard\\\"\"}\nh11 = \">=0.8\"\nhttptools = {version = \">=0.4.0\", optional = true, markers = \"extra == \\\"standard\\\"\"}\npython-dotenv = {version = \">=0.13\", optional = true, markers = \"extra == \\\"standard\\\"\"}\nPyYAML = {version = \">=5.1\", optional = true, markers = \"extra == \\\"standard\\\"\"}\nuvloop = {version = \">=0.14.0,<0.15.0 || >0.15.0,<0.15.1 || >0.15.1\", optional = true, markers = \"sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\" and extra == \\\"standard\\\"\"}\nwatchgod = {version = \">=0.6\", optional = true, markers = \"extra == \\\"standard\\\"\"}\nwebsockets = {version = \">=10.0\", optional = true, markers = \"extra == \\\"standard\\\"\"}\n\n[package.extras]\nstandard = [\"websockets (>=10.0)\", \"httptools (>=0.4.0)\", \"watchgod (>=0.6)\", \"python-dotenv (>=0.13)\", \"PyYAML (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1)\", \"colorama (>=0.4)\"]\n\n[[package]]\nname = \"uvloop\"\nversion = \"0.16.0\"\ndescription = \"Fast implementation of asyncio event loop on top of libuv\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.extras]\ndev = [\"Cython (>=0.29.24,<0.30.0)\", \"pytest (>=3.6.0)\", \"Sphinx (>=4.1.2,<4.2.0)\", \"sphinxcontrib-asyncio (>=0.3.0,<0.4.0)\", \"sphinx-rtd-theme (>=0.5.2,<0.6.0)\", \"aiohttp\", \"flake8 (>=3.9.2,<3.10.0)\", \"psutil\", \"pycodestyle (>=2.7.0,<2.8.0)\", \"pyOpenSSL (>=19.0.0,<19.1.0)\", \"mypy (>=0.800)\"]\ndocs = [\"Sphinx (>=4.1.2,<4.2.0)\", \"sphinxcontrib-asyncio (>=0.3.0,<0.4.0)\", \"sphinx-rtd-theme (>=0.5.2,<0.6.0)\"]\ntest = [\"aiohttp\", \"flake8 (>=3.9.2,<3.10.0)\", \"psutil\", \"pycodestyle (>=2.7.0,<2.8.0)\", \"pyOpenSSL (>=19.0.0,<19.1.0)\", \"mypy (>=0.800)\"]\n\n[[package]]\nname = \"watchgod\"\nversion = \"0.8.2\"\ndescription = \"Simple, modern file watching and code reload in python.\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[package.dependencies]\nanyio = \">=3.0.0,<4\"\n\n[[package]]\nname = \"websockets\"\nversion = \"10.1\"\ndescription = \"An implementation of the WebSocket Protocol (RFC 6455 & 7692)\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.7\"\n\n[[package]]\nname = \"win32-setctime\"\nversion = \"1.1.0\"\ndescription = \"A small Python utility to set file creation time on Windows\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.5\"\n\n[package.extras]\ndev = [\"black (>=19.3b0)\", \"pytest (>=4.6.2)\"]\n\n[[package]]\nname = \"wordcloud\"\nversion = \"1.8.2.2\"\ndescription = \"A little word cloud generator\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[package.dependencies]\nmatplotlib = \"*\"\nnumpy = \">=1.6.1\"\npillow = \"*\"\n\n[[package]]\nname = \"yarl\"\nversion = \"1.7.2\"\ndescription = \"Yet another URL library\"\ncategory = \"main\"\noptional = false\npython-versions = \">=3.6\"\n\n[package.dependencies]\nidna = \">=2.0\"\nmultidict = \">=4.0\"\n\n[[package]]\nname = \"zhconv\"\nversion = \"1.4.3\"\ndescription = \"A simple implementation of Simplified-Traditional Chinese conversion.\"\ncategory = \"main\"\noptional = false\npython-versions = \"*\"\n\n[metadata]\nlock-version = \"1.1\"\npython-versions = \"^3.8\"\ncontent-hash = \"efbf24a685398d0ecf8de274d72f15a1337200482b4a9095716579794ea4aecb\"\n\n[metadata.files]\naiofiles = [\n    {file = \"aiofiles-0.8.0-py3-none-any.whl\", hash = \"sha256:7a973fc22b29e9962d0897805ace5856e6a566ab1f0c8e5c91ff6c866519c937\"},\n    {file = \"aiofiles-0.8.0.tar.gz\", hash = \"sha256:8334f23235248a3b2e83b2c3a78a22674f39969b96397126cc93664d9a901e59\"},\n]\naiohttp = [\n    {file = \"aiohttp-3.7.4.post0-cp36-cp36m-macosx_10_14_x86_64.whl\", hash = \"sha256:3cf75f7cdc2397ed4442594b935a11ed5569961333d49b7539ea741be2cc79d5\"},\n    {file = \"aiohttp-3.7.4.post0-cp36-cp36m-manylinux1_i686.whl\", hash = \"sha256:4b302b45040890cea949ad092479e01ba25911a15e648429c7c5aae9650c67a8\"},\n    {file = \"aiohttp-3.7.4.post0-cp36-cp36m-manylinux2014_aarch64.whl\", hash = \"sha256:fe60131d21b31fd1a14bd43e6bb88256f69dfc3188b3a89d736d6c71ed43ec95\"},\n    {file = \"aiohttp-3.7.4.post0-cp36-cp36m-manylinux2014_i686.whl\", hash = \"sha256:393f389841e8f2dfc86f774ad22f00923fdee66d238af89b70ea314c4aefd290\"},\n    {file = \"aiohttp-3.7.4.post0-cp36-cp36m-manylinux2014_ppc64le.whl\", hash = \"sha256:c6e9dcb4cb338d91a73f178d866d051efe7c62a7166653a91e7d9fb18274058f\"},\n    {file = \"aiohttp-3.7.4.post0-cp36-cp36m-manylinux2014_s390x.whl\", hash = \"sha256:5df68496d19f849921f05f14f31bd6ef53ad4b00245da3195048c69934521809\"},\n    {file = \"aiohttp-3.7.4.post0-cp36-cp36m-manylinux2014_x86_64.whl\", hash = \"sha256:0563c1b3826945eecd62186f3f5c7d31abb7391fedc893b7e2b26303b5a9f3fe\"},\n    {file = \"aiohttp-3.7.4.post0-cp36-cp36m-win32.whl\", hash = \"sha256:3d78619672183be860b96ed96f533046ec97ca067fd46ac1f6a09cd9b7484287\"},\n    {file = \"aiohttp-3.7.4.post0-cp36-cp36m-win_amd64.whl\", hash = \"sha256:f705e12750171c0ab4ef2a3c76b9a4024a62c4103e3a55dd6f99265b9bc6fcfc\"},\n    {file = \"aiohttp-3.7.4.post0-cp37-cp37m-macosx_10_14_x86_64.whl\", hash = \"sha256:230a8f7e24298dea47659251abc0fd8b3c4e38a664c59d4b89cca7f6c09c9e87\"},\n    {file = \"aiohttp-3.7.4.post0-cp37-cp37m-manylinux1_i686.whl\", hash = \"sha256:2e19413bf84934d651344783c9f5e22dee452e251cfd220ebadbed2d9931dbf0\"},\n    {file = \"aiohttp-3.7.4.post0-cp37-cp37m-manylinux2014_aarch64.whl\", hash = \"sha256:e4b2b334e68b18ac9817d828ba44d8fcb391f6acb398bcc5062b14b2cbeac970\"},\n    {file = \"aiohttp-3.7.4.post0-cp37-cp37m-manylinux2014_i686.whl\", hash = \"sha256:d012ad7911653a906425d8473a1465caa9f8dea7fcf07b6d870397b774ea7c0f\"},\n    {file = \"aiohttp-3.7.4.post0-cp37-cp37m-manylinux2014_ppc64le.whl\", hash = \"sha256:40eced07f07a9e60e825554a31f923e8d3997cfc7fb31dbc1328c70826e04cde\"},\n    {file = \"aiohttp-3.7.4.post0-cp37-cp37m-manylinux2014_s390x.whl\", hash = \"sha256:209b4a8ee987eccc91e2bd3ac36adee0e53a5970b8ac52c273f7f8fd4872c94c\"},\n    {file = \"aiohttp-3.7.4.post0-cp37-cp37m-manylinux2014_x86_64.whl\", hash = \"sha256:14762875b22d0055f05d12abc7f7d61d5fd4fe4642ce1a249abdf8c700bf1fd8\"},\n    {file = \"aiohttp-3.7.4.post0-cp37-cp37m-win32.whl\", hash = \"sha256:7615dab56bb07bff74bc865307aeb89a8bfd9941d2ef9d817b9436da3a0ea54f\"},\n    {file = \"aiohttp-3.7.4.post0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:d9e13b33afd39ddeb377eff2c1c4f00544e191e1d1dee5b6c51ddee8ea6f0cf5\"},\n    {file = \"aiohttp-3.7.4.post0-cp38-cp38-macosx_10_14_x86_64.whl\", hash = \"sha256:547da6cacac20666422d4882cfcd51298d45f7ccb60a04ec27424d2f36ba3eaf\"},\n    {file = \"aiohttp-3.7.4.post0-cp38-cp38-manylinux1_i686.whl\", hash = \"sha256:af9aa9ef5ba1fd5b8c948bb11f44891968ab30356d65fd0cc6707d989cd521df\"},\n    {file = \"aiohttp-3.7.4.post0-cp38-cp38-manylinux2014_aarch64.whl\", hash = \"sha256:64322071e046020e8797117b3658b9c2f80e3267daec409b350b6a7a05041213\"},\n    {file = \"aiohttp-3.7.4.post0-cp38-cp38-manylinux2014_i686.whl\", hash = \"sha256:bb437315738aa441251214dad17428cafda9cdc9729499f1d6001748e1d432f4\"},\n    {file = \"aiohttp-3.7.4.post0-cp38-cp38-manylinux2014_ppc64le.whl\", hash = \"sha256:e54962802d4b8b18b6207d4a927032826af39395a3bd9196a5af43fc4e60b009\"},\n    {file = \"aiohttp-3.7.4.post0-cp38-cp38-manylinux2014_s390x.whl\", hash = \"sha256:a00bb73540af068ca7390e636c01cbc4f644961896fa9363154ff43fd37af2f5\"},\n    {file = \"aiohttp-3.7.4.post0-cp38-cp38-manylinux2014_x86_64.whl\", hash = \"sha256:79ebfc238612123a713a457d92afb4096e2148be17df6c50fb9bf7a81c2f8013\"},\n    {file = \"aiohttp-3.7.4.post0-cp38-cp38-win32.whl\", hash = \"sha256:515dfef7f869a0feb2afee66b957cc7bbe9ad0cdee45aec7fdc623f4ecd4fb16\"},\n    {file = \"aiohttp-3.7.4.post0-cp38-cp38-win_amd64.whl\", hash = \"sha256:114b281e4d68302a324dd33abb04778e8557d88947875cbf4e842c2c01a030c5\"},\n    {file = \"aiohttp-3.7.4.post0-cp39-cp39-macosx_10_14_x86_64.whl\", hash = \"sha256:7b18b97cf8ee5452fa5f4e3af95d01d84d86d32c5e2bfa260cf041749d66360b\"},\n    {file = \"aiohttp-3.7.4.post0-cp39-cp39-manylinux1_i686.whl\", hash = \"sha256:15492a6368d985b76a2a5fdd2166cddfea5d24e69eefed4630cbaae5c81d89bd\"},\n    {file = \"aiohttp-3.7.4.post0-cp39-cp39-manylinux2014_aarch64.whl\", hash = \"sha256:bdb230b4943891321e06fc7def63c7aace16095be7d9cf3b1e01be2f10fba439\"},\n    {file = \"aiohttp-3.7.4.post0-cp39-cp39-manylinux2014_i686.whl\", hash = \"sha256:cffe3ab27871bc3ea47df5d8f7013945712c46a3cc5a95b6bee15887f1675c22\"},\n    {file = \"aiohttp-3.7.4.post0-cp39-cp39-manylinux2014_ppc64le.whl\", hash = \"sha256:f881853d2643a29e643609da57b96d5f9c9b93f62429dcc1cbb413c7d07f0e1a\"},\n    {file = \"aiohttp-3.7.4.post0-cp39-cp39-manylinux2014_s390x.whl\", hash = \"sha256:a5ca29ee66f8343ed336816c553e82d6cade48a3ad702b9ffa6125d187e2dedb\"},\n    {file = \"aiohttp-3.7.4.post0-cp39-cp39-manylinux2014_x86_64.whl\", hash = \"sha256:17c073de315745a1510393a96e680d20af8e67e324f70b42accbd4cb3315c9fb\"},\n    {file = \"aiohttp-3.7.4.post0-cp39-cp39-win32.whl\", hash = \"sha256:932bb1ea39a54e9ea27fc9232163059a0b8855256f4052e776357ad9add6f1c9\"},\n    {file = \"aiohttp-3.7.4.post0-cp39-cp39-win_amd64.whl\", hash = \"sha256:02f46fc0e3c5ac58b80d4d56eb0a7c7d97fcef69ace9326289fb9f1955e65cfe\"},\n    {file = \"aiohttp-3.7.4.post0.tar.gz\", hash = \"sha256:493d3299ebe5f5a7c66b9819eacdcfbbaaf1a8e84911ddffcdc48888497afecf\"},\n]\nanyio = [\n    {file = \"anyio-3.6.1-py3-none-any.whl\", hash = \"sha256:cb29b9c70620506a9a8f87a309591713446953302d7d995344d0d7c6c0c9a7be\"},\n    {file = \"anyio-3.6.1.tar.gz\", hash = \"sha256:413adf95f93886e442aea925f3ee43baa5a765a64a0f52c6081894f9992fdd0b\"},\n]\napscheduler = [\n    {file = \"APScheduler-3.9.1-py2.py3-none-any.whl\", hash = \"sha256:ddc25a0ddd899de44d7f451f4375fb971887e65af51e41e5dcf681f59b8b2c9a\"},\n    {file = \"APScheduler-3.9.1.tar.gz\", hash = \"sha256:65e6574b6395498d371d045f2a8a7e4f7d50c6ad21ef7313d15b1c7cf20df1e3\"},\n]\nasgiref = [\n    {file = \"asgiref-3.5.2-py3-none-any.whl\", hash = \"sha256:1d2880b792ae8757289136f1db2b7b99100ce959b2aa57fd69dab783d05afac4\"},\n    {file = \"asgiref-3.5.2.tar.gz\", hash = \"sha256:4a29362a6acebe09bf1d6640db38c1dc3d9217c68e6f9f6204d72667fc19a424\"},\n]\nasync-timeout = [\n    {file = \"async-timeout-3.0.1.tar.gz\", hash = \"sha256:0c3c816a028d47f659d6ff5c745cb2acf1f966da1fe5c19c77a70282b25f4c5f\"},\n    {file = \"async_timeout-3.0.1-py3-none-any.whl\", hash = \"sha256:4291ca197d287d274d0b6cb5d6f8f8f82d434ed288f962539ff18cc9012f9ea3\"},\n]\nasyncpg = [\n    {file = \"asyncpg-0.26.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:2ed3880b3aec8bda90548218fe0914d251d641f798382eda39a17abfc4910af0\"},\n    {file = \"asyncpg-0.26.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e5bd99ee7a00e87df97b804f178f31086e88c8106aca9703b1d7be5078999e68\"},\n    {file = \"asyncpg-0.26.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:868a71704262834065ca7113d80b1f679609e2df77d837747e3d92150dd5a39b\"},\n    {file = \"asyncpg-0.26.0-cp310-cp310-win32.whl\", hash = \"sha256:838e4acd72da370ad07243898e886e93d3c0c9413f4444d600ba60a5cc206014\"},\n    {file = \"asyncpg-0.26.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:a254d09a3a989cc1839ba2c34448b879cdd017b528a0cda142c92fbb6c13d957\"},\n    {file = \"asyncpg-0.26.0-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:3ecbe8ed3af4c739addbfbd78f7752866cce2c4e9cc3f953556e4960349ae360\"},\n    {file = \"asyncpg-0.26.0-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f3ce7d8c0ab4639bbf872439eba86ef62dd030b245ad0e17c8c675d93d7a6b2d\"},\n    {file = \"asyncpg-0.26.0-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:7129bd809990fd119e8b2b9982e80be7712bb6041cd082be3e415e60e5e2e98f\"},\n    {file = \"asyncpg-0.26.0-cp36-cp36m-win32.whl\", hash = \"sha256:03f44926fa7ff7ccd59e98f05c7e227e9de15332a7da5bbcef3654bf468ee597\"},\n    {file = \"asyncpg-0.26.0-cp36-cp36m-win_amd64.whl\", hash = \"sha256:b1f7b173af649b85126429e11a628d01a5b75973d2a55d64dba19ad8f0e9f904\"},\n    {file = \"asyncpg-0.26.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:efe056fd22fc6ed5c1ab353b6510808409566daac4e6f105e2043797f17b8dad\"},\n    {file = \"asyncpg-0.26.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d96cf93e01df9fb03cef5f62346587805e6c0ca6f654c23b8d35315bdc69af59\"},\n    {file = \"asyncpg-0.26.0-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:235205b60d4d014921f7b1cdca0e19669a9a8978f7606b3eb8237ca95f8e716e\"},\n    {file = \"asyncpg-0.26.0-cp37-cp37m-win32.whl\", hash = \"sha256:0de408626cfc811ef04f372debfcdd5e4ab5aeb358f2ff14d1bdc246ed6272b5\"},\n    {file = \"asyncpg-0.26.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:f92d501bf213b16fabad4fbb0061398d2bceae30ddc228e7314c28dcc6641b79\"},\n    {file = \"asyncpg-0.26.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:9acb22a7b6bcca0d80982dce3d67f267d43e960544fb5dd934fd3abe20c48014\"},\n    {file = \"asyncpg-0.26.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e550d8185f2c4725c1e8d3c555fe668b41bd092143012ddcc5343889e1c2a13d\"},\n    {file = \"asyncpg-0.26.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:050e339694f8c5d9aebcf326ca26f6622ef23963a6a3a4f97aeefc743954afd5\"},\n    {file = \"asyncpg-0.26.0-cp38-cp38-win32.whl\", hash = \"sha256:b0c3f39ebfac06848ba3f1e280cb1fada7cc1229538e3dad3146e8d1f9deb92a\"},\n    {file = \"asyncpg-0.26.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:49fc7220334cc31d14866a0b77a575d6a5945c0fa3bb67f17304e8b838e2a02b\"},\n    {file = \"asyncpg-0.26.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:d156e53b329e187e2dbfca8c28c999210045c45ef22a200b50de9b9e520c2694\"},\n    {file = \"asyncpg-0.26.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4b4051012ca75defa9a1dc6b78185ca58cdc3a247187eb76a6bcf55dfaa2fad4\"},\n    {file = \"asyncpg-0.26.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:6d60f15a0ac18c54a6ca6507c28599c06e2e87a0901e7b548f15243d71905b18\"},\n    {file = \"asyncpg-0.26.0-cp39-cp39-win32.whl\", hash = \"sha256:ede1a3a2c377fe12a3930f4b4dd5340e8b32929541d5db027a21816852723438\"},\n    {file = \"asyncpg-0.26.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:8e1e79f0253cbd51fc43c4d0ce8804e46ee71f6c173fdc75606662ad18756b52\"},\n    {file = \"asyncpg-0.26.0.tar.gz\", hash = \"sha256:77e684a24fee17ba3e487ca982d0259ed17bae1af68006f4cf284b23ba20ea2c\"},\n]\nattrs = [\n    {file = \"attrs-22.1.0-py2.py3-none-any.whl\", hash = \"sha256:86efa402f67bf2df34f51a335487cf46b1ec130d02b8d39fd248abfd30da551c\"},\n    {file = \"attrs-22.1.0.tar.gz\", hash = \"sha256:29adc2665447e5191d0e7c568fde78b21f9672d344281d0c6e1ab085429b22b6\"},\n]\n\"backports.zoneinfo\" = [\n    {file = \"backports.zoneinfo-0.2.1-cp36-cp36m-macosx_10_14_x86_64.whl\", hash = \"sha256:da6013fd84a690242c310d77ddb8441a559e9cb3d3d59ebac9aca1a57b2e18bc\"},\n    {file = \"backports.zoneinfo-0.2.1-cp36-cp36m-manylinux1_i686.whl\", hash = \"sha256:89a48c0d158a3cc3f654da4c2de1ceba85263fafb861b98b59040a5086259722\"},\n    {file = \"backports.zoneinfo-0.2.1-cp36-cp36m-manylinux1_x86_64.whl\", hash = \"sha256:1c5742112073a563c81f786e77514969acb58649bcdf6cdf0b4ed31a348d4546\"},\n    {file = \"backports.zoneinfo-0.2.1-cp36-cp36m-win32.whl\", hash = \"sha256:e8236383a20872c0cdf5a62b554b27538db7fa1bbec52429d8d106effbaeca08\"},\n    {file = \"backports.zoneinfo-0.2.1-cp36-cp36m-win_amd64.whl\", hash = \"sha256:8439c030a11780786a2002261569bdf362264f605dfa4d65090b64b05c9f79a7\"},\n    {file = \"backports.zoneinfo-0.2.1-cp37-cp37m-macosx_10_14_x86_64.whl\", hash = \"sha256:f04e857b59d9d1ccc39ce2da1021d196e47234873820cbeaad210724b1ee28ac\"},\n    {file = \"backports.zoneinfo-0.2.1-cp37-cp37m-manylinux1_i686.whl\", hash = \"sha256:17746bd546106fa389c51dbea67c8b7c8f0d14b5526a579ca6ccf5ed72c526cf\"},\n    {file = \"backports.zoneinfo-0.2.1-cp37-cp37m-manylinux1_x86_64.whl\", hash = \"sha256:5c144945a7752ca544b4b78c8c41544cdfaf9786f25fe5ffb10e838e19a27570\"},\n    {file = \"backports.zoneinfo-0.2.1-cp37-cp37m-win32.whl\", hash = \"sha256:e55b384612d93be96506932a786bbcde5a2db7a9e6a4bb4bffe8b733f5b9036b\"},\n    {file = \"backports.zoneinfo-0.2.1-cp37-cp37m-win_amd64.whl\", hash = \"sha256:a76b38c52400b762e48131494ba26be363491ac4f9a04c1b7e92483d169f6582\"},\n    {file = \"backports.zoneinfo-0.2.1-cp38-cp38-macosx_10_14_x86_64.whl\", hash = \"sha256:8961c0f32cd0336fb8e8ead11a1f8cd99ec07145ec2931122faaac1c8f7fd987\"},\n    {file = \"backports.zoneinfo-0.2.1-cp38-cp38-manylinux1_i686.whl\", hash = \"sha256:e81b76cace8eda1fca50e345242ba977f9be6ae3945af8d46326d776b4cf78d1\"},\n    {file = \"backports.zoneinfo-0.2.1-cp38-cp38-manylinux1_x86_64.whl\", hash = \"sha256:7b0a64cda4145548fed9efc10322770f929b944ce5cee6c0dfe0c87bf4c0c8c9\"},\n    {file = \"backports.zoneinfo-0.2.1-cp38-cp38-win32.whl\", hash = \"sha256:1b13e654a55cd45672cb54ed12148cd33628f672548f373963b0bff67b217328\"},\n    {file = \"backports.zoneinfo-0.2.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:4a0f800587060bf8880f954dbef70de6c11bbe59c673c3d818921f042f9954a6\"},\n    {file = \"backports.zoneinfo-0.2.1.tar.gz\", hash = \"sha256:fadbfe37f74051d024037f223b8e001611eac868b5c5b06144ef4d8b799862f2\"},\n]\nbeautifulsoup4 = [\n    {file = \"beautifulsoup4-4.9.3-py2-none-any.whl\", hash = \"sha256:4c98143716ef1cb40bf7f39a8e3eec8f8b009509e74904ba3a7b315431577e35\"},\n    {file = \"beautifulsoup4-4.9.3-py3-none-any.whl\", hash = \"sha256:fff47e031e34ec82bf17e00da8f592fe7de69aeea38be00523c04623c04fb666\"},\n    {file = \"beautifulsoup4-4.9.3.tar.gz\", hash = \"sha256:84729e322ad1d5b4d25f805bfa05b902dd96450f43842c4e99067d5e1369eb25\"},\n]\nbilireq = [\n    {file = \"bilireq-0.2.0.post1-py3-none-any.whl\", hash = \"sha256:bced02207c09fc29d08f1f37cfeaefdcfdde3dbff180d35d5c3c9d7ea3fa1f90\"},\n    {file = \"bilireq-0.2.0.post1.tar.gz\", hash = \"sha256:f731a5768c7e3159b1e0d5b02b3fdb58939ed24d6cd23a428ab1df20fbbf62cc\"},\n]\nblack = [\n    {file = \"black-22.6.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f586c26118bc6e714ec58c09df0157fe2d9ee195c764f630eb0d8e7ccce72e69\"},\n    {file = \"black-22.6.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:b270a168d69edb8b7ed32c193ef10fd27844e5c60852039599f9184460ce0807\"},\n    {file = \"black-22.6.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:6797f58943fceb1c461fb572edbe828d811e719c24e03375fd25170ada53825e\"},\n    {file = \"black-22.6.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c85928b9d5f83b23cee7d0efcb310172412fbf7cb9d9ce963bd67fd141781def\"},\n    {file = \"black-22.6.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:f6fe02afde060bbeef044af7996f335fbe90b039ccf3f5eb8f16df8b20f77666\"},\n    {file = \"black-22.6.0-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:cfaf3895a9634e882bf9d2363fed5af8888802d670f58b279b0bece00e9a872d\"},\n    {file = \"black-22.6.0-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:94783f636bca89f11eb5d50437e8e17fbc6a929a628d82304c80fa9cd945f256\"},\n    {file = \"black-22.6.0-cp36-cp36m-win_amd64.whl\", hash = \"sha256:2ea29072e954a4d55a2ff58971b83365eba5d3d357352a07a7a4df0d95f51c78\"},\n    {file = \"black-22.6.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:e439798f819d49ba1c0bd9664427a05aab79bfba777a6db94fd4e56fae0cb849\"},\n    {file = \"black-22.6.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:187d96c5e713f441a5829e77120c269b6514418f4513a390b0499b0987f2ff1c\"},\n    {file = \"black-22.6.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:074458dc2f6e0d3dab7928d4417bb6957bb834434516f21514138437accdbe90\"},\n    {file = \"black-22.6.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:a218d7e5856f91d20f04e931b6f16d15356db1c846ee55f01bac297a705ca24f\"},\n    {file = \"black-22.6.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:568ac3c465b1c8b34b61cd7a4e349e93f91abf0f9371eda1cf87194663ab684e\"},\n    {file = \"black-22.6.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:6c1734ab264b8f7929cef8ae5f900b85d579e6cbfde09d7387da8f04771b51c6\"},\n    {file = \"black-22.6.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c9a3ac16efe9ec7d7381ddebcc022119794872abce99475345c5a61aa18c45ad\"},\n    {file = \"black-22.6.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:b9fd45787ba8aa3f5e0a0a98920c1012c884622c6c920dbe98dbd05bc7c70fbf\"},\n    {file = \"black-22.6.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:7ba9be198ecca5031cd78745780d65a3f75a34b2ff9be5837045dce55db83d1c\"},\n    {file = \"black-22.6.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:a3db5b6409b96d9bd543323b23ef32a1a2b06416d525d27e0f67e74f1446c8f2\"},\n    {file = \"black-22.6.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:560558527e52ce8afba936fcce93a7411ab40c7d5fe8c2463e279e843c0328ee\"},\n    {file = \"black-22.6.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b154e6bbde1e79ea3260c4b40c0b7b3109ffcdf7bc4ebf8859169a6af72cd70b\"},\n    {file = \"black-22.6.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:4af5bc0e1f96be5ae9bd7aaec219c901a94d6caa2484c21983d043371c733fc4\"},\n    {file = \"black-22.6.0-py3-none-any.whl\", hash = \"sha256:ac609cf8ef5e7115ddd07d85d988d074ed00e10fbc3445aee393e70164a2219c\"},\n    {file = \"black-22.6.0.tar.gz\", hash = \"sha256:6c6d39e28aed379aec40da1c65434c77d75e65bb59a1e1c283de545fb4e7c6c9\"},\n]\ncertifi = [\n    {file = \"certifi-2022.6.15-py3-none-any.whl\", hash = \"sha256:fe86415d55e84719d75f8b69414f6438ac3547d2078ab91b67e779ef69378412\"},\n    {file = \"certifi-2022.6.15.tar.gz\", hash = \"sha256:84c85a9078b11105f04f3036a9482ae10e4621616db313fe045dd24743a0820d\"},\n]\nchardet = [\n    {file = \"chardet-4.0.0-py2.py3-none-any.whl\", hash = \"sha256:f864054d66fd9118f2e67044ac8981a54775ec5b67aed0441892edb553d21da5\"},\n    {file = \"chardet-4.0.0.tar.gz\", hash = \"sha256:0d6f53a15db4120f2b08c94f11e7d93d2c911ee118b6b30a04ec3ee8310179fa\"},\n]\nclick = [\n    {file = \"click-8.1.3-py3-none-any.whl\", hash = \"sha256:bb4d8133cb15a609f44e8213d9b391b0809795062913b383c62be0ee95b1db48\"},\n    {file = \"click-8.1.3.tar.gz\", hash = \"sha256:7682dc8afb30297001674575ea00d1814d808d6a36af415a82bd481d37ba7b8e\"},\n]\ncn2an = [\n    {file = \"cn2an-0.5.17-py3-none-any.whl\", hash = \"sha256:3847b61e8519db5b0b8c0334478bb18d224e4401ae6bc4020314f693c0ef8422\"},\n    {file = \"cn2an-0.5.17.tar.gz\", hash = \"sha256:7b122c878722a3e7d098749fd32fb557e333de178cb451c7164cf52abef30199\"},\n]\ncolorama = [\n    {file = \"colorama-0.4.5-py2.py3-none-any.whl\", hash = \"sha256:854bf444933e37f5824ae7bfc1e98d5bce2ebe4160d46b5edf346a89358e99da\"},\n    {file = \"colorama-0.4.5.tar.gz\", hash = \"sha256:e6c6b4334fc50988a639d9b98aa429a0b57da6e17b9a44f0451f930b6967b7a4\"},\n]\ncommonmark = [\n    {file = \"commonmark-0.9.1-py2.py3-none-any.whl\", hash = \"sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9\"},\n    {file = \"commonmark-0.9.1.tar.gz\", hash = \"sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60\"},\n]\ncycler = [\n    {file = \"cycler-0.11.0-py3-none-any.whl\", hash = \"sha256:3a27e95f763a428a739d2add979fa7494c912a32c17c4c38c4d5f082cad165a3\"},\n    {file = \"cycler-0.11.0.tar.gz\", hash = \"sha256:9c87405839a19696e837b3b818fed3f5f69f16f1eec1a1ad77e043dcea9c772f\"},\n]\ndateparser = [\n    {file = \"dateparser-1.1.1-py2.py3-none-any.whl\", hash = \"sha256:9600874312ff28a41f96ec7ccdc73be1d1c44435719da47fea3339d55ff5a628\"},\n    {file = \"dateparser-1.1.1.tar.gz\", hash = \"sha256:038196b1f12c7397e38aad3d61588833257f6f552baa63a1499e6987fa8d42d9\"},\n]\necdsa = [\n    {file = \"ecdsa-0.18.0-py2.py3-none-any.whl\", hash = \"sha256:80600258e7ed2f16b9aa1d7c295bd70194109ad5a30fdee0eaeefef1d4c559dd\"},\n    {file = \"ecdsa-0.18.0.tar.gz\", hash = \"sha256:190348041559e21b22a1d65cee485282ca11a6f81d503fddb84d5017e9ed1e49\"},\n]\nemoji = [\n    {file = \"emoji-1.7.0.tar.gz\", hash = \"sha256:65c54533ea3c78f30d0729288998715f418d7467de89ec258a31c0ce8660a1d1\"},\n]\nfastapi = [\n    {file = \"fastapi-0.78.0-py3-none-any.whl\", hash = \"sha256:15fcabd5c78c266fa7ae7d8de9b384bfc2375ee0503463a6febbe3bab69d6f65\"},\n    {file = \"fastapi-0.78.0.tar.gz\", hash = \"sha256:3233d4a789ba018578658e2af1a4bb5e38bdd122ff722b313666a9b2c6786a83\"},\n]\nfeedparser = [\n    {file = \"feedparser-6.0.10-py3-none-any.whl\", hash = \"sha256:79c257d526d13b944e965f6095700587f27388e50ea16fd245babe4dfae7024f\"},\n    {file = \"feedparser-6.0.10.tar.gz\", hash = \"sha256:27da485f4637ce7163cdeab13a80312b93b7d0c1b775bef4a47629a3110bca51\"},\n]\nfonttools = [\n    {file = \"fonttools-4.34.4-py3-none-any.whl\", hash = \"sha256:d73f25b283cd8033367451122aa868a23de0734757a01984e4b30b18b9050c72\"},\n    {file = \"fonttools-4.34.4.zip\", hash = \"sha256:9a1c52488045cd6c6491fd07711a380f932466e317cb8e016fc4e99dc7eac2f0\"},\n]\ngino = [\n    {file = \"gino-1.0.1-py3-none-any.whl\", hash = \"sha256:56df57cfdefbaf897a7c4897c265a0e91a8cca80716fb64f7d3cf6d501fdfb3d\"},\n    {file = \"gino-1.0.1.tar.gz\", hash = \"sha256:fe4189e82fe9d20c4a5f03fc775fb91c168061c5176b4c95623caeef22316150\"},\n]\ngreenlet = [\n    {file = \"greenlet-1.1.2-cp27-cp27m-macosx_10_14_x86_64.whl\", hash = \"sha256:58df5c2a0e293bf665a51f8a100d3e9956febfbf1d9aaf8c0677cf70218910c6\"},\n    {file = \"greenlet-1.1.2-cp27-cp27m-manylinux1_x86_64.whl\", hash = \"sha256:aec52725173bd3a7b56fe91bc56eccb26fbdff1386ef123abb63c84c5b43b63a\"},\n    {file = \"greenlet-1.1.2-cp27-cp27m-manylinux2010_x86_64.whl\", hash = \"sha256:833e1551925ed51e6b44c800e71e77dacd7e49181fdc9ac9a0bf3714d515785d\"},\n    {file = \"greenlet-1.1.2-cp27-cp27m-win32.whl\", hash = \"sha256:aa5b467f15e78b82257319aebc78dd2915e4c1436c3c0d1ad6f53e47ba6e2713\"},\n    {file = \"greenlet-1.1.2-cp27-cp27m-win_amd64.whl\", hash = \"sha256:40b951f601af999a8bf2ce8c71e8aaa4e8c6f78ff8afae7b808aae2dc50d4c40\"},\n    {file = \"greenlet-1.1.2-cp27-cp27mu-manylinux1_x86_64.whl\", hash = \"sha256:95e69877983ea39b7303570fa6760f81a3eec23d0e3ab2021b7144b94d06202d\"},\n    {file = \"greenlet-1.1.2-cp27-cp27mu-manylinux2010_x86_64.whl\", hash = \"sha256:356b3576ad078c89a6107caa9c50cc14e98e3a6c4874a37c3e0273e4baf33de8\"},\n    {file = \"greenlet-1.1.2-cp310-cp310-macosx_10_14_x86_64.whl\", hash = \"sha256:8639cadfda96737427330a094476d4c7a56ac03de7265622fcf4cfe57c8ae18d\"},\n    {file = \"greenlet-1.1.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:97e5306482182170ade15c4b0d8386ded995a07d7cc2ca8f27958d34d6736497\"},\n    {file = \"greenlet-1.1.2-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:e6a36bb9474218c7a5b27ae476035497a6990e21d04c279884eb10d9b290f1b1\"},\n    {file = \"greenlet-1.1.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:abb7a75ed8b968f3061327c433a0fbd17b729947b400747c334a9c29a9af6c58\"},\n    {file = \"greenlet-1.1.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:b336501a05e13b616ef81ce329c0e09ac5ed8c732d9ba7e3e983fcc1a9e86965\"},\n    {file = \"greenlet-1.1.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:14d4f3cd4e8b524ae9b8aa567858beed70c392fdec26dbdb0a8a418392e71708\"},\n    {file = \"greenlet-1.1.2-cp35-cp35m-macosx_10_14_x86_64.whl\", hash = \"sha256:17ff94e7a83aa8671a25bf5b59326ec26da379ace2ebc4411d690d80a7fbcf23\"},\n    {file = \"greenlet-1.1.2-cp35-cp35m-manylinux1_x86_64.whl\", hash = \"sha256:9f3cba480d3deb69f6ee2c1825060177a22c7826431458c697df88e6aeb3caee\"},\n    {file = \"greenlet-1.1.2-cp35-cp35m-manylinux2010_x86_64.whl\", hash = \"sha256:fa877ca7f6b48054f847b61d6fa7bed5cebb663ebc55e018fda12db09dcc664c\"},\n    {file = \"greenlet-1.1.2-cp35-cp35m-win32.whl\", hash = \"sha256:7cbd7574ce8e138bda9df4efc6bf2ab8572c9aff640d8ecfece1b006b68da963\"},\n    {file = \"greenlet-1.1.2-cp35-cp35m-win_amd64.whl\", hash = \"sha256:903bbd302a2378f984aef528f76d4c9b1748f318fe1294961c072bdc7f2ffa3e\"},\n    {file = \"greenlet-1.1.2-cp36-cp36m-macosx_10_14_x86_64.whl\", hash = \"sha256:049fe7579230e44daef03a259faa24511d10ebfa44f69411d99e6a184fe68073\"},\n    {file = \"greenlet-1.1.2-cp36-cp36m-manylinux1_x86_64.whl\", hash = \"sha256:dd0b1e9e891f69e7675ba5c92e28b90eaa045f6ab134ffe70b52e948aa175b3c\"},\n    {file = \"greenlet-1.1.2-cp36-cp36m-manylinux2010_x86_64.whl\", hash = \"sha256:7418b6bfc7fe3331541b84bb2141c9baf1ec7132a7ecd9f375912eca810e714e\"},\n    {file = \"greenlet-1.1.2-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f9d29ca8a77117315101425ec7ec2a47a22ccf59f5593378fc4077ac5b754fce\"},\n    {file = \"greenlet-1.1.2-cp36-cp36m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:21915eb821a6b3d9d8eefdaf57d6c345b970ad722f856cd71739493ce003ad08\"},\n    {file = \"greenlet-1.1.2-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:eff9d20417ff9dcb0d25e2defc2574d10b491bf2e693b4e491914738b7908168\"},\n    {file = \"greenlet-1.1.2-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:b8c008de9d0daba7b6666aa5bbfdc23dcd78cafc33997c9b7741ff6353bafb7f\"},\n    {file = \"greenlet-1.1.2-cp36-cp36m-win32.whl\", hash = \"sha256:32ca72bbc673adbcfecb935bb3fb1b74e663d10a4b241aaa2f5a75fe1d1f90aa\"},\n    {file = \"greenlet-1.1.2-cp36-cp36m-win_amd64.whl\", hash = \"sha256:f0214eb2a23b85528310dad848ad2ac58e735612929c8072f6093f3585fd342d\"},\n    {file = \"greenlet-1.1.2-cp37-cp37m-macosx_10_14_x86_64.whl\", hash = \"sha256:b92e29e58bef6d9cfd340c72b04d74c4b4e9f70c9fa7c78b674d1fec18896dc4\"},\n    {file = \"greenlet-1.1.2-cp37-cp37m-manylinux1_x86_64.whl\", hash = \"sha256:fdcec0b8399108577ec290f55551d926d9a1fa6cad45882093a7a07ac5ec147b\"},\n    {file = \"greenlet-1.1.2-cp37-cp37m-manylinux2010_x86_64.whl\", hash = \"sha256:93f81b134a165cc17123626ab8da2e30c0455441d4ab5576eed73a64c025b25c\"},\n    {file = \"greenlet-1.1.2-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1e12bdc622676ce47ae9abbf455c189e442afdde8818d9da983085df6312e7a1\"},\n    {file = \"greenlet-1.1.2-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:8c790abda465726cfb8bb08bd4ca9a5d0a7bd77c7ac1ca1b839ad823b948ea28\"},\n    {file = \"greenlet-1.1.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f276df9830dba7a333544bd41070e8175762a7ac20350786b322b714b0e654f5\"},\n    {file = \"greenlet-1.1.2-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:8c5d5b35f789a030ebb95bff352f1d27a93d81069f2adb3182d99882e095cefe\"},\n    {file = \"greenlet-1.1.2-cp37-cp37m-win32.whl\", hash = \"sha256:64e6175c2e53195278d7388c454e0b30997573f3f4bd63697f88d855f7a6a1fc\"},\n    {file = \"greenlet-1.1.2-cp37-cp37m-win_amd64.whl\", hash = \"sha256:b11548073a2213d950c3f671aa88e6f83cda6e2fb97a8b6317b1b5b33d850e06\"},\n    {file = \"greenlet-1.1.2-cp38-cp38-macosx_10_14_x86_64.whl\", hash = \"sha256:9633b3034d3d901f0a46b7939f8c4d64427dfba6bbc5a36b1a67364cf148a1b0\"},\n    {file = \"greenlet-1.1.2-cp38-cp38-manylinux1_x86_64.whl\", hash = \"sha256:eb6ea6da4c787111adf40f697b4e58732ee0942b5d3bd8f435277643329ba627\"},\n    {file = \"greenlet-1.1.2-cp38-cp38-manylinux2010_x86_64.whl\", hash = \"sha256:f3acda1924472472ddd60c29e5b9db0cec629fbe3c5c5accb74d6d6d14773478\"},\n    {file = \"greenlet-1.1.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e859fcb4cbe93504ea18008d1df98dee4f7766db66c435e4882ab35cf70cac43\"},\n    {file = \"greenlet-1.1.2-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:00e44c8afdbe5467e4f7b5851be223be68adb4272f44696ee71fe46b7036a711\"},\n    {file = \"greenlet-1.1.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ec8c433b3ab0419100bd45b47c9c8551248a5aee30ca5e9d399a0b57ac04651b\"},\n    {file = \"greenlet-1.1.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:2bde6792f313f4e918caabc46532aa64aa27a0db05d75b20edfc5c6f46479de2\"},\n    {file = \"greenlet-1.1.2-cp38-cp38-win32.whl\", hash = \"sha256:288c6a76705dc54fba69fbcb59904ae4ad768b4c768839b8ca5fdadec6dd8cfd\"},\n    {file = \"greenlet-1.1.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:8d2f1fb53a421b410751887eb4ff21386d119ef9cde3797bf5e7ed49fb51a3b3\"},\n    {file = \"greenlet-1.1.2-cp39-cp39-macosx_10_14_x86_64.whl\", hash = \"sha256:166eac03e48784a6a6e0e5f041cfebb1ab400b394db188c48b3a84737f505b67\"},\n    {file = \"greenlet-1.1.2-cp39-cp39-manylinux1_x86_64.whl\", hash = \"sha256:572e1787d1460da79590bf44304abbc0a2da944ea64ec549188fa84d89bba7ab\"},\n    {file = \"greenlet-1.1.2-cp39-cp39-manylinux2010_x86_64.whl\", hash = \"sha256:be5f425ff1f5f4b3c1e33ad64ab994eed12fc284a6ea71c5243fd564502ecbe5\"},\n    {file = \"greenlet-1.1.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b1692f7d6bc45e3200844be0dba153612103db241691088626a33ff1f24a0d88\"},\n    {file = \"greenlet-1.1.2-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:7227b47e73dedaa513cdebb98469705ef0d66eb5a1250144468e9c3097d6b59b\"},\n    {file = \"greenlet-1.1.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7ff61ff178250f9bb3cd89752df0f1dd0e27316a8bd1465351652b1b4a4cdfd3\"},\n    {file = \"greenlet-1.1.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:0051c6f1f27cb756ffc0ffbac7d2cd48cb0362ac1736871399a739b2885134d3\"},\n    {file = \"greenlet-1.1.2-cp39-cp39-win32.whl\", hash = \"sha256:f70a9e237bb792c7cc7e44c531fd48f5897961701cdaa06cf22fc14965c496cf\"},\n    {file = \"greenlet-1.1.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:013d61294b6cd8fe3242932c1c5e36e5d1db2c8afb58606c5a67efce62c1f5fd\"},\n    {file = \"greenlet-1.1.2.tar.gz\", hash = \"sha256:e30f5ea4ae2346e62cedde8794a56858a67b878dd79f7df76a0767e356b1744a\"},\n]\ngrpcio = [\n    {file = \"grpcio-1.48.0-cp310-cp310-linux_armv7l.whl\", hash = \"sha256:4a049a032144641ed5d073535c0dc69eb6029187cc729a66946c86dcc8eec3a1\"},\n    {file = \"grpcio-1.48.0-cp310-cp310-macosx_10_10_x86_64.whl\", hash = \"sha256:f8bc76f5cd95f5476e5285fe5d3704a9332586a569fbbccef551b0b6f7a270f9\"},\n    {file = \"grpcio-1.48.0-cp310-cp310-manylinux_2_17_aarch64.whl\", hash = \"sha256:448d397fe88e9fef8170f019b86abdc4d554ae311aaf4dbff1532fde227d3308\"},\n    {file = \"grpcio-1.48.0-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:8f9b6b6f7c83869d2316c5d13f953381881a16741275a34ec5ed5762f11b206e\"},\n    {file = \"grpcio-1.48.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5bd8541c4b6b43c9024496d30b4a12346325d3a17a1f3c80ad8924caed1e35c3\"},\n    {file = \"grpcio-1.48.0-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:877d33aeba05ae0b9e81761a694914ed33613f655c35f6bbcf4ebbcb984e0167\"},\n    {file = \"grpcio-1.48.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:cd01a8201fd8ab2ce496f7e65975da1f1e629eac8eea84ead0fd77e32e4350cd\"},\n    {file = \"grpcio-1.48.0-cp310-cp310-win32.whl\", hash = \"sha256:0388da923dff58ba7f711233e41c2b749b5817b8e0f137a107672d9c15a1009c\"},\n    {file = \"grpcio-1.48.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:8dcffdb8921fd88857ae350fd579277a5f9315351e89ed9094ef28927a46d40d\"},\n    {file = \"grpcio-1.48.0-cp36-cp36m-linux_armv7l.whl\", hash = \"sha256:2138c50331232f56178c2b36dcfa6ad67aad705fe410955f3b2a53d722191b89\"},\n    {file = \"grpcio-1.48.0-cp36-cp36m-macosx_10_10_x86_64.whl\", hash = \"sha256:af2d80f142da2a6af45204a5ca2374e2747af07a99de54a1164111e169a761ff\"},\n    {file = \"grpcio-1.48.0-cp36-cp36m-manylinux_2_17_aarch64.whl\", hash = \"sha256:59284bd4cdf47c147c26d91aca693765318d524328f6ece2a1a0b85a12a362af\"},\n    {file = \"grpcio-1.48.0-cp36-cp36m-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cc3ebfe356c0c6750379cd194bf2b7e5d1d2f29db1832358f05a73e9290db98c\"},\n    {file = \"grpcio-1.48.0-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dc2619a31339e1c53731f54761f1a2cb865d3421f690e00ef3e92f90d2a0c5ae\"},\n    {file = \"grpcio-1.48.0-cp36-cp36m-musllinux_1_1_i686.whl\", hash = \"sha256:7df637405de328a54c1c8c08a3206f974c7a577730f90644af4c3400b7bfde2d\"},\n    {file = \"grpcio-1.48.0-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:9e73b95969a579798bfbeb85d376695cce5172357fb52e450467ceb8e7365152\"},\n    {file = \"grpcio-1.48.0-cp36-cp36m-win32.whl\", hash = \"sha256:059e9d58b5aba7fb9eabe3a4d2ac49e1dcbc2b54b0f166f6475e40b7f4435343\"},\n    {file = \"grpcio-1.48.0-cp36-cp36m-win_amd64.whl\", hash = \"sha256:7cebcf645170f0c82ef71769544f9ac4515993a4d367f5900aba2eb4ecd2a32f\"},\n    {file = \"grpcio-1.48.0-cp37-cp37m-linux_armv7l.whl\", hash = \"sha256:8af3a8845df35b838104d6fb1ae7f4969d248cf037fa2794916d31e917346f72\"},\n    {file = \"grpcio-1.48.0-cp37-cp37m-macosx_10_10_x86_64.whl\", hash = \"sha256:a1ef40975ec9ced6c17ce7fbec9825823da782fa606f0b92392646ff3886f198\"},\n    {file = \"grpcio-1.48.0-cp37-cp37m-manylinux_2_17_aarch64.whl\", hash = \"sha256:7cccbf6db31f2a78e1909047ff69620f94a4e6e53251858e9502fbbff5714b48\"},\n    {file = \"grpcio-1.48.0-cp37-cp37m-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1f3f142579f58def64c0850f0bb0eb1b425ae885f5669dda5b73ade64ad2b753\"},\n    {file = \"grpcio-1.48.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:656c6f6f7b815bca3054780b8cdfa1e4e37cd36c887a48558d00c2cf85f31697\"},\n    {file = \"grpcio-1.48.0-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:cba4538e8a2ef123ea570e7b1d62162e158963c2471e35d79eb9690c971a10c0\"},\n    {file = \"grpcio-1.48.0-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:9daa67820fafceec6194ed1686c1783816e62d6756ff301ba93e682948836846\"},\n    {file = \"grpcio-1.48.0-cp37-cp37m-win32.whl\", hash = \"sha256:7ec264a7fb413e0c804a7a48a6f7d7212742955a60724c44d793da35a8f30873\"},\n    {file = \"grpcio-1.48.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:a2b1b33b92359388b8164807313dcbb3317101b038a5d54342982560329d958f\"},\n    {file = \"grpcio-1.48.0-cp38-cp38-linux_armv7l.whl\", hash = \"sha256:7b820696a5ce7b98f459f234698cb323f89b355373789188efa126d7f47a2a92\"},\n    {file = \"grpcio-1.48.0-cp38-cp38-macosx_10_10_x86_64.whl\", hash = \"sha256:e4dfae66ebc165c46c5b7048eb554472ee72fbaab2c2c2da7f9b1621c81e077c\"},\n    {file = \"grpcio-1.48.0-cp38-cp38-manylinux_2_17_aarch64.whl\", hash = \"sha256:f7115038edce33b494e0138b0bd31a2eb6595d45e2eed23be46bc32886feb741\"},\n    {file = \"grpcio-1.48.0-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b4e996282238943ca114628255be61980e38b25f73a08ae2ffd02b63eaf70d3a\"},\n    {file = \"grpcio-1.48.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:13dad31f5155fa555d393511cc8108c41b1b5b54dc4c24c27d4694ddd7a78fad\"},\n    {file = \"grpcio-1.48.0-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:c84b9d90b2641963de98b35bb7a2a51f78119fe5bd00ef27246ba9f4f0835e36\"},\n    {file = \"grpcio-1.48.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:41b65166779d7dafac4c98380ac19f690f1c5fe18083a71d370df87b24dd30ff\"},\n    {file = \"grpcio-1.48.0-cp38-cp38-win32.whl\", hash = \"sha256:b890e5f5fbc21cb994894f73ecb2faaa66697d8debcb228a5adb0622b9bec3b2\"},\n    {file = \"grpcio-1.48.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:5fe3af539d2f50891ed93aed3064ffbcc38bf848aa3f7ed1fbedcce139c57302\"},\n    {file = \"grpcio-1.48.0-cp39-cp39-linux_armv7l.whl\", hash = \"sha256:a4ed57f4e3d91259551e6765782b22d9e8b8178fec43ebf8e1b2c392c4ced37b\"},\n    {file = \"grpcio-1.48.0-cp39-cp39-macosx_10_10_x86_64.whl\", hash = \"sha256:60843d8184e171886dd7a93d6672e2ef0b08dfd4f88da7421c10b46b6e031ac4\"},\n    {file = \"grpcio-1.48.0-cp39-cp39-manylinux_2_17_aarch64.whl\", hash = \"sha256:0ecba22f25ccde2442be7e7dd7fa746905d628f03312b4a0c9961f0d99771f53\"},\n    {file = \"grpcio-1.48.0-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:34f5917f0c49a04633dc12d483c8aee6f6d9f69133b700214d3703f72a72f501\"},\n    {file = \"grpcio-1.48.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f4c4ad8ad7e2cf3a272cbc96734d56635e6543939022f17e0c4487f7d2a45bf9\"},\n    {file = \"grpcio-1.48.0-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:111fb2f5f4a069f331ae23106145fd16dd4e1112ca223858a922068614dac6d2\"},\n    {file = \"grpcio-1.48.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:beb0573daa49889efcfea0a6e995b4f39d481aa1b94e1257617406ef417b56a6\"},\n    {file = \"grpcio-1.48.0-cp39-cp39-win32.whl\", hash = \"sha256:ce70254a082cb767217b2fdee374cc79199d338d46140753438cd6d67c609b2f\"},\n    {file = \"grpcio-1.48.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:ae3fd135666448058fe277d93c10e0f18345fbcbb015c4642de2fa3db6f0c205\"},\n    {file = \"grpcio-1.48.0.tar.gz\", hash = \"sha256:eaf4bb73819863440727195411ab3b5c304f6663625e66f348e91ebe0a039306\"},\n]\nh11 = [\n    {file = \"h11-0.12.0-py3-none-any.whl\", hash = \"sha256:36a3cb8c0a032f56e2da7084577878a035d3b61d104230d4bd49c0c6b555a9c6\"},\n    {file = \"h11-0.12.0.tar.gz\", hash = \"sha256:47222cb6067e4a307d535814917cd98fd0a57b6788ce715755fa2b6c28b56042\"},\n]\nhttpcore = [\n    {file = \"httpcore-0.15.0-py3-none-any.whl\", hash = \"sha256:1105b8b73c025f23ff7c36468e4432226cbb959176eab66864b8e31c4ee27fa6\"},\n    {file = \"httpcore-0.15.0.tar.gz\", hash = \"sha256:18b68ab86a3ccf3e7dc0f43598eaddcf472b602aba29f9aa6ab85fe2ada3980b\"},\n]\nhttptools = [\n    {file = \"httptools-0.4.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:fcddfe70553be717d9745990dfdb194e22ee0f60eb8f48c0794e7bfeda30d2d5\"},\n    {file = \"httptools-0.4.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:1ee0b459257e222b878a6c09ccf233957d3a4dcb883b0847640af98d2d9aac23\"},\n    {file = \"httptools-0.4.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ceafd5e960b39c7e0d160a1936b68eb87c5e79b3979d66e774f0c77d4d8faaed\"},\n    {file = \"httptools-0.4.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:fdb9f9ed79bc6f46b021b3319184699ba1a22410a82204e6e89c774530069683\"},\n    {file = \"httptools-0.4.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:abe829275cdd4174b4c4e65ad718715d449e308d59793bf3a931ee1bf7e7b86c\"},\n    {file = \"httptools-0.4.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:7af6bdbd21a2a25d6784f6d67f44f5df33ef39b6159543b9f9064d365c01f919\"},\n    {file = \"httptools-0.4.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:5d1fe6b6661022fd6cac541f54a4237496b246e6f1c0a6b41998ee08a1135afe\"},\n    {file = \"httptools-0.4.0-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:48e48530d9b995a84d1d89ae6b3ec4e59ea7d494b150ac3bbc5e2ac4acce92cd\"},\n    {file = \"httptools-0.4.0-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a113789e53ac1fa26edf99856a61e4c493868e125ae0dd6354cf518948fbbd5c\"},\n    {file = \"httptools-0.4.0-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:8e2eb957787cbb614a0f006bfc5798ff1d90ac7c4dd24854c84edbdc8c02369e\"},\n    {file = \"httptools-0.4.0-cp36-cp36m-musllinux_1_1_aarch64.whl\", hash = \"sha256:7ee9f226acab9085037582c059d66769862706e8e8cd2340470ceb8b3850873d\"},\n    {file = \"httptools-0.4.0-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:701e66b59dd21a32a274771238025d58db7e2b6ecebbab64ceff51b8e31527ae\"},\n    {file = \"httptools-0.4.0-cp36-cp36m-win_amd64.whl\", hash = \"sha256:6a1a7dfc1f9c78a833e2c4904757a0f47ce25d08634dd2a52af394eefe5f9777\"},\n    {file = \"httptools-0.4.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:903f739c9fb78dab8970b0f3ea51f21955b24b45afa77b22ff0e172fc11ef111\"},\n    {file = \"httptools-0.4.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:54bbd295f031b866b9799dd39cb45deee81aca036c9bff9f58ca06726f6494f1\"},\n    {file = \"httptools-0.4.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:3194f6d6443befa8d4db16c1946b2fc428a3ceb8ab32eb6f09a59f86104dc1a0\"},\n    {file = \"httptools-0.4.0-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:cd1295f52971097f757edfbfce827b6dbbfb0f7a74901ee7d4933dff5ad4c9af\"},\n    {file = \"httptools-0.4.0-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:20a45bcf22452a10fa8d58b7dbdb474381f6946bf5b8933e3662d572bc61bae4\"},\n    {file = \"httptools-0.4.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:d1f27bb0f75bef722d6e22dc609612bfa2f994541621cd2163f8c943b6463dfe\"},\n    {file = \"httptools-0.4.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:7f7bfb74718f52d5ed47d608d507bf66d3bc01d4a8b3e6dd7134daaae129357b\"},\n    {file = \"httptools-0.4.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:a522d12e2ddbc2e91842ffb454a1aeb0d47607972c7d8fc88bd0838d97fb8a2a\"},\n    {file = \"httptools-0.4.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2db44a0b294d317199e9f80123e72c6b005c55b625b57fae36de68670090fa48\"},\n    {file = \"httptools-0.4.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:c286985b5e194ca0ebb2908d71464b9be8f17cc66d6d3e330e8d5407248f56ad\"},\n    {file = \"httptools-0.4.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:d3a4e165ca6204f34856b765d515d558dc84f1352033b8721e8d06c3e44930c3\"},\n    {file = \"httptools-0.4.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:72aa3fbe636b16d22e04b5a9d24711b043495e0ecfe58080addf23a1a37f3409\"},\n    {file = \"httptools-0.4.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:9967d9758df505975913304c434cb9ab21e2c609ad859eb921f2f615a038c8de\"},\n    {file = \"httptools-0.4.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:f72b5d24d6730035128b238decdc4c0f2104b7056a7ca55cf047c106842ec890\"},\n    {file = \"httptools-0.4.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:29bf97a5c532da9c7a04de2c7a9c31d1d54f3abd65a464119b680206bbbb1055\"},\n    {file = \"httptools-0.4.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:98993805f1e3cdb53de4eed02b55dcc953cdf017ba7bbb2fd89226c086a6d855\"},\n    {file = \"httptools-0.4.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:d9b90bf58f3ba04e60321a23a8723a1ff2a9377502535e70495e5ada8e6e6722\"},\n    {file = \"httptools-0.4.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:1a99346ebcb801b213c591540837340bdf6fd060a8687518d01c607d338b7424\"},\n    {file = \"httptools-0.4.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:645373c070080e632480a3d251d892cb795be3d3a15f86975d0f1aca56fd230d\"},\n    {file = \"httptools-0.4.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:34d2903dd2a3dd85d33705b6fde40bf91fc44411661283763fd0746723963c83\"},\n    {file = \"httptools-0.4.0.tar.gz\", hash = \"sha256:2c9a930c378b3d15d6b695fb95ebcff81a7395b4f9775c4f10a076beb0b2c1ff\"},\n]\nhttpx = [\n    {file = \"httpx-0.23.0-py3-none-any.whl\", hash = \"sha256:42974f577483e1e932c3cdc3cd2303e883cbfba17fe228b0f63589764d7b9c4b\"},\n    {file = \"httpx-0.23.0.tar.gz\", hash = \"sha256:f28eac771ec9eb4866d3fb4ab65abd42d38c424739e80c08d8d20570de60b0ef\"},\n]\nidna = [\n    {file = \"idna-3.3-py3-none-any.whl\", hash = \"sha256:84d9dd047ffa80596e0f246e2eab0b391788b0503584e8945f2368256d2735ff\"},\n    {file = \"idna-3.3.tar.gz\", hash = \"sha256:9d643ff0a55b762d5cdb124b8eaa99c66322e2157b69160bc32796e824360e6d\"},\n]\nimagehash = [\n    {file = \"ImageHash-4.2.1.tar.gz\", hash = \"sha256:a4af957814bc9832d9241247ff03f76e778f890c18147900b4540af124e93011\"},\n]\njieba = [\n    {file = \"jieba-0.42.1.tar.gz\", hash = \"sha256:055ca12f62674fafed09427f176506079bc135638a14e23e25be909131928db2\"},\n]\nkiwisolver = [\n    {file = \"kiwisolver-1.4.4-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:2f5e60fabb7343a836360c4f0919b8cd0d6dbf08ad2ca6b9cf90bf0c76a3c4f6\"},\n    {file = \"kiwisolver-1.4.4-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:10ee06759482c78bdb864f4109886dff7b8a56529bc1609d4f1112b93fe6423c\"},\n    {file = \"kiwisolver-1.4.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:c79ebe8f3676a4c6630fd3f777f3cfecf9289666c84e775a67d1d358578dc2e3\"},\n    {file = \"kiwisolver-1.4.4-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:abbe9fa13da955feb8202e215c4018f4bb57469b1b78c7a4c5c7b93001699938\"},\n    {file = \"kiwisolver-1.4.4-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:7577c1987baa3adc4b3c62c33bd1118c3ef5c8ddef36f0f2c950ae0b199e100d\"},\n    {file = \"kiwisolver-1.4.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f8ad8285b01b0d4695102546b342b493b3ccc6781fc28c8c6a1bb63e95d22f09\"},\n    {file = \"kiwisolver-1.4.4-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:8ed58b8acf29798b036d347791141767ccf65eee7f26bde03a71c944449e53de\"},\n    {file = \"kiwisolver-1.4.4-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:a68b62a02953b9841730db7797422f983935aeefceb1679f0fc85cbfbd311c32\"},\n    {file = \"kiwisolver-1.4.4-cp310-cp310-win32.whl\", hash = \"sha256:e92a513161077b53447160b9bd8f522edfbed4bd9759e4c18ab05d7ef7e49408\"},\n    {file = \"kiwisolver-1.4.4-cp310-cp310-win_amd64.whl\", hash = \"sha256:3fe20f63c9ecee44560d0e7f116b3a747a5d7203376abeea292ab3152334d004\"},\n    {file = \"kiwisolver-1.4.4-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:62ac9cc684da4cf1778d07a89bf5f81b35834cb96ca523d3a7fb32509380cbf6\"},\n    {file = \"kiwisolver-1.4.4-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:41dae968a94b1ef1897cb322b39360a0812661dba7c682aa45098eb8e193dbdf\"},\n    {file = \"kiwisolver-1.4.4-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:02f79693ec433cb4b5f51694e8477ae83b3205768a6fb48ffba60549080e295b\"},\n    {file = \"kiwisolver-1.4.4-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d0611a0a2a518464c05ddd5a3a1a0e856ccc10e67079bb17f265ad19ab3c7597\"},\n    {file = \"kiwisolver-1.4.4-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:db5283d90da4174865d520e7366801a93777201e91e79bacbac6e6927cbceede\"},\n    {file = \"kiwisolver-1.4.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:1041feb4cda8708ce73bb4dcb9ce1ccf49d553bf87c3954bdfa46f0c3f77252c\"},\n    {file = \"kiwisolver-1.4.4-cp37-cp37m-win32.whl\", hash = \"sha256:a553dadda40fef6bfa1456dc4be49b113aa92c2a9a9e8711e955618cd69622e3\"},\n    {file = \"kiwisolver-1.4.4-cp37-cp37m-win_amd64.whl\", hash = \"sha256:03baab2d6b4a54ddbb43bba1a3a2d1627e82d205c5cf8f4c924dc49284b87166\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:841293b17ad704d70c578f1f0013c890e219952169ce8a24ebc063eecf775454\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:f4f270de01dd3e129a72efad823da90cc4d6aafb64c410c9033aba70db9f1ff0\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:f9f39e2f049db33a908319cf46624a569b36983c7c78318e9726a4cb8923b26c\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c97528e64cb9ebeff9701e7938653a9951922f2a38bd847787d4a8e498cc83ae\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:1d1573129aa0fd901076e2bfb4275a35f5b7aa60fbfb984499d661ec950320b0\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:ad881edc7ccb9d65b0224f4e4d05a1e85cf62d73aab798943df6d48ab0cd79a1\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:b428ef021242344340460fa4c9185d0b1f66fbdbfecc6c63eff4b7c29fad429d\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:2e407cb4bd5a13984a6c2c0fe1845e4e41e96f183e5e5cd4d77a857d9693494c\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-win32.whl\", hash = \"sha256:75facbe9606748f43428fc91a43edb46c7ff68889b91fa31f53b58894503a191\"},\n    {file = \"kiwisolver-1.4.4-cp38-cp38-win_amd64.whl\", hash = \"sha256:5bce61af018b0cb2055e0e72e7d65290d822d3feee430b7b8203d8a855e78766\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:8c808594c88a025d4e322d5bb549282c93c8e1ba71b790f539567932722d7bd8\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:f0a71d85ecdd570ded8ac3d1c0f480842f49a40beb423bb8014539a9f32a5897\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:b533558eae785e33e8c148a8d9921692a9fe5aa516efbdff8606e7d87b9d5824\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:efda5fc8cc1c61e4f639b8067d118e742b812c930f708e6667a5ce0d13499e29\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:7c43e1e1206cd421cd92e6b3280d4385d41d7166b3ed577ac20444b6995a445f\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bc8d3bd6c72b2dd9decf16ce70e20abcb3274ba01b4e1c96031e0c4067d1e7cd\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:4ea39b0ccc4f5d803e3337dd46bcce60b702be4d86fd0b3d7531ef10fd99a1ac\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:968f44fdbf6dd757d12920d63b566eeb4d5b395fd2d00d29d7ef00a00582aac9\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-win32.whl\", hash = \"sha256:da7e547706e69e45d95e116e6939488d62174e033b763ab1496b4c29b76fabea\"},\n    {file = \"kiwisolver-1.4.4-cp39-cp39-win_amd64.whl\", hash = \"sha256:ba59c92039ec0a66103b1d5fe588fa546373587a7d68f5c96f743c3396afc04b\"},\n    {file = \"kiwisolver-1.4.4-pp37-pypy37_pp73-manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:91672bacaa030f92fc2f43b620d7b337fd9a5af28b0d6ed3f77afc43c4a64b5a\"},\n    {file = \"kiwisolver-1.4.4-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:787518a6789009c159453da4d6b683f468ef7a65bbde796bcea803ccf191058d\"},\n    {file = \"kiwisolver-1.4.4-pp37-pypy37_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:da152d8cdcab0e56e4f45eb08b9aea6455845ec83172092f09b0e077ece2cf7a\"},\n    {file = \"kiwisolver-1.4.4-pp37-pypy37_pp73-win_amd64.whl\", hash = \"sha256:ecb1fa0db7bf4cff9dac752abb19505a233c7f16684c5826d1f11ebd9472b871\"},\n    {file = \"kiwisolver-1.4.4.tar.gz\", hash = \"sha256:d41997519fcba4a1e46eb4a2fe31bc12f0ff957b2b81bac28db24744f333e955\"},\n]\nloguru = [\n    {file = \"loguru-0.6.0-py3-none-any.whl\", hash = \"sha256:4e2414d534a2ab57573365b3e6d0234dfb1d84b68b7f3b948e6fb743860a77c3\"},\n    {file = \"loguru-0.6.0.tar.gz\", hash = \"sha256:066bd06758d0a513e9836fd9c6b5a75bfb3fd36841f4b996bc60b547a309d41c\"},\n]\nlxml = [\n    {file = \"lxml-4.6.5-cp27-cp27m-macosx_10_14_x86_64.whl\", hash = \"sha256:abcf7daa5ebcc89328326254f6dd6d566adb483d4d00178892afd386ab389de2\"},\n    {file = \"lxml-4.6.5-cp27-cp27m-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:3884476a90d415be79adfa4e0e393048630d0d5bcd5757c4c07d8b4b00a1096b\"},\n    {file = \"lxml-4.6.5-cp27-cp27m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:add017c5bd6b9ec3a5f09248396b6ee2ce61c5621f087eb2269c813cd8813808\"},\n    {file = \"lxml-4.6.5-cp27-cp27m-win32.whl\", hash = \"sha256:a702005e447d712375433ed0499cb6e1503fadd6c96a47f51d707b4d37b76d3c\"},\n    {file = \"lxml-4.6.5-cp27-cp27m-win_amd64.whl\", hash = \"sha256:da07c7e7fc9a3f40446b78c54dbba8bfd5c9100dfecb21b65bfe3f57844f5e71\"},\n    {file = \"lxml-4.6.5-cp27-cp27mu-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:a708c291900c40a7ecf23f1d2384ed0bc0604e24094dd13417c7e7f8f7a50d93\"},\n    {file = \"lxml-4.6.5-cp27-cp27mu-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:f33d8efb42e4fc2b31b3b4527940b25cdebb3026fb56a80c1c1c11a4271d2352\"},\n    {file = \"lxml-4.6.5-cp310-cp310-macosx_10_14_x86_64.whl\", hash = \"sha256:f6befb83bca720b71d6bd6326a3b26e9496ae6649e26585de024890fe50f49b8\"},\n    {file = \"lxml-4.6.5-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_24_i686.whl\", hash = \"sha256:59d77bfa3bea13caee95bc0d3f1c518b15049b97dd61ea8b3d71ce677a67f808\"},\n    {file = \"lxml-4.6.5-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_24_aarch64.whl\", hash = \"sha256:68a851176c931e2b3de6214347b767451243eeed3bea34c172127bbb5bf6c210\"},\n    {file = \"lxml-4.6.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:a7790a273225b0c46e5f859c1327f0f659896cc72eaa537d23aa3ad9ff2a1cc1\"},\n    {file = \"lxml-4.6.5-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:6548fc551de15f310dd0564751d9dc3d405278d45ea9b2b369ed1eccf142e1f5\"},\n    {file = \"lxml-4.6.5-cp310-cp310-win32.whl\", hash = \"sha256:dc8a0dbb2a10ae8bb609584f5c504789f0f3d0d81840da4849102ec84289f952\"},\n    {file = \"lxml-4.6.5-cp310-cp310-win_amd64.whl\", hash = \"sha256:1ccbfe5d17835db906f2bab6f15b34194db1a5b07929cba3cf45a96dbfbfefc0\"},\n    {file = \"lxml-4.6.5-cp35-cp35m-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:ca9a40497f7e97a2a961c04fa8a6f23d790b0521350a8b455759d786b0bcb203\"},\n    {file = \"lxml-4.6.5-cp35-cp35m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:e5b4b0d9440046ead3bd425eb2b852499241ee0cef1ae151038e4f87ede888c4\"},\n    {file = \"lxml-4.6.5-cp35-cp35m-win32.whl\", hash = \"sha256:87f8f7df70b90fbe7b49969f07b347e3f978f8bd1046bb8ecae659921869202b\"},\n    {file = \"lxml-4.6.5-cp35-cp35m-win_amd64.whl\", hash = \"sha256:ce52aad32ec6e46d1a91ff8b8014a91538800dd533914bfc4a82f5018d971408\"},\n    {file = \"lxml-4.6.5-cp36-cp36m-macosx_10_14_x86_64.whl\", hash = \"sha256:8021eeff7fabde21b9858ed058a8250ad230cede91764d598c2466b0ba70db8b\"},\n    {file = \"lxml-4.6.5-cp36-cp36m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_24_i686.whl\", hash = \"sha256:cab343b265e38d4e00649cbbad9278b734c5715f9bcbb72c85a1f99b1a58e19a\"},\n    {file = \"lxml-4.6.5-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:3534d7c468c044f6aef3c0aff541db2826986a29ea73f2ca831f5d5284d9b570\"},\n    {file = \"lxml-4.6.5-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:bdb98f4c9e8a1735efddfaa995b0c96559792da15d56b76428bdfc29f77c4cdb\"},\n    {file = \"lxml-4.6.5-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:5ea121cb66d7e5cb396b4c3ca90471252b94e01809805cfe3e4e44be2db3a99c\"},\n    {file = \"lxml-4.6.5-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:121fc6f71c692b49af6c963b84ab7084402624ffbe605287da362f8af0668ea3\"},\n    {file = \"lxml-4.6.5-cp36-cp36m-win32.whl\", hash = \"sha256:1a2a7659b8eb93c6daee350a0d844994d49245a0f6c05c747f619386fb90ba04\"},\n    {file = \"lxml-4.6.5-cp36-cp36m-win_amd64.whl\", hash = \"sha256:2f77556266a8fe5428b8759fbfc4bd70be1d1d9c9b25d2a414f6a0c0b0f09120\"},\n    {file = \"lxml-4.6.5-cp37-cp37m-macosx_10_14_x86_64.whl\", hash = \"sha256:558485218ee06458643b929765ac1eb04519ca3d1e2dcc288517de864c747c33\"},\n    {file = \"lxml-4.6.5-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_24_i686.whl\", hash = \"sha256:ba0006799f21d83c3717fe20e2707a10bbc296475155aadf4f5850f6659b96b9\"},\n    {file = \"lxml-4.6.5-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_24_aarch64.whl\", hash = \"sha256:916d457ad84e05b7db52700bad0a15c56e0c3000dcaf1263b2fb7a56fe148996\"},\n    {file = \"lxml-4.6.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:c580c2a61d8297a6e47f4d01f066517dbb019be98032880d19ece7f337a9401d\"},\n    {file = \"lxml-4.6.5-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:a21b78af7e2e13bec6bea12fc33bc05730197674f3e5402ce214d07026ccfebd\"},\n    {file = \"lxml-4.6.5-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:46515773570a33eae13e451c8fcf440222ef24bd3b26f40774dd0bd8b6db15b2\"},\n    {file = \"lxml-4.6.5-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:124f09614f999551ac65e5b9875981ce4b66ac4b8e2ba9284572f741935df3d9\"},\n    {file = \"lxml-4.6.5-cp37-cp37m-win32.whl\", hash = \"sha256:b4015baed99d046c760f09a4c59d234d8f398a454380c3cf0b859aba97136090\"},\n    {file = \"lxml-4.6.5-cp37-cp37m-win_amd64.whl\", hash = \"sha256:12ae2339d32a2b15010972e1e2467345b7bf962e155671239fba74c229564b7f\"},\n    {file = \"lxml-4.6.5-cp38-cp38-macosx_10_14_x86_64.whl\", hash = \"sha256:76b6c296e4f7a1a8a128aec42d128646897f9ae9a700ef6839cdc9b3900db9b5\"},\n    {file = \"lxml-4.6.5-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_24_i686.whl\", hash = \"sha256:534032a5ceb34bba1da193b7d386ac575127cc39338379f39a164b10d97ade89\"},\n    {file = \"lxml-4.6.5-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_24_aarch64.whl\", hash = \"sha256:60aeb14ff9022d2687ef98ce55f6342944c40d00916452bb90899a191802137a\"},\n    {file = \"lxml-4.6.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:9801bcd52ac9c795a7d81ea67471a42cffe532e46cfb750cd5713befc5c019c0\"},\n    {file = \"lxml-4.6.5-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:3b95fb7e6f9c2f53db88f4642231fc2b8907d854e614710996a96f1f32018d5c\"},\n    {file = \"lxml-4.6.5-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:642eb4cabd997c9b949a994f9643cd8ae00cf4ca8c5cd9c273962296fadf1c44\"},\n    {file = \"lxml-4.6.5-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:af4139172ff0263d269abdcc641e944c9de4b5d660894a3ec7e9f9db63b56ac9\"},\n    {file = \"lxml-4.6.5-cp38-cp38-win32.whl\", hash = \"sha256:57cf05466917e08f90e323f025b96f493f92c0344694f5702579ab4b7e2eb10d\"},\n    {file = \"lxml-4.6.5-cp38-cp38-win_amd64.whl\", hash = \"sha256:4f415624cf8b065796649a5e4621773dc5c9ea574a944c76a7f8a6d3d2906b41\"},\n    {file = \"lxml-4.6.5-cp39-cp39-macosx_10_14_x86_64.whl\", hash = \"sha256:7679bb6e4d9a3978a46ab19a3560e8d2b7265ef3c88152e7fdc130d649789887\"},\n    {file = \"lxml-4.6.5-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_24_i686.whl\", hash = \"sha256:c34234a1bc9e466c104372af74d11a9f98338a3f72fae22b80485171a64e0144\"},\n    {file = \"lxml-4.6.5-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_24_aarch64.whl\", hash = \"sha256:4b9390bf973e3907d967b75be199cf1978ca8443183cf1e78ad80ad8be9cf242\"},\n    {file = \"lxml-4.6.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:fcc849b28f584ed1dbf277291ded5c32bb3476a37032df4a1d523b55faa5f944\"},\n    {file = \"lxml-4.6.5-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:46f21f2600d001af10e847df9eb3b832e8a439f696c04891bcb8a8cedd859af9\"},\n    {file = \"lxml-4.6.5-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:99cf827f5a783038eb313beee6533dddb8bdb086d7269c5c144c1c952d142ace\"},\n    {file = \"lxml-4.6.5-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:925174cafb0f1179a7fd38da90302555d7445e34c9ece68019e53c946be7f542\"},\n    {file = \"lxml-4.6.5-cp39-cp39-win32.whl\", hash = \"sha256:12d8d6fe3ddef629ac1349fa89a638b296a34b6529573f5055d1cb4e5245f73b\"},\n    {file = \"lxml-4.6.5-cp39-cp39-win_amd64.whl\", hash = \"sha256:a52e8f317336a44836475e9c802f51c2dc38d612eaa76532cb1d17690338b63b\"},\n    {file = \"lxml-4.6.5-pp37-pypy37_pp73-macosx_10_14_x86_64.whl\", hash = \"sha256:11ae552a78612620afd15625be9f1b82e3cc2e634f90d6b11709b10a100cba59\"},\n    {file = \"lxml-4.6.5-pp37-pypy37_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_24_i686.whl\", hash = \"sha256:473701599665d874919d05bb33b56180447b3a9da8d52d6d9799f381ce23f95c\"},\n    {file = \"lxml-4.6.5-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:7f00cc64b49d2ef19ddae898a3def9dd8fda9c3d27c8a174c2889ee757918e71\"},\n    {file = \"lxml-4.6.5-pp38-pypy38_pp73-macosx_10_14_x86_64.whl\", hash = \"sha256:73e8614258404b2689a26cb5d002512b8bc4dfa18aca86382f68f959aee9b0c8\"},\n    {file = \"lxml-4.6.5-pp38-pypy38_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_24_i686.whl\", hash = \"sha256:ff44de36772b05c2eb74f2b4b6d1ae29b8f41ed5506310ce1258d44826ee38c1\"},\n    {file = \"lxml-4.6.5-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:5d5254c815c186744c8f922e2ce861a2bdeabc06520b4b30b2f7d9767791ce6e\"},\n    {file = \"lxml-4.6.5.tar.gz\", hash = \"sha256:6e84edecc3a82f90d44ddee2ee2a2630d4994b8471816e226d2b771cda7ac4ca\"},\n]\nmatplotlib = [\n    {file = \"matplotlib-3.5.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:03bbb3f5f78836855e127b5dab228d99551ad0642918ccbf3067fcd52ac7ac5e\"},\n    {file = \"matplotlib-3.5.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:49a5938ed6ef9dda560f26ea930a2baae11ea99e1c2080c8714341ecfda72a89\"},\n    {file = \"matplotlib-3.5.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:77157be0fc4469cbfb901270c205e7d8adb3607af23cef8bd11419600647ceed\"},\n    {file = \"matplotlib-3.5.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5844cea45d804174bf0fac219b4ab50774e504bef477fc10f8f730ce2d623441\"},\n    {file = \"matplotlib-3.5.2-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c87973ddec10812bddc6c286b88fdd654a666080fbe846a1f7a3b4ba7b11ab78\"},\n    {file = \"matplotlib-3.5.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4a05f2b37222319753a5d43c0a4fd97ed4ff15ab502113e3f2625c26728040cf\"},\n    {file = \"matplotlib-3.5.2-cp310-cp310-win32.whl\", hash = \"sha256:9776e1a10636ee5f06ca8efe0122c6de57ffe7e8c843e0fb6e001e9d9256ec95\"},\n    {file = \"matplotlib-3.5.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:b4fedaa5a9aa9ce14001541812849ed1713112651295fdddd640ea6620e6cf98\"},\n    {file = \"matplotlib-3.5.2-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:ee175a571e692fc8ae8e41ac353c0e07259113f4cb063b0ec769eff9717e84bb\"},\n    {file = \"matplotlib-3.5.2-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2e8bda1088b941ead50caabd682601bece983cadb2283cafff56e8fcddbf7d7f\"},\n    {file = \"matplotlib-3.5.2-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:9480842d5aadb6e754f0b8f4ebeb73065ac8be1855baa93cd082e46e770591e9\"},\n    {file = \"matplotlib-3.5.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:6c623b355d605a81c661546af7f24414165a8a2022cddbe7380a31a4170fa2e9\"},\n    {file = \"matplotlib-3.5.2-cp37-cp37m-win32.whl\", hash = \"sha256:a91426ae910819383d337ba0dc7971c7cefdaa38599868476d94389a329e599b\"},\n    {file = \"matplotlib-3.5.2-cp37-cp37m-win_amd64.whl\", hash = \"sha256:c4b82c2ae6d305fcbeb0eb9c93df2602ebd2f174f6e8c8a5d92f9445baa0c1d3\"},\n    {file = \"matplotlib-3.5.2-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:ebc27ad11df3c1661f4677a7762e57a8a91dd41b466c3605e90717c9a5f90c82\"},\n    {file = \"matplotlib-3.5.2-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:5a32ea6e12e80dedaca2d4795d9ed40f97bfa56e6011e14f31502fdd528b9c89\"},\n    {file = \"matplotlib-3.5.2-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:2a0967d4156adbd0d46db06bc1a877f0370bce28d10206a5071f9ecd6dc60b79\"},\n    {file = \"matplotlib-3.5.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e2b696699386766ef171a259d72b203a3c75d99d03ec383b97fc2054f52e15cf\"},\n    {file = \"matplotlib-3.5.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:7f409716119fa39b03da3d9602bd9b41142fab7a0568758cd136cd80b1bf36c8\"},\n    {file = \"matplotlib-3.5.2-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:b8d3f4e71e26307e8c120b72c16671d70c5cd08ae412355c11254aa8254fb87f\"},\n    {file = \"matplotlib-3.5.2-cp38-cp38-win32.whl\", hash = \"sha256:b6c63cd01cad0ea8704f1fd586e9dc5777ccedcd42f63cbbaa3eae8dd41172a1\"},\n    {file = \"matplotlib-3.5.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:75c406c527a3aa07638689586343f4b344fcc7ab1f79c396699eb550cd2b91f7\"},\n    {file = \"matplotlib-3.5.2-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:4a44cdfdb9d1b2f18b1e7d315eb3843abb097869cd1ef89cfce6a488cd1b5182\"},\n    {file = \"matplotlib-3.5.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:3d8e129af95b156b41cb3be0d9a7512cc6d73e2b2109f82108f566dbabdbf377\"},\n    {file = \"matplotlib-3.5.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:364e6bca34edc10a96aa3b1d7cd76eb2eea19a4097198c1b19e89bee47ed5781\"},\n    {file = \"matplotlib-3.5.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ea75df8e567743207e2b479ba3d8843537be1c146d4b1e3e395319a4e1a77fe9\"},\n    {file = \"matplotlib-3.5.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:44c6436868186564450df8fd2fc20ed9daaef5caad699aa04069e87099f9b5a8\"},\n    {file = \"matplotlib-3.5.2-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:7d7705022df2c42bb02937a2a824f4ec3cca915700dd80dc23916af47ff05f1a\"},\n    {file = \"matplotlib-3.5.2-cp39-cp39-win32.whl\", hash = \"sha256:ee0b8e586ac07f83bb2950717e66cb305e2859baf6f00a9c39cc576e0ce9629c\"},\n    {file = \"matplotlib-3.5.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:c772264631e5ae61f0bd41313bbe48e1b9bcc95b974033e1118c9caa1a84d5c6\"},\n    {file = \"matplotlib-3.5.2-pp37-pypy37_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:751d3815b555dcd6187ad35b21736dc12ce6925fc3fa363bbc6dc0f86f16484f\"},\n    {file = \"matplotlib-3.5.2-pp37-pypy37_pp73-manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:31fbc2af27ebb820763f077ec7adc79b5a031c2f3f7af446bd7909674cd59460\"},\n    {file = \"matplotlib-3.5.2-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:4fa28ca76ac5c2b2d54bc058b3dad8e22ee85d26d1ee1b116a6fd4d2277b6a04\"},\n    {file = \"matplotlib-3.5.2-pp37-pypy37_pp73-win_amd64.whl\", hash = \"sha256:24173c23d1bcbaed5bf47b8785d27933a1ac26a5d772200a0f3e0e38f471b001\"},\n    {file = \"matplotlib-3.5.2.tar.gz\", hash = \"sha256:48cf850ce14fa18067f2d9e0d646763681948487a8080ec0af2686468b4607a2\"},\n]\nmsgpack = [\n    {file = \"msgpack-1.0.4-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:4ab251d229d10498e9a2f3b1e68ef64cb393394ec477e3370c457f9430ce9250\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:112b0f93202d7c0fef0b7810d465fde23c746a2d482e1e2de2aafd2ce1492c88\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:002b5c72b6cd9b4bafd790f364b8480e859b4712e91f43014fe01e4f957b8467\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:35bc0faa494b0f1d851fd29129b2575b2e26d41d177caacd4206d81502d4c6a6\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4733359808c56d5d7756628736061c432ded018e7a1dff2d35a02439043321aa\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:eb514ad14edf07a1dbe63761fd30f89ae79b42625731e1ccf5e1f1092950eaa6\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:c23080fdeec4716aede32b4e0ef7e213c7b1093eede9ee010949f2a418ced6ba\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:49565b0e3d7896d9ea71d9095df15b7f75a035c49be733051c34762ca95bbf7e\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:aca0f1644d6b5a73eb3e74d4d64d5d8c6c3d577e753a04c9e9c87d07692c58db\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-win32.whl\", hash = \"sha256:0dfe3947db5fb9ce52aaea6ca28112a170db9eae75adf9339a1aec434dc954ef\"},\n    {file = \"msgpack-1.0.4-cp310-cp310-win_amd64.whl\", hash = \"sha256:4dea20515f660aa6b7e964433b1808d098dcfcabbebeaaad240d11f909298075\"},\n    {file = \"msgpack-1.0.4-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:e83f80a7fec1a62cf4e6c9a660e39c7f878f603737a0cdac8c13131d11d97f52\"},\n    {file = \"msgpack-1.0.4-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3c11a48cf5e59026ad7cb0dc29e29a01b5a66a3e333dc11c04f7e991fc5510a9\"},\n    {file = \"msgpack-1.0.4-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1276e8f34e139aeff1c77a3cefb295598b504ac5314d32c8c3d54d24fadb94c9\"},\n    {file = \"msgpack-1.0.4-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:6c9566f2c39ccced0a38d37c26cc3570983b97833c365a6044edef3574a00c08\"},\n    {file = \"msgpack-1.0.4-cp36-cp36m-musllinux_1_1_aarch64.whl\", hash = \"sha256:fcb8a47f43acc113e24e910399376f7277cf8508b27e5b88499f053de6b115a8\"},\n    {file = \"msgpack-1.0.4-cp36-cp36m-musllinux_1_1_i686.whl\", hash = \"sha256:76ee788122de3a68a02ed6f3a16bbcd97bc7c2e39bd4d94be2f1821e7c4a64e6\"},\n    {file = \"msgpack-1.0.4-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:0a68d3ac0104e2d3510de90a1091720157c319ceeb90d74f7b5295a6bee51bae\"},\n    {file = \"msgpack-1.0.4-cp36-cp36m-win32.whl\", hash = \"sha256:85f279d88d8e833ec015650fd15ae5eddce0791e1e8a59165318f371158efec6\"},\n    {file = \"msgpack-1.0.4-cp36-cp36m-win_amd64.whl\", hash = \"sha256:c1683841cd4fa45ac427c18854c3ec3cd9b681694caf5bff04edb9387602d661\"},\n    {file = \"msgpack-1.0.4-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:a75dfb03f8b06f4ab093dafe3ddcc2d633259e6c3f74bb1b01996f5d8aa5868c\"},\n    {file = \"msgpack-1.0.4-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:9667bdfdf523c40d2511f0e98a6c9d3603be6b371ae9a238b7ef2dc4e7a427b0\"},\n    {file = \"msgpack-1.0.4-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:11184bc7e56fd74c00ead4f9cc9a3091d62ecb96e97653add7a879a14b003227\"},\n    {file = \"msgpack-1.0.4-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ac5bd7901487c4a1dd51a8c58f2632b15d838d07ceedaa5e4c080f7190925bff\"},\n    {file = \"msgpack-1.0.4-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:1e91d641d2bfe91ba4c52039adc5bccf27c335356055825c7f88742c8bb900dd\"},\n    {file = \"msgpack-1.0.4-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:2a2df1b55a78eb5f5b7d2a4bb221cd8363913830145fad05374a80bf0877cb1e\"},\n    {file = \"msgpack-1.0.4-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:545e3cf0cf74f3e48b470f68ed19551ae6f9722814ea969305794645da091236\"},\n    {file = \"msgpack-1.0.4-cp37-cp37m-win32.whl\", hash = \"sha256:2cc5ca2712ac0003bcb625c96368fd08a0f86bbc1a5578802512d87bc592fe44\"},\n    {file = \"msgpack-1.0.4-cp37-cp37m-win_amd64.whl\", hash = \"sha256:eba96145051ccec0ec86611fe9cf693ce55f2a3ce89c06ed307de0e085730ec1\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:7760f85956c415578c17edb39eed99f9181a48375b0d4a94076d84148cf67b2d\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:449e57cc1ff18d3b444eb554e44613cffcccb32805d16726a5494038c3b93dab\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:d603de2b8d2ea3f3bcb2efe286849aa7a81531abc52d8454da12f46235092bcb\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:48f5d88c99f64c456413d74a975bd605a9b0526293218a3b77220a2c15458ba9\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6916c78f33602ecf0509cc40379271ba0f9ab572b066bd4bdafd7434dee4bc6e\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:81fc7ba725464651190b196f3cd848e8553d4d510114a954681fd0b9c479d7e1\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:d5b5b962221fa2c5d3a7f8133f9abffc114fe218eb4365e40f17732ade576c8e\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:77ccd2af37f3db0ea59fb280fa2165bf1b096510ba9fe0cc2bf8fa92a22fdb43\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:b17be2478b622939e39b816e0aa8242611cc8d3583d1cd8ec31b249f04623243\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-win32.whl\", hash = \"sha256:2bb8cdf50dd623392fa75525cce44a65a12a00c98e1e37bf0fb08ddce2ff60d2\"},\n    {file = \"msgpack-1.0.4-cp38-cp38-win_amd64.whl\", hash = \"sha256:26b8feaca40a90cbe031b03d82b2898bf560027160d3eae1423f4a67654ec5d6\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:462497af5fd4e0edbb1559c352ad84f6c577ffbbb708566a0abaaa84acd9f3ae\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:2999623886c5c02deefe156e8f869c3b0aaeba14bfc50aa2486a0415178fce55\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:f0029245c51fd9473dc1aede1160b0a29f4a912e6b1dd353fa6d317085b219da\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ed6f7b854a823ea44cf94919ba3f727e230da29feb4a99711433f25800cf747f\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0df96d6eaf45ceca04b3f3b4b111b86b33785683d682c655063ef8057d61fd92\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:6a4192b1ab40f8dca3f2877b70e63799d95c62c068c84dc028b40a6cb03ccd0f\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:0e3590f9fb9f7fbc36df366267870e77269c03172d086fa76bb4eba8b2b46624\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:1576bd97527a93c44fa856770197dec00d223b0b9f36ef03f65bac60197cedf8\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:63e29d6e8c9ca22b21846234913c3466b7e4ee6e422f205a2988083de3b08cae\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-win32.whl\", hash = \"sha256:fb62ea4b62bfcb0b380d5680f9a4b3f9a2d166d9394e9bbd9666c0ee09a3645c\"},\n    {file = \"msgpack-1.0.4-cp39-cp39-win_amd64.whl\", hash = \"sha256:4d5834a2a48965a349da1c5a79760d94a1a0172fbb5ab6b5b33cbf8447e109ce\"},\n    {file = \"msgpack-1.0.4.tar.gz\", hash = \"sha256:f5d869c18f030202eb412f08b28d2afeea553d6613aee89e200d7aca7ef01f5f\"},\n]\nmultidict = [\n    {file = \"multidict-6.0.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:0b9e95a740109c6047602f4db4da9949e6c5945cefbad34a1299775ddc9a62e2\"},\n    {file = \"multidict-6.0.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ac0e27844758d7177989ce406acc6a83c16ed4524ebc363c1f748cba184d89d3\"},\n    {file = \"multidict-6.0.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:041b81a5f6b38244b34dc18c7b6aba91f9cdaf854d9a39e5ff0b58e2b5773b9c\"},\n    {file = \"multidict-6.0.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5fdda29a3c7e76a064f2477c9aab1ba96fd94e02e386f1e665bca1807fc5386f\"},\n    {file = \"multidict-6.0.2-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:3368bf2398b0e0fcbf46d85795adc4c259299fec50c1416d0f77c0a843a3eed9\"},\n    {file = \"multidict-6.0.2-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f4f052ee022928d34fe1f4d2bc743f32609fb79ed9c49a1710a5ad6b2198db20\"},\n    {file = \"multidict-6.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:225383a6603c086e6cef0f2f05564acb4f4d5f019a4e3e983f572b8530f70c88\"},\n    {file = \"multidict-6.0.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:50bd442726e288e884f7be9071016c15a8742eb689a593a0cac49ea093eef0a7\"},\n    {file = \"multidict-6.0.2-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:47e6a7e923e9cada7c139531feac59448f1f47727a79076c0b1ee80274cd8eee\"},\n    {file = \"multidict-6.0.2-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:0556a1d4ea2d949efe5fd76a09b4a82e3a4a30700553a6725535098d8d9fb672\"},\n    {file = \"multidict-6.0.2-cp310-cp310-musllinux_1_1_ppc64le.whl\", hash = \"sha256:626fe10ac87851f4cffecee161fc6f8f9853f0f6f1035b59337a51d29ff3b4f9\"},\n    {file = \"multidict-6.0.2-cp310-cp310-musllinux_1_1_s390x.whl\", hash = \"sha256:8064b7c6f0af936a741ea1efd18690bacfbae4078c0c385d7c3f611d11f0cf87\"},\n    {file = \"multidict-6.0.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:2d36e929d7f6a16d4eb11b250719c39560dd70545356365b494249e2186bc389\"},\n    {file = \"multidict-6.0.2-cp310-cp310-win32.whl\", hash = \"sha256:fcb91630817aa8b9bc4a74023e4198480587269c272c58b3279875ed7235c293\"},\n    {file = \"multidict-6.0.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:8cbf0132f3de7cc6c6ce00147cc78e6439ea736cee6bca4f068bcf892b0fd658\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:05f6949d6169878a03e607a21e3b862eaf8e356590e8bdae4227eedadacf6e51\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e2c2e459f7050aeb7c1b1276763364884595d47000c1cddb51764c0d8976e608\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:d0509e469d48940147e1235d994cd849a8f8195e0bca65f8f5439c56e17872a3\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:514fe2b8d750d6cdb4712346a2c5084a80220821a3e91f3f71eec11cf8d28fd4\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:19adcfc2a7197cdc3987044e3f415168fc5dc1f720c932eb1ef4f71a2067e08b\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b9d153e7f1f9ba0b23ad1568b3b9e17301e23b042c23870f9ee0522dc5cc79e8\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:aef9cc3d9c7d63d924adac329c33835e0243b5052a6dfcbf7732a921c6e918ba\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:4571f1beddff25f3e925eea34268422622963cd8dc395bb8778eb28418248e43\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-musllinux_1_1_ppc64le.whl\", hash = \"sha256:d48b8ee1d4068561ce8033d2c344cf5232cb29ee1a0206a7b828c79cbc5982b8\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-musllinux_1_1_s390x.whl\", hash = \"sha256:45183c96ddf61bf96d2684d9fbaf6f3564d86b34cb125761f9a0ef9e36c1d55b\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:75bdf08716edde767b09e76829db8c1e5ca9d8bb0a8d4bd94ae1eafe3dac5e15\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-win32.whl\", hash = \"sha256:a45e1135cb07086833ce969555df39149680e5471c04dfd6a915abd2fc3f6dbc\"},\n    {file = \"multidict-6.0.2-cp37-cp37m-win_amd64.whl\", hash = \"sha256:6f3cdef8a247d1eafa649085812f8a310e728bdf3900ff6c434eafb2d443b23a\"},\n    {file = \"multidict-6.0.2-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:0327292e745a880459ef71be14e709aaea2f783f3537588fb4ed09b6c01bca60\"},\n    {file = \"multidict-6.0.2-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:e875b6086e325bab7e680e4316d667fc0e5e174bb5611eb16b3ea121c8951b86\"},\n    {file = \"multidict-6.0.2-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:feea820722e69451743a3d56ad74948b68bf456984d63c1a92e8347b7b88452d\"},\n    {file = \"multidict-6.0.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:9cc57c68cb9139c7cd6fc39f211b02198e69fb90ce4bc4a094cf5fe0d20fd8b0\"},\n    {file = \"multidict-6.0.2-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:497988d6b6ec6ed6f87030ec03280b696ca47dbf0648045e4e1d28b80346560d\"},\n    {file = \"multidict-6.0.2-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:89171b2c769e03a953d5969b2f272efa931426355b6c0cb508022976a17fd376\"},\n    {file = \"multidict-6.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:684133b1e1fe91eda8fa7447f137c9490a064c6b7f392aa857bba83a28cfb693\"},\n    {file = \"multidict-6.0.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:fd9fc9c4849a07f3635ccffa895d57abce554b467d611a5009ba4f39b78a8849\"},\n    {file = \"multidict-6.0.2-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:e07c8e79d6e6fd37b42f3250dba122053fddb319e84b55dd3a8d6446e1a7ee49\"},\n    {file = \"multidict-6.0.2-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:4070613ea2227da2bfb2c35a6041e4371b0af6b0be57f424fe2318b42a748516\"},\n    {file = \"multidict-6.0.2-cp38-cp38-musllinux_1_1_ppc64le.whl\", hash = \"sha256:47fbeedbf94bed6547d3aa632075d804867a352d86688c04e606971595460227\"},\n    {file = \"multidict-6.0.2-cp38-cp38-musllinux_1_1_s390x.whl\", hash = \"sha256:5774d9218d77befa7b70d836004a768fb9aa4fdb53c97498f4d8d3f67bb9cfa9\"},\n    {file = \"multidict-6.0.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:2957489cba47c2539a8eb7ab32ff49101439ccf78eab724c828c1a54ff3ff98d\"},\n    {file = \"multidict-6.0.2-cp38-cp38-win32.whl\", hash = \"sha256:e5b20e9599ba74391ca0cfbd7b328fcc20976823ba19bc573983a25b32e92b57\"},\n    {file = \"multidict-6.0.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:8004dca28e15b86d1b1372515f32eb6f814bdf6f00952699bdeb541691091f96\"},\n    {file = \"multidict-6.0.2-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:2e4a0785b84fb59e43c18a015ffc575ba93f7d1dbd272b4cdad9f5134b8a006c\"},\n    {file = \"multidict-6.0.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:6701bf8a5d03a43375909ac91b6980aea74b0f5402fbe9428fc3f6edf5d9677e\"},\n    {file = \"multidict-6.0.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:a007b1638e148c3cfb6bf0bdc4f82776cef0ac487191d093cdc316905e504071\"},\n    {file = \"multidict-6.0.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:07a017cfa00c9890011628eab2503bee5872f27144936a52eaab449be5eaf032\"},\n    {file = \"multidict-6.0.2-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:c207fff63adcdf5a485969131dc70e4b194327666b7e8a87a97fbc4fd80a53b2\"},\n    {file = \"multidict-6.0.2-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:373ba9d1d061c76462d74e7de1c0c8e267e9791ee8cfefcf6b0b2495762c370c\"},\n    {file = \"multidict-6.0.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bfba7c6d5d7c9099ba21f84662b037a0ffd4a5e6b26ac07d19e423e6fdf965a9\"},\n    {file = \"multidict-6.0.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:19d9bad105dfb34eb539c97b132057a4e709919ec4dd883ece5838bcbf262b80\"},\n    {file = \"multidict-6.0.2-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:de989b195c3d636ba000ee4281cd03bb1234635b124bf4cd89eeee9ca8fcb09d\"},\n    {file = \"multidict-6.0.2-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:7c40b7bbece294ae3a87c1bc2abff0ff9beef41d14188cda94ada7bcea99b0fb\"},\n    {file = \"multidict-6.0.2-cp39-cp39-musllinux_1_1_ppc64le.whl\", hash = \"sha256:d16cce709ebfadc91278a1c005e3c17dd5f71f5098bfae1035149785ea6e9c68\"},\n    {file = \"multidict-6.0.2-cp39-cp39-musllinux_1_1_s390x.whl\", hash = \"sha256:a2c34a93e1d2aa35fbf1485e5010337c72c6791407d03aa5f4eed920343dd360\"},\n    {file = \"multidict-6.0.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:feba80698173761cddd814fa22e88b0661e98cb810f9f986c54aa34d281e4937\"},\n    {file = \"multidict-6.0.2-cp39-cp39-win32.whl\", hash = \"sha256:23b616fdc3c74c9fe01d76ce0d1ce872d2d396d8fa8e4899398ad64fb5aa214a\"},\n    {file = \"multidict-6.0.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:4bae31803d708f6f15fd98be6a6ac0b6958fcf68fda3c77a048a4f9073704aae\"},\n    {file = \"multidict-6.0.2.tar.gz\", hash = \"sha256:5ff3bd75f38e4c43f1f470f2df7a4d430b821c4ce22be384e1459cb57d6bb013\"},\n]\nmypy-extensions = [\n    {file = \"mypy_extensions-0.4.3-py2.py3-none-any.whl\", hash = \"sha256:090fedd75945a69ae91ce1303b5824f428daf5a028d2f6ab8a299250a846f15d\"},\n    {file = \"mypy_extensions-0.4.3.tar.gz\", hash = \"sha256:2d82818f5bb3e369420cb3c4060a7970edba416647068eb4c5343488a6c604a8\"},\n]\nnonebot-adapter-onebot = [\n    {file = \"nonebot-adapter-onebot-2.1.1.tar.gz\", hash = \"sha256:d00036883dd8b8685f0eea68b7ada9c3b1ba9de8b39f5c33e81d36a444afe02a\"},\n    {file = \"nonebot_adapter_onebot-2.1.1-py3-none-any.whl\", hash = \"sha256:1a825b21fc7315c11d335276a932811352ac70e7031e86b5595121185c951c77\"},\n]\nnonebot-plugin-apscheduler = [\n    {file = \"nonebot-plugin-apscheduler-0.1.3.tar.gz\", hash = \"sha256:fe11e0fbde56cde12a6f1a50997803a422ea2f085c4e9d496210b03ef9cca585\"},\n    {file = \"nonebot_plugin_apscheduler-0.1.3-py3-none-any.whl\", hash = \"sha256:76456f625089045c9f2f8943e90c009841afd461b9dc51e9de21169bbd1b2677\"},\n]\nnonebot2 = [\n    {file = \"nonebot2-2.0.0b4-py3-none-any.whl\", hash = \"sha256:3029cdb657ec48c6aaa046e1b712e7a0ebe5d0010208dff95b5ccbe461d1ed4e\"},\n    {file = \"nonebot2-2.0.0b4.tar.gz\", hash = \"sha256:fe57242138b3ab7019770566c23f7b39c53e0159b81ec7bd5b34cf6b1ff9eb13\"},\n]\nnumpy = [\n    {file = \"numpy-1.23.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:b15c3f1ed08df4980e02cc79ee058b788a3d0bef2fb3c9ca90bb8cbd5b8a3a04\"},\n    {file = \"numpy-1.23.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:9ce242162015b7e88092dccd0e854548c0926b75c7924a3495e02c6067aba1f5\"},\n    {file = \"numpy-1.23.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e0d7447679ae9a7124385ccf0ea990bb85bb869cef217e2ea6c844b6a6855073\"},\n    {file = \"numpy-1.23.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3119daed207e9410eaf57dcf9591fdc68045f60483d94956bee0bfdcba790953\"},\n    {file = \"numpy-1.23.1-cp310-cp310-win32.whl\", hash = \"sha256:3ab67966c8d45d55a2bdf40701536af6443763907086c0a6d1232688e27e5447\"},\n    {file = \"numpy-1.23.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:1865fdf51446839ca3fffaab172461f2b781163f6f395f1aed256b1ddc253622\"},\n    {file = \"numpy-1.23.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:aeba539285dcf0a1ba755945865ec61240ede5432df41d6e29fab305f4384db2\"},\n    {file = \"numpy-1.23.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:7e8229f3687cdadba2c4faef39204feb51ef7c1a9b669247d49a24f3e2e1617c\"},\n    {file = \"numpy-1.23.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:68b69f52e6545af010b76516f5daaef6173e73353e3295c5cb9f96c35d755641\"},\n    {file = \"numpy-1.23.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1408c3527a74a0209c781ac82bde2182b0f0bf54dea6e6a363fe0cc4488a7ce7\"},\n    {file = \"numpy-1.23.1-cp38-cp38-win32.whl\", hash = \"sha256:47f10ab202fe4d8495ff484b5561c65dd59177949ca07975663f4494f7269e3e\"},\n    {file = \"numpy-1.23.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:37e5ebebb0eb54c5b4a9b04e6f3018e16b8ef257d26c8945925ba8105008e645\"},\n    {file = \"numpy-1.23.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:173f28921b15d341afadf6c3898a34f20a0569e4ad5435297ba262ee8941e77b\"},\n    {file = \"numpy-1.23.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:876f60de09734fbcb4e27a97c9a286b51284df1326b1ac5f1bf0ad3678236b22\"},\n    {file = \"numpy-1.23.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:35590b9c33c0f1c9732b3231bb6a72d1e4f77872390c47d50a615686ae7ed3fd\"},\n    {file = \"numpy-1.23.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a35c4e64dfca659fe4d0f1421fc0f05b8ed1ca8c46fb73d9e5a7f175f85696bb\"},\n    {file = \"numpy-1.23.1-cp39-cp39-win32.whl\", hash = \"sha256:c2f91f88230042a130ceb1b496932aa717dcbd665350beb821534c5c7e15881c\"},\n    {file = \"numpy-1.23.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:37ece2bd095e9781a7156852e43d18044fd0d742934833335599c583618181b9\"},\n    {file = \"numpy-1.23.1-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:8002574a6b46ac3b5739a003b5233376aeac5163e5dcd43dd7ad062f3e186129\"},\n    {file = \"numpy-1.23.1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5d732d17b8a9061540a10fda5bfeabca5785700ab5469a5e9b93aca5e2d3a5fb\"},\n    {file = \"numpy-1.23.1-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:55df0f7483b822855af67e38fb3a526e787adf189383b4934305565d71c4b148\"},\n    {file = \"numpy-1.23.1.tar.gz\", hash = \"sha256:d748ef349bfef2e1194b59da37ed5a29c19ea8d7e6342019921ba2ba4fd8b624\"},\n]\nopencv-python = [\n    {file = \"opencv-python-4.6.0.66.tar.gz\", hash = \"sha256:c5bfae41ad4031e66bb10ec4a0a2ffd3e514d092652781e8b1ac98d1b59f1158\"},\n    {file = \"opencv_python-4.6.0.66-cp36-abi3-macosx_10_15_x86_64.whl\", hash = \"sha256:e6e448b62afc95c5b58f97e87ef84699e6607fe5c58730a03301c52496005cae\"},\n    {file = \"opencv_python-4.6.0.66-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5af8ba35a4fcb8913ffb86e92403e9a656a4bff4a645d196987468f0f8947875\"},\n    {file = \"opencv_python-4.6.0.66-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dbdc84a9b4ea2cbae33861652d25093944b9959279200b7ae0badd32439f74de\"},\n    {file = \"opencv_python-4.6.0.66-cp36-abi3-win32.whl\", hash = \"sha256:f482e78de6e7b0b060ff994ffd859bddc3f7f382bb2019ef157b0ea8ca8712f5\"},\n    {file = \"opencv_python-4.6.0.66-cp36-abi3-win_amd64.whl\", hash = \"sha256:0dc82a3d8630c099d2f3ac1b1aabee164e8188db54a786abb7a4e27eba309440\"},\n    {file = \"opencv_python-4.6.0.66-cp37-abi3-macosx_11_0_arm64.whl\", hash = \"sha256:6e32af22e3202748bd233ed8f538741876191863882eba44e332d1a34993165b\"},\n]\npackaging = [\n    {file = \"packaging-21.3-py3-none-any.whl\", hash = \"sha256:ef103e05f519cdc783ae24ea4e2e0f508a9c99b2d4969652eed6a2e1ea5bd522\"},\n    {file = \"packaging-21.3.tar.gz\", hash = \"sha256:dd47c42927d89ab911e606518907cc2d3a1f38bbd026385970643f9c5b8ecfeb\"},\n]\npathspec = [\n    {file = \"pathspec-0.9.0-py2.py3-none-any.whl\", hash = \"sha256:7d15c4ddb0b5c802d161efc417ec1a2558ea2653c2e8ad9c19098201dc1c993a\"},\n    {file = \"pathspec-0.9.0.tar.gz\", hash = \"sha256:e564499435a2673d586f6b2130bb5b95f04a3ba06f81b8f895b651a3c76aabb1\"},\n]\npillow = [\n    {file = \"Pillow-9.2.0-cp310-cp310-macosx_10_10_x86_64.whl\", hash = \"sha256:a9c9bc489f8ab30906d7a85afac4b4944a572a7432e00698a7239f44a44e6efb\"},\n    {file = \"Pillow-9.2.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:510cef4a3f401c246cfd8227b300828715dd055463cdca6176c2e4036df8bd4f\"},\n    {file = \"Pillow-9.2.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7888310f6214f19ab2b6df90f3f06afa3df7ef7355fc025e78a3044737fab1f5\"},\n    {file = \"Pillow-9.2.0-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:831e648102c82f152e14c1a0938689dbb22480c548c8d4b8b248b3e50967b88c\"},\n    {file = \"Pillow-9.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1cc1d2451e8a3b4bfdb9caf745b58e6c7a77d2e469159b0d527a4554d73694d1\"},\n    {file = \"Pillow-9.2.0-cp310-cp310-manylinux_2_28_aarch64.whl\", hash = \"sha256:136659638f61a251e8ed3b331fc6ccd124590eeff539de57c5f80ef3a9594e58\"},\n    {file = \"Pillow-9.2.0-cp310-cp310-manylinux_2_28_x86_64.whl\", hash = \"sha256:6e8c66f70fb539301e064f6478d7453e820d8a2c631da948a23384865cd95544\"},\n    {file = \"Pillow-9.2.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:37ff6b522a26d0538b753f0b4e8e164fdada12db6c6f00f62145d732d8a3152e\"},\n    {file = \"Pillow-9.2.0-cp310-cp310-win32.whl\", hash = \"sha256:c79698d4cd9318d9481d89a77e2d3fcaeff5486be641e60a4b49f3d2ecca4e28\"},\n    {file = \"Pillow-9.2.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:254164c57bab4b459f14c64e93df11eff5ded575192c294a0c49270f22c5d93d\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-macosx_10_10_universal2.whl\", hash = \"sha256:408673ed75594933714482501fe97e055a42996087eeca7e5d06e33218d05aa8\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-macosx_11_0_universal2.whl\", hash = \"sha256:727dd1389bc5cb9827cbd1f9d40d2c2a1a0c9b32dd2261db522d22a604a6eec9\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:50dff9cc21826d2977ef2d2a205504034e3a4563ca6f5db739b0d1026658e004\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cb6259196a589123d755380b65127ddc60f4c64b21fc3bb46ce3a6ea663659b0\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7b0554af24df2bf96618dac71ddada02420f946be943b181108cac55a7a2dcd4\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-manylinux_2_28_aarch64.whl\", hash = \"sha256:15928f824870535c85dbf949c09d6ae7d3d6ac2d6efec80f3227f73eefba741c\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-manylinux_2_28_x86_64.whl\", hash = \"sha256:bdd0de2d64688ecae88dd8935012c4a72681e5df632af903a1dca8c5e7aa871a\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:d5b87da55a08acb586bad5c3aa3b86505f559b84f39035b233d5bf844b0834b1\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-win32.whl\", hash = \"sha256:b6d5e92df2b77665e07ddb2e4dbd6d644b78e4c0d2e9272a852627cdba0d75cf\"},\n    {file = \"Pillow-9.2.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:6bf088c1ce160f50ea40764f825ec9b72ed9da25346216b91361eef8ad1b8f8c\"},\n    {file = \"Pillow-9.2.0-cp37-cp37m-macosx_10_10_x86_64.whl\", hash = \"sha256:2c58b24e3a63efd22554c676d81b0e57f80e0a7d3a5874a7e14ce90ec40d3069\"},\n    {file = \"Pillow-9.2.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:eef7592281f7c174d3d6cbfbb7ee5984a671fcd77e3fc78e973d492e9bf0eb3f\"},\n    {file = \"Pillow-9.2.0-cp37-cp37m-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:dcd7b9c7139dc8258d164b55696ecd16c04607f1cc33ba7af86613881ffe4ac8\"},\n    {file = \"Pillow-9.2.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a138441e95562b3c078746a22f8fca8ff1c22c014f856278bdbdd89ca36cff1b\"},\n    {file = \"Pillow-9.2.0-cp37-cp37m-manylinux_2_28_aarch64.whl\", hash = \"sha256:93689632949aff41199090eff5474f3990b6823404e45d66a5d44304e9cdc467\"},\n    {file = \"Pillow-9.2.0-cp37-cp37m-manylinux_2_28_x86_64.whl\", hash = \"sha256:f3fac744f9b540148fa7715a435d2283b71f68bfb6d4aae24482a890aed18b59\"},\n    {file = \"Pillow-9.2.0-cp37-cp37m-win32.whl\", hash = \"sha256:fa768eff5f9f958270b081bb33581b4b569faabf8774726b283edb06617101dc\"},\n    {file = \"Pillow-9.2.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:69bd1a15d7ba3694631e00df8de65a8cb031911ca11f44929c97fe05eb9b6c1d\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-macosx_10_10_x86_64.whl\", hash = \"sha256:030e3460861488e249731c3e7ab59b07c7853838ff3b8e16aac9561bb345da14\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:74a04183e6e64930b667d321524e3c5361094bb4af9083db5c301db64cd341f3\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2d33a11f601213dcd5718109c09a52c2a1c893e7461f0be2d6febc2879ec2402\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1fd6f5e3c0e4697fa7eb45b6e93996299f3feee73a3175fa451f49a74d092b9f\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a647c0d4478b995c5e54615a2e5360ccedd2f85e70ab57fbe817ca613d5e63b8\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-manylinux_2_28_aarch64.whl\", hash = \"sha256:4134d3f1ba5f15027ff5c04296f13328fecd46921424084516bdb1b2548e66ff\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-manylinux_2_28_x86_64.whl\", hash = \"sha256:bc431b065722a5ad1dfb4df354fb9333b7a582a5ee39a90e6ffff688d72f27a1\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:1536ad017a9f789430fb6b8be8bf99d2f214c76502becc196c6f2d9a75b01b76\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-win32.whl\", hash = \"sha256:2ad0d4df0f5ef2247e27fc790d5c9b5a0af8ade9ba340db4a73bb1a4a3e5fb4f\"},\n    {file = \"Pillow-9.2.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:ec52c351b35ca269cb1f8069d610fc45c5bd38c3e91f9ab4cbbf0aebc136d9c8\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-macosx_10_10_x86_64.whl\", hash = \"sha256:0ed2c4ef2451de908c90436d6e8092e13a43992f1860275b4d8082667fbb2ffc\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:4ad2f835e0ad81d1689f1b7e3fbac7b01bb8777d5a985c8962bedee0cc6d43da\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ea98f633d45f7e815db648fd7ff0f19e328302ac36427343e4432c84432e7ff4\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7761afe0126d046974a01e030ae7529ed0ca6a196de3ec6937c11df0df1bc91c\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9a54614049a18a2d6fe156e68e188da02a046a4a93cf24f373bffd977e943421\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-manylinux_2_28_aarch64.whl\", hash = \"sha256:5aed7dde98403cd91d86a1115c78d8145c83078e864c1de1064f52e6feb61b20\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-manylinux_2_28_x86_64.whl\", hash = \"sha256:13b725463f32df1bfeacbf3dd197fb358ae8ebcd8c5548faa75126ea425ccb60\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:808add66ea764ed97d44dda1ac4f2cfec4c1867d9efb16a33d158be79f32b8a4\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-win32.whl\", hash = \"sha256:337a74fd2f291c607d220c793a8135273c4c2ab001b03e601c36766005f36885\"},\n    {file = \"Pillow-9.2.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:fac2d65901fb0fdf20363fbd345c01958a742f2dc62a8dd4495af66e3ff502a4\"},\n    {file = \"Pillow-9.2.0-pp37-pypy37_pp73-macosx_10_10_x86_64.whl\", hash = \"sha256:ad2277b185ebce47a63f4dc6302e30f05762b688f8dc3de55dbae4651872cdf3\"},\n    {file = \"Pillow-9.2.0-pp37-pypy37_pp73-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7c7b502bc34f6e32ba022b4a209638f9e097d7a9098104ae420eb8186217ebbb\"},\n    {file = \"Pillow-9.2.0-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3d1f14f5f691f55e1b47f824ca4fdcb4b19b4323fe43cc7bb105988cad7496be\"},\n    {file = \"Pillow-9.2.0-pp37-pypy37_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:dfe4c1fedfde4e2fbc009d5ad420647f7730d719786388b7de0999bf32c0d9fd\"},\n    {file = \"Pillow-9.2.0-pp38-pypy38_pp73-macosx_10_10_x86_64.whl\", hash = \"sha256:f07f1f00e22b231dd3d9b9208692042e29792d6bd4f6639415d2f23158a80013\"},\n    {file = \"Pillow-9.2.0-pp38-pypy38_pp73-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1802f34298f5ba11d55e5bb09c31997dc0c6aed919658dfdf0198a2fe75d5490\"},\n    {file = \"Pillow-9.2.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:17d4cafe22f050b46d983b71c707162d63d796a1235cdf8b9d7a112e97b15bac\"},\n    {file = \"Pillow-9.2.0-pp38-pypy38_pp73-manylinux_2_28_x86_64.whl\", hash = \"sha256:96b5e6874431df16aee0c1ba237574cb6dff1dcb173798faa6a9d8b399a05d0e\"},\n    {file = \"Pillow-9.2.0-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:0030fdbd926fb85844b8b92e2f9449ba89607231d3dd597a21ae72dc7fe26927\"},\n    {file = \"Pillow-9.2.0.tar.gz\", hash = \"sha256:75e636fd3e0fb872693f23ccb8a5ff2cd578801251f3a4f6854c6a5d437d3c04\"},\n]\nplatformdirs = [\n    {file = \"platformdirs-2.5.2-py3-none-any.whl\", hash = \"sha256:027d8e83a2d7de06bbac4e5ef7e023c02b863d7ea5d079477e722bb41ab25788\"},\n    {file = \"platformdirs-2.5.2.tar.gz\", hash = \"sha256:58c8abb07dcb441e6ee4b11d8df0ac856038f944ab98b7be6b27b2a3c7feef19\"},\n]\nplaywright = [\n    {file = \"playwright-1.24.0-py3-none-macosx_10_13_x86_64.whl\", hash = \"sha256:942c938a8fc8d5daa01cf4e2ca7dfd4cad9216e3e0af88992c083dd324f9210e\"},\n    {file = \"playwright-1.24.0-py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:fbc74dd91c0c00d282d340b6d08d22010279cbe84052afe0f0854dc1e3a51315\"},\n    {file = \"playwright-1.24.0-py3-none-macosx_11_0_universal2.whl\", hash = \"sha256:976e59736502e28efe7bddb77fc9f01d3ccad9bf556c82e4208c194eea8c1eeb\"},\n    {file = \"playwright-1.24.0-py3-none-manylinux1_x86_64.whl\", hash = \"sha256:9caf9680f1791df94d0be2bfc9fcdc793efcb1986564c76f10accac13cc23bd4\"},\n    {file = \"playwright-1.24.0-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2060bdf6b3137f45e1cd5e1b7d70081cca82381b09251868aebfc01542e68a2d\"},\n    {file = \"playwright-1.24.0-py3-none-win32.whl\", hash = \"sha256:f496bb2ddd36698c85ff9ad3183953d0583afa952b35a1c74096e158b4735651\"},\n    {file = \"playwright-1.24.0-py3-none-win_amd64.whl\", hash = \"sha256:e4b876c05e773fd4d179cf15942bd7ac33fa7a0884d939485ade15695c70bfd4\"},\n]\nproces = [\n    {file = \"proces-0.1.2-py3-none-any.whl\", hash = \"sha256:82b765c70ebe790aae03159617710d03bcec3c98d6c7190f126bf307eecd0fd3\"},\n    {file = \"proces-0.1.2.tar.gz\", hash = \"sha256:99fc87148aff66fb0ca83b66562d6c61b2a2ba4bdff7c9eec64c02df7917d51f\"},\n]\nprotobuf = [\n    {file = \"protobuf-3.20.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:3cc797c9d15d7689ed507b165cd05913acb992d78b379f6014e013f9ecb20996\"},\n    {file = \"protobuf-3.20.1-cp310-cp310-manylinux2014_aarch64.whl\", hash = \"sha256:ff8d8fa42675249bb456f5db06c00de6c2f4c27a065955917b28c4f15978b9c3\"},\n    {file = \"protobuf-3.20.1-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:cd68be2559e2a3b84f517fb029ee611546f7812b1fdd0aa2ecc9bc6ec0e4fdde\"},\n    {file = \"protobuf-3.20.1-cp310-cp310-win32.whl\", hash = \"sha256:9016d01c91e8e625141d24ec1b20fed584703e527d28512aa8c8707f105a683c\"},\n    {file = \"protobuf-3.20.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:32ca378605b41fd180dfe4e14d3226386d8d1b002ab31c969c366549e66a2bb7\"},\n    {file = \"protobuf-3.20.1-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:9be73ad47579abc26c12024239d3540e6b765182a91dbc88e23658ab71767153\"},\n    {file = \"protobuf-3.20.1-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:097c5d8a9808302fb0da7e20edf0b8d4703274d140fd25c5edabddcde43e081f\"},\n    {file = \"protobuf-3.20.1-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:e250a42f15bf9d5b09fe1b293bdba2801cd520a9f5ea2d7fb7536d4441811d20\"},\n    {file = \"protobuf-3.20.1-cp37-cp37m-manylinux2014_aarch64.whl\", hash = \"sha256:cdee09140e1cd184ba9324ec1df410e7147242b94b5f8b0c64fc89e38a8ba531\"},\n    {file = \"protobuf-3.20.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:af0ebadc74e281a517141daad9d0f2c5d93ab78e9d455113719a45a49da9db4e\"},\n    {file = \"protobuf-3.20.1-cp37-cp37m-win32.whl\", hash = \"sha256:755f3aee41354ae395e104d62119cb223339a8f3276a0cd009ffabfcdd46bb0c\"},\n    {file = \"protobuf-3.20.1-cp37-cp37m-win_amd64.whl\", hash = \"sha256:62f1b5c4cd6c5402b4e2d63804ba49a327e0c386c99b1675c8a0fefda23b2067\"},\n    {file = \"protobuf-3.20.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:06059eb6953ff01e56a25cd02cca1a9649a75a7e65397b5b9b4e929ed71d10cf\"},\n    {file = \"protobuf-3.20.1-cp38-cp38-manylinux2014_aarch64.whl\", hash = \"sha256:cb29edb9eab15742d791e1025dd7b6a8f6fcb53802ad2f6e3adcb102051063ab\"},\n    {file = \"protobuf-3.20.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:69ccfdf3657ba59569c64295b7d51325f91af586f8d5793b734260dfe2e94e2c\"},\n    {file = \"protobuf-3.20.1-cp38-cp38-win32.whl\", hash = \"sha256:dd5789b2948ca702c17027c84c2accb552fc30f4622a98ab5c51fcfe8c50d3e7\"},\n    {file = \"protobuf-3.20.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:77053d28427a29987ca9caf7b72ccafee011257561259faba8dd308fda9a8739\"},\n    {file = \"protobuf-3.20.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:6f50601512a3d23625d8a85b1638d914a0970f17920ff39cec63aaef80a93fb7\"},\n    {file = \"protobuf-3.20.1-cp39-cp39-manylinux2014_aarch64.whl\", hash = \"sha256:284f86a6207c897542d7e956eb243a36bb8f9564c1742b253462386e96c6b78f\"},\n    {file = \"protobuf-3.20.1-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl\", hash = \"sha256:7403941f6d0992d40161aa8bb23e12575637008a5a02283a930addc0508982f9\"},\n    {file = \"protobuf-3.20.1-cp39-cp39-win32.whl\", hash = \"sha256:db977c4ca738dd9ce508557d4fce0f5aebd105e158c725beec86feb1f6bc20d8\"},\n    {file = \"protobuf-3.20.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:7e371f10abe57cee5021797126c93479f59fccc9693dafd6bd5633ab67808a91\"},\n    {file = \"protobuf-3.20.1-py2.py3-none-any.whl\", hash = \"sha256:adfc6cf69c7f8c50fd24c793964eef18f0ac321315439d94945820612849c388\"},\n    {file = \"protobuf-3.20.1.tar.gz\", hash = \"sha256:adc31566d027f45efe3f44eeb5b1f329da43891634d61c75a5944e9be6dd42c9\"},\n]\npsutil = [\n    {file = \"psutil-5.9.1-cp27-cp27m-manylinux2010_i686.whl\", hash = \"sha256:799759d809c31aab5fe4579e50addf84565e71c1dc9f1c31258f159ff70d3f87\"},\n    {file = \"psutil-5.9.1-cp27-cp27m-manylinux2010_x86_64.whl\", hash = \"sha256:9272167b5f5fbfe16945be3db475b3ce8d792386907e673a209da686176552af\"},\n    {file = \"psutil-5.9.1-cp27-cp27m-win32.whl\", hash = \"sha256:0904727e0b0a038830b019551cf3204dd48ef5c6868adc776e06e93d615fc5fc\"},\n    {file = \"psutil-5.9.1-cp27-cp27m-win_amd64.whl\", hash = \"sha256:e7e10454cb1ab62cc6ce776e1c135a64045a11ec4c6d254d3f7689c16eb3efd2\"},\n    {file = \"psutil-5.9.1-cp27-cp27mu-manylinux2010_i686.whl\", hash = \"sha256:56960b9e8edcca1456f8c86a196f0c3d8e3e361320071c93378d41445ffd28b0\"},\n    {file = \"psutil-5.9.1-cp27-cp27mu-manylinux2010_x86_64.whl\", hash = \"sha256:44d1826150d49ffd62035785a9e2c56afcea66e55b43b8b630d7706276e87f22\"},\n    {file = \"psutil-5.9.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:c7be9d7f5b0d206f0bbc3794b8e16fb7dbc53ec9e40bbe8787c6f2d38efcf6c9\"},\n    {file = \"psutil-5.9.1-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:abd9246e4cdd5b554a2ddd97c157e292ac11ef3e7af25ac56b08b455c829dca8\"},\n    {file = \"psutil-5.9.1-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:29a442e25fab1f4d05e2655bb1b8ab6887981838d22effa2396d584b740194de\"},\n    {file = \"psutil-5.9.1-cp310-cp310-win32.whl\", hash = \"sha256:20b27771b077dcaa0de1de3ad52d22538fe101f9946d6dc7869e6f694f079329\"},\n    {file = \"psutil-5.9.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:58678bbadae12e0db55186dc58f2888839228ac9f41cc7848853539b70490021\"},\n    {file = \"psutil-5.9.1-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:3a76ad658641172d9c6e593de6fe248ddde825b5866464c3b2ee26c35da9d237\"},\n    {file = \"psutil-5.9.1-cp36-cp36m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a6a11e48cb93a5fa606306493f439b4aa7c56cb03fc9ace7f6bfa21aaf07c453\"},\n    {file = \"psutil-5.9.1-cp36-cp36m-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:068935df39055bf27a29824b95c801c7a5130f118b806eee663cad28dca97685\"},\n    {file = \"psutil-5.9.1-cp36-cp36m-win32.whl\", hash = \"sha256:0f15a19a05f39a09327345bc279c1ba4a8cfb0172cc0d3c7f7d16c813b2e7d36\"},\n    {file = \"psutil-5.9.1-cp36-cp36m-win_amd64.whl\", hash = \"sha256:db417f0865f90bdc07fa30e1aadc69b6f4cad7f86324b02aa842034efe8d8c4d\"},\n    {file = \"psutil-5.9.1-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:91c7ff2a40c373d0cc9121d54bc5f31c4fa09c346528e6a08d1845bce5771ffc\"},\n    {file = \"psutil-5.9.1-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:fea896b54f3a4ae6f790ac1d017101252c93f6fe075d0e7571543510f11d2676\"},\n    {file = \"psutil-5.9.1-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3054e923204b8e9c23a55b23b6df73a8089ae1d075cb0bf711d3e9da1724ded4\"},\n    {file = \"psutil-5.9.1-cp37-cp37m-win32.whl\", hash = \"sha256:d2d006286fbcb60f0b391741f520862e9b69f4019b4d738a2a45728c7e952f1b\"},\n    {file = \"psutil-5.9.1-cp37-cp37m-win_amd64.whl\", hash = \"sha256:b14ee12da9338f5e5b3a3ef7ca58b3cba30f5b66f7662159762932e6d0b8f680\"},\n    {file = \"psutil-5.9.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:19f36c16012ba9cfc742604df189f2f28d2720e23ff7d1e81602dbe066be9fd1\"},\n    {file = \"psutil-5.9.1-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:944c4b4b82dc4a1b805329c980f270f170fdc9945464223f2ec8e57563139cf4\"},\n    {file = \"psutil-5.9.1-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4b6750a73a9c4a4e689490ccb862d53c7b976a2a35c4e1846d049dcc3f17d83b\"},\n    {file = \"psutil-5.9.1-cp38-cp38-win32.whl\", hash = \"sha256:a8746bfe4e8f659528c5c7e9af5090c5a7d252f32b2e859c584ef7d8efb1e689\"},\n    {file = \"psutil-5.9.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:79c9108d9aa7fa6fba6e668b61b82facc067a6b81517cab34d07a84aa89f3df0\"},\n    {file = \"psutil-5.9.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:28976df6c64ddd6320d281128817f32c29b539a52bdae5e192537bc338a9ec81\"},\n    {file = \"psutil-5.9.1-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b88f75005586131276634027f4219d06e0561292be8bd6bc7f2f00bdabd63c4e\"},\n    {file = \"psutil-5.9.1-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:645bd4f7bb5b8633803e0b6746ff1628724668681a434482546887d22c7a9537\"},\n    {file = \"psutil-5.9.1-cp39-cp39-win32.whl\", hash = \"sha256:32c52611756096ae91f5d1499fe6c53b86f4a9ada147ee42db4991ba1520e574\"},\n    {file = \"psutil-5.9.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:f65f9a46d984b8cd9b3750c2bdb419b2996895b005aefa6cbaba9a143b1ce2c5\"},\n    {file = \"psutil-5.9.1.tar.gz\", hash = \"sha256:57f1819b5d9e95cdfb0c881a8a5b7d542ed0b7c522d575706a80bedc848c8954\"},\n]\npyasn1 = [\n    {file = \"pyasn1-0.4.8-py2.4.egg\", hash = \"sha256:fec3e9d8e36808a28efb59b489e4528c10ad0f480e57dcc32b4de5c9d8c9fdf3\"},\n    {file = \"pyasn1-0.4.8-py2.5.egg\", hash = \"sha256:0458773cfe65b153891ac249bcf1b5f8f320b7c2ce462151f8fa74de8934becf\"},\n    {file = \"pyasn1-0.4.8-py2.6.egg\", hash = \"sha256:5c9414dcfede6e441f7e8f81b43b34e834731003427e5b09e4e00e3172a10f00\"},\n    {file = \"pyasn1-0.4.8-py2.7.egg\", hash = \"sha256:6e7545f1a61025a4e58bb336952c5061697da694db1cae97b116e9c46abcf7c8\"},\n    {file = \"pyasn1-0.4.8-py2.py3-none-any.whl\", hash = \"sha256:39c7e2ec30515947ff4e87fb6f456dfc6e84857d34be479c9d4a4ba4bf46aa5d\"},\n    {file = \"pyasn1-0.4.8-py3.1.egg\", hash = \"sha256:78fa6da68ed2727915c4767bb386ab32cdba863caa7dbe473eaae45f9959da86\"},\n    {file = \"pyasn1-0.4.8-py3.2.egg\", hash = \"sha256:08c3c53b75eaa48d71cf8c710312316392ed40899cb34710d092e96745a358b7\"},\n    {file = \"pyasn1-0.4.8-py3.3.egg\", hash = \"sha256:03840c999ba71680a131cfaee6fab142e1ed9bbd9c693e285cc6aca0d555e576\"},\n    {file = \"pyasn1-0.4.8-py3.4.egg\", hash = \"sha256:7ab8a544af125fb704feadb008c99a88805126fb525280b2270bb25cc1d78a12\"},\n    {file = \"pyasn1-0.4.8-py3.5.egg\", hash = \"sha256:e89bf84b5437b532b0803ba5c9a5e054d21fec423a89952a74f87fa2c9b7bce2\"},\n    {file = \"pyasn1-0.4.8-py3.6.egg\", hash = \"sha256:014c0e9976956a08139dc0712ae195324a75e142284d5f87f1a87ee1b068a359\"},\n    {file = \"pyasn1-0.4.8-py3.7.egg\", hash = \"sha256:99fcc3c8d804d1bc6d9a099921e39d827026409a58f2a720dcdb89374ea0c776\"},\n    {file = \"pyasn1-0.4.8.tar.gz\", hash = \"sha256:aef77c9fb94a3ac588e87841208bdec464471d9871bd5050a287cc9a475cd0ba\"},\n]\npydantic = [\n    {file = \"pydantic-1.9.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:c8098a724c2784bf03e8070993f6d46aa2eeca031f8d8a048dff277703e6e193\"},\n    {file = \"pydantic-1.9.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:c320c64dd876e45254bdd350f0179da737463eea41c43bacbee9d8c9d1021f11\"},\n    {file = \"pydantic-1.9.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:18f3e912f9ad1bdec27fb06b8198a2ccc32f201e24174cec1b3424dda605a310\"},\n    {file = \"pydantic-1.9.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c11951b404e08b01b151222a1cb1a9f0a860a8153ce8334149ab9199cd198131\"},\n    {file = \"pydantic-1.9.1-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:8bc541a405423ce0e51c19f637050acdbdf8feca34150e0d17f675e72d119580\"},\n    {file = \"pydantic-1.9.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:e565a785233c2d03724c4dc55464559639b1ba9ecf091288dd47ad9c629433bd\"},\n    {file = \"pydantic-1.9.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:a4a88dcd6ff8fd47c18b3a3709a89adb39a6373f4482e04c1b765045c7e282fd\"},\n    {file = \"pydantic-1.9.1-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:447d5521575f18e18240906beadc58551e97ec98142266e521c34968c76c8761\"},\n    {file = \"pydantic-1.9.1-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:985ceb5d0a86fcaa61e45781e567a59baa0da292d5ed2e490d612d0de5796918\"},\n    {file = \"pydantic-1.9.1-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:059b6c1795170809103a1538255883e1983e5b831faea6558ef873d4955b4a74\"},\n    {file = \"pydantic-1.9.1-cp36-cp36m-musllinux_1_1_i686.whl\", hash = \"sha256:d12f96b5b64bec3f43c8e82b4aab7599d0157f11c798c9f9c528a72b9e0b339a\"},\n    {file = \"pydantic-1.9.1-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:ae72f8098acb368d877b210ebe02ba12585e77bd0db78ac04a1ee9b9f5dd2166\"},\n    {file = \"pydantic-1.9.1-cp36-cp36m-win_amd64.whl\", hash = \"sha256:79b485767c13788ee314669008d01f9ef3bc05db9ea3298f6a50d3ef596a154b\"},\n    {file = \"pydantic-1.9.1-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:494f7c8537f0c02b740c229af4cb47c0d39840b829ecdcfc93d91dcbb0779892\"},\n    {file = \"pydantic-1.9.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f0f047e11febe5c3198ed346b507e1d010330d56ad615a7e0a89fae604065a0e\"},\n    {file = \"pydantic-1.9.1-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:969dd06110cb780da01336b281f53e2e7eb3a482831df441fb65dd30403f4608\"},\n    {file = \"pydantic-1.9.1-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:177071dfc0df6248fd22b43036f936cfe2508077a72af0933d0c1fa269b18537\"},\n    {file = \"pydantic-1.9.1-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:9bcf8b6e011be08fb729d110f3e22e654a50f8a826b0575c7196616780683380\"},\n    {file = \"pydantic-1.9.1-cp37-cp37m-win_amd64.whl\", hash = \"sha256:a955260d47f03df08acf45689bd163ed9df82c0e0124beb4251b1290fa7ae728\"},\n    {file = \"pydantic-1.9.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:9ce157d979f742a915b75f792dbd6aa63b8eccaf46a1005ba03aa8a986bde34a\"},\n    {file = \"pydantic-1.9.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:0bf07cab5b279859c253d26a9194a8906e6f4a210063b84b433cf90a569de0c1\"},\n    {file = \"pydantic-1.9.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5d93d4e95eacd313d2c765ebe40d49ca9dd2ed90e5b37d0d421c597af830c195\"},\n    {file = \"pydantic-1.9.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1542636a39c4892c4f4fa6270696902acb186a9aaeac6f6cf92ce6ae2e88564b\"},\n    {file = \"pydantic-1.9.1-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:a9af62e9b5b9bc67b2a195ebc2c2662fdf498a822d62f902bf27cccb52dbbf49\"},\n    {file = \"pydantic-1.9.1-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:fe4670cb32ea98ffbf5a1262f14c3e102cccd92b1869df3bb09538158ba90fe6\"},\n    {file = \"pydantic-1.9.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:9f659a5ee95c8baa2436d392267988fd0f43eb774e5eb8739252e5a7e9cf07e0\"},\n    {file = \"pydantic-1.9.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:b83ba3825bc91dfa989d4eed76865e71aea3a6ca1388b59fc801ee04c4d8d0d6\"},\n    {file = \"pydantic-1.9.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:1dd8fecbad028cd89d04a46688d2fcc14423e8a196d5b0a5c65105664901f810\"},\n    {file = \"pydantic-1.9.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:02eefd7087268b711a3ff4db528e9916ac9aa18616da7bca69c1871d0b7a091f\"},\n    {file = \"pydantic-1.9.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7eb57ba90929bac0b6cc2af2373893d80ac559adda6933e562dcfb375029acee\"},\n    {file = \"pydantic-1.9.1-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:4ce9ae9e91f46c344bec3b03d6ee9612802682c1551aaf627ad24045ce090761\"},\n    {file = \"pydantic-1.9.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:72ccb318bf0c9ab97fc04c10c37683d9eea952ed526707fabf9ac5ae59b701fd\"},\n    {file = \"pydantic-1.9.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:61b6760b08b7c395975d893e0b814a11cf011ebb24f7d869e7118f5a339a82e1\"},\n    {file = \"pydantic-1.9.1-py3-none-any.whl\", hash = \"sha256:4988c0f13c42bfa9ddd2fe2f569c9d54646ce84adc5de84228cfe83396f3bd58\"},\n    {file = \"pydantic-1.9.1.tar.gz\", hash = \"sha256:1ed987c3ff29fff7fd8c3ea3a3ea877ad310aae2ef9889a119e22d3f2db0691a\"},\n]\npyee = [\n    {file = \"pyee-8.1.0-py2.py3-none-any.whl\", hash = \"sha256:383973b63ad7ed5e3c0311f8b179c52981f9e7b3eaea0e9a830d13ec34dde65f\"},\n    {file = \"pyee-8.1.0.tar.gz\", hash = \"sha256:92dacc5bd2bdb8f95aa8dd2585d47ca1c4840e2adb95ccf90034d64f725bfd31\"},\n]\npygments = [\n    {file = \"Pygments-2.12.0-py3-none-any.whl\", hash = \"sha256:dc9c10fb40944260f6ed4c688ece0cd2048414940f1cea51b8b226318411c519\"},\n    {file = \"Pygments-2.12.0.tar.gz\", hash = \"sha256:5eb116118f9612ff1ee89ac96437bb6b49e8f04d8a13b514ba26f620208e26eb\"},\n]\npygtrie = [\n    {file = \"pygtrie-2.5.0.tar.gz\", hash = \"sha256:203514ad826eb403dab1d2e2ddd034e0d1534bbe4dbe0213bb0593f66beba4e2\"},\n]\npyparsing = [\n    {file = \"pyparsing-3.0.9-py3-none-any.whl\", hash = \"sha256:5026bae9a10eeaefb61dab2f09052b9f4307d44aee4eda64b309723d8d206bbc\"},\n    {file = \"pyparsing-3.0.9.tar.gz\", hash = \"sha256:2b020ecf7d21b687f219b71ecad3631f644a47f01403fa1d1036b0c6416d70fb\"},\n]\npypinyin = [\n    {file = \"pypinyin-0.46.0-py2.py3-none-any.whl\", hash = \"sha256:7251f4fa0b1e43ad91f6121d9a842e8acd72a6a34deea5e87d2a97621eadc11f\"},\n    {file = \"pypinyin-0.46.0.tar.gz\", hash = \"sha256:0d2e41e95dbc20a232c0f5d3850654eebbfcba303d96358d2c46592725bb989c\"},\n]\npython-dateutil = [\n    {file = \"python-dateutil-2.8.2.tar.gz\", hash = \"sha256:0123cacc1627ae19ddf3c27a5de5bd67ee4586fbdd6440d9748f8abb483d3e86\"},\n    {file = \"python_dateutil-2.8.2-py2.py3-none-any.whl\", hash = \"sha256:961d03dc3453ebbc59dbdea9e4e11c5651520a876d0f4db161e8674aae935da9\"},\n]\npython-dotenv = [\n    {file = \"python-dotenv-0.20.0.tar.gz\", hash = \"sha256:b7e3b04a59693c42c36f9ab1cc2acc46fa5df8c78e178fc33a8d4cd05c8d498f\"},\n    {file = \"python_dotenv-0.20.0-py3-none-any.whl\", hash = \"sha256:d92a187be61fe482e4fd675b6d52200e7be63a12b724abbf931a40ce4fa92938\"},\n]\npython-jose = [\n    {file = \"python-jose-3.3.0.tar.gz\", hash = \"sha256:55779b5e6ad599c6336191246e95eb2293a9ddebd555f796a65f838f07e5d78a\"},\n    {file = \"python_jose-3.3.0-py2.py3-none-any.whl\", hash = \"sha256:9b1376b023f8b298536eedd47ae1089bcdb848f1535ab30555cd92002d78923a\"},\n]\npython-multipart = [\n    {file = \"python-multipart-0.0.5.tar.gz\", hash = \"sha256:f7bb5f611fc600d15fa47b3974c8aa16e93724513b49b5f95c81e6624c83fa43\"},\n]\npytz = [\n    {file = \"pytz-2022.1-py2.py3-none-any.whl\", hash = \"sha256:e68985985296d9a66a881eb3193b0906246245294a881e7c8afe623866ac6a5c\"},\n    {file = \"pytz-2022.1.tar.gz\", hash = \"sha256:1e760e2fe6a8163bc0b3d9a19c4f84342afa0a2affebfaa84b01b978a02ecaa7\"},\n]\npytz-deprecation-shim = [\n    {file = \"pytz_deprecation_shim-0.1.0.post0-py2.py3-none-any.whl\", hash = \"sha256:8314c9692a636c8eb3bda879b9f119e350e93223ae83e70e80c31675a0fdc1a6\"},\n    {file = \"pytz_deprecation_shim-0.1.0.post0.tar.gz\", hash = \"sha256:af097bae1b616dde5c5744441e2ddc69e74dfdcb0c263129610d85b87445a59d\"},\n]\npywavelets = [\n    {file = \"PyWavelets-1.3.0-cp310-cp310-macosx_10_13_universal2.whl\", hash = \"sha256:eebaa9c28600da336743fefd650332460c132792660e70eb09abf343b0664b87\"},\n    {file = \"PyWavelets-1.3.0-cp310-cp310-macosx_10_13_x86_64.whl\", hash = \"sha256:3eeffcf2f7eebae5cc27cb11a7d0d96118e2e9f75ac38ff1a05373d5fe75accb\"},\n    {file = \"PyWavelets-1.3.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:35a945bea9da6db9755e42e06e871846514ae91bde3ae24a08a1d090b003a23b\"},\n    {file = \"PyWavelets-1.3.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e8876764e349673ee8d48bc3cd0afd2f9f7b65378998e2665af12c277c8a56de\"},\n    {file = \"PyWavelets-1.3.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c98ac1cee6276db05768e450dc3002033be6c2819c906103a974e0fb0d436f41\"},\n    {file = \"PyWavelets-1.3.0-cp310-cp310-win32.whl\", hash = \"sha256:6ecfe051ccb097c2dcdcb0977e0a684e76144d6694a202badf0780143d8536f0\"},\n    {file = \"PyWavelets-1.3.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:437806465cfa5f2d91809ec13154be050b84a11025784a6b6ce04ac452872b36\"},\n    {file = \"PyWavelets-1.3.0-cp37-cp37m-macosx_10_13_x86_64.whl\", hash = \"sha256:3c4ebe7ff2c9092f6bdd1f8bf98ce2745f5d43a9936d6e342ee83fbcae548116\"},\n    {file = \"PyWavelets-1.3.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d4f9ed4f175c66c9b8646a93fd54c588fd8f4b2517f53c59aea5cdf370f9c9ba\"},\n    {file = \"PyWavelets-1.3.0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:41e4f0a3a6a088e955006513fe72f863cea3ce293033131cacb8a1a3068ed228\"},\n    {file = \"PyWavelets-1.3.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:5b76731d2077242611b32f2e11c72adbf126b432ceae92e2ce8d0f693974c96d\"},\n    {file = \"PyWavelets-1.3.0-cp37-cp37m-win32.whl\", hash = \"sha256:3d3ecc2ee87be94fb2dc8c2d35bcae3f24708677196e80028d24ba0fd2f6a70a\"},\n    {file = \"PyWavelets-1.3.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:91e1b220f0ddd4c127bab718363c2c4a07dbcd95b9c4bfed09a3cdae47dbba43\"},\n    {file = \"PyWavelets-1.3.0-cp38-cp38-macosx_10_13_universal2.whl\", hash = \"sha256:8a5941d1f4eb1bc9569c655b63ecb31aa15b3ef0fc9b57df275892c39bccc59e\"},\n    {file = \"PyWavelets-1.3.0-cp38-cp38-macosx_10_13_x86_64.whl\", hash = \"sha256:a555a7a85da01357d8258cb45f751881f69013f8920f8738718c60cf8a47b755\"},\n    {file = \"PyWavelets-1.3.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:69e9a46facf89b51e5700d10f6d831f29745471c1ab42917f2f849a257b9fd77\"},\n    {file = \"PyWavelets-1.3.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a51225d24811ba7ef5184c03bb7072db0aa9651c4370a115d4069dedfb8d2f7a\"},\n    {file = \"PyWavelets-1.3.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d7369597e1b1d125eb4b458a36cef052beed188444e55ed21445c1196008e200\"},\n    {file = \"PyWavelets-1.3.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:307ab8a4c3e5c2b8f7d3d371de4a5f019cf4b030b897c3394a4a7ad157369367\"},\n    {file = \"PyWavelets-1.3.0-cp38-cp38-win32.whl\", hash = \"sha256:27e99818d3c26481de3c68dbe880a7fcafe661cc031b22eff4a64237fe17a7ff\"},\n    {file = \"PyWavelets-1.3.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:3383d106fa8da0c2df30401ad056cd7a11b76d885f4bfa16ca7bcc6b4ca2831c\"},\n    {file = \"PyWavelets-1.3.0-cp39-cp39-macosx_10_13_universal2.whl\", hash = \"sha256:84c58a179bdb9fc71039b1f68bcd0718a7d9814b5e3741d7681d3e027bb81b52\"},\n    {file = \"PyWavelets-1.3.0-cp39-cp39-macosx_10_13_x86_64.whl\", hash = \"sha256:fccf468c55427828a3c534b651311f2759210836491c1112e1548e1babe368a5\"},\n    {file = \"PyWavelets-1.3.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:0ed3afbda88498b3ea3c861bf5b55e4feca41747730a71a22102ed5a74d1e453\"},\n    {file = \"PyWavelets-1.3.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:38cc635c08a050e175a492e66c9b63a8e1f42254e6879e614b6c9d8d69e0887f\"},\n    {file = \"PyWavelets-1.3.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a486160f83efd8517cd748796adbab7c445ee8a3e1d168b4b8b60ed0f5aee3a0\"},\n    {file = \"PyWavelets-1.3.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:f6e7d969a6ef64ae8be1766b0b0e32debb13424543d331911b8d7e967d60dd42\"},\n    {file = \"PyWavelets-1.3.0-cp39-cp39-win32.whl\", hash = \"sha256:de67deb275474094e160900ab7e07f2a721b9cd351cf3826c4a3ab89bb71d4b3\"},\n    {file = \"PyWavelets-1.3.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:a354979e2ee8cd71a8952ded381f3d9f981692b73c6842bcc6c9f64047e0a5be\"},\n    {file = \"PyWavelets-1.3.0.tar.gz\", hash = \"sha256:cbaa9d62052d9daf8da765fc8e7c30c38ea2b8e9e1c18841913dfb4aec671ee5\"},\n]\npyyaml = [\n    {file = \"PyYAML-5.4.1-cp27-cp27m-macosx_10_9_x86_64.whl\", hash = \"sha256:3b2b1824fe7112845700f815ff6a489360226a5609b96ec2190a45e62a9fc922\"},\n    {file = \"PyYAML-5.4.1-cp27-cp27m-win32.whl\", hash = \"sha256:129def1b7c1bf22faffd67b8f3724645203b79d8f4cc81f674654d9902cb4393\"},\n    {file = \"PyYAML-5.4.1-cp27-cp27m-win_amd64.whl\", hash = \"sha256:4465124ef1b18d9ace298060f4eccc64b0850899ac4ac53294547536533800c8\"},\n    {file = \"PyYAML-5.4.1-cp27-cp27mu-manylinux1_x86_64.whl\", hash = \"sha256:bb4191dfc9306777bc594117aee052446b3fa88737cd13b7188d0e7aa8162185\"},\n    {file = \"PyYAML-5.4.1-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:6c78645d400265a062508ae399b60b8c167bf003db364ecb26dcab2bda048253\"},\n    {file = \"PyYAML-5.4.1-cp36-cp36m-manylinux1_x86_64.whl\", hash = \"sha256:4e0583d24c881e14342eaf4ec5fbc97f934b999a6828693a99157fde912540cc\"},\n    {file = \"PyYAML-5.4.1-cp36-cp36m-manylinux2014_aarch64.whl\", hash = \"sha256:72a01f726a9c7851ca9bfad6fd09ca4e090a023c00945ea05ba1638c09dc3347\"},\n    {file = \"PyYAML-5.4.1-cp36-cp36m-manylinux2014_s390x.whl\", hash = \"sha256:895f61ef02e8fed38159bb70f7e100e00f471eae2bc838cd0f4ebb21e28f8541\"},\n    {file = \"PyYAML-5.4.1-cp36-cp36m-win32.whl\", hash = \"sha256:3bd0e463264cf257d1ffd2e40223b197271046d09dadf73a0fe82b9c1fc385a5\"},\n    {file = \"PyYAML-5.4.1-cp36-cp36m-win_amd64.whl\", hash = \"sha256:e4fac90784481d221a8e4b1162afa7c47ed953be40d31ab4629ae917510051df\"},\n    {file = \"PyYAML-5.4.1-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:5accb17103e43963b80e6f837831f38d314a0495500067cb25afab2e8d7a4018\"},\n    {file = \"PyYAML-5.4.1-cp37-cp37m-manylinux1_x86_64.whl\", hash = \"sha256:e1d4970ea66be07ae37a3c2e48b5ec63f7ba6804bdddfdbd3cfd954d25a82e63\"},\n    {file = \"PyYAML-5.4.1-cp37-cp37m-manylinux2014_aarch64.whl\", hash = \"sha256:cb333c16912324fd5f769fff6bc5de372e9e7a202247b48870bc251ed40239aa\"},\n    {file = \"PyYAML-5.4.1-cp37-cp37m-manylinux2014_s390x.whl\", hash = \"sha256:fe69978f3f768926cfa37b867e3843918e012cf83f680806599ddce33c2c68b0\"},\n    {file = \"PyYAML-5.4.1-cp37-cp37m-win32.whl\", hash = \"sha256:dd5de0646207f053eb0d6c74ae45ba98c3395a571a2891858e87df7c9b9bd51b\"},\n    {file = \"PyYAML-5.4.1-cp37-cp37m-win_amd64.whl\", hash = \"sha256:08682f6b72c722394747bddaf0aa62277e02557c0fd1c42cb853016a38f8dedf\"},\n    {file = \"PyYAML-5.4.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:d2d9808ea7b4af864f35ea216be506ecec180628aced0704e34aca0b040ffe46\"},\n    {file = \"PyYAML-5.4.1-cp38-cp38-manylinux1_x86_64.whl\", hash = \"sha256:8c1be557ee92a20f184922c7b6424e8ab6691788e6d86137c5d93c1a6ec1b8fb\"},\n    {file = \"PyYAML-5.4.1-cp38-cp38-manylinux2014_aarch64.whl\", hash = \"sha256:fd7f6999a8070df521b6384004ef42833b9bd62cfee11a09bda1079b4b704247\"},\n    {file = \"PyYAML-5.4.1-cp38-cp38-manylinux2014_s390x.whl\", hash = \"sha256:bfb51918d4ff3d77c1c856a9699f8492c612cde32fd3bcd344af9be34999bfdc\"},\n    {file = \"PyYAML-5.4.1-cp38-cp38-win32.whl\", hash = \"sha256:fa5ae20527d8e831e8230cbffd9f8fe952815b2b7dae6ffec25318803a7528fc\"},\n    {file = \"PyYAML-5.4.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:0f5f5786c0e09baddcd8b4b45f20a7b5d61a7e7e99846e3c799b05c7c53fa696\"},\n    {file = \"PyYAML-5.4.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:294db365efa064d00b8d1ef65d8ea2c3426ac366c0c4368d930bf1c5fb497f77\"},\n    {file = \"PyYAML-5.4.1-cp39-cp39-manylinux1_x86_64.whl\", hash = \"sha256:74c1485f7707cf707a7aef42ef6322b8f97921bd89be2ab6317fd782c2d53183\"},\n    {file = \"PyYAML-5.4.1-cp39-cp39-manylinux2014_aarch64.whl\", hash = \"sha256:d483ad4e639292c90170eb6f7783ad19490e7a8defb3e46f97dfe4bacae89122\"},\n    {file = \"PyYAML-5.4.1-cp39-cp39-manylinux2014_s390x.whl\", hash = \"sha256:fdc842473cd33f45ff6bce46aea678a54e3d21f1b61a7750ce3c498eedfe25d6\"},\n    {file = \"PyYAML-5.4.1-cp39-cp39-win32.whl\", hash = \"sha256:49d4cdd9065b9b6e206d0595fee27a96b5dd22618e7520c33204a4a3239d5b10\"},\n    {file = \"PyYAML-5.4.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:c20cfa2d49991c8b4147af39859b167664f2ad4561704ee74c1de03318e898db\"},\n    {file = \"PyYAML-5.4.1.tar.gz\", hash = \"sha256:607774cbba28732bfa802b54baa7484215f530991055bb562efbed5b2f20a45e\"},\n]\nregex = [\n    {file = \"regex-2022.3.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:ab69b4fe09e296261377d209068d52402fb85ef89dc78a9ac4a29a895f4e24a7\"},\n    {file = \"regex-2022.3.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:5bc5f921be39ccb65fdda741e04b2555917a4bced24b4df14eddc7569be3b493\"},\n    {file = \"regex-2022.3.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:43eba5c46208deedec833663201752e865feddc840433285fbadee07b84b464d\"},\n    {file = \"regex-2022.3.2-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:c68d2c04f7701a418ec2e5631b7f3552efc32f6bcc1739369c6eeb1af55f62e0\"},\n    {file = \"regex-2022.3.2-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:caa2734ada16a44ae57b229d45091f06e30a9a52ace76d7574546ab23008c635\"},\n    {file = \"regex-2022.3.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ef806f684f17dbd6263d72a54ad4073af42b42effa3eb42b877e750c24c76f86\"},\n    {file = \"regex-2022.3.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:be319f4eb400ee567b722e9ea63d5b2bb31464e3cf1b016502e3ee2de4f86f5c\"},\n    {file = \"regex-2022.3.2-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:42bb37e2b2d25d958c25903f6125a41aaaa1ed49ca62c103331f24b8a459142f\"},\n    {file = \"regex-2022.3.2-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:fbc88d3ba402b5d041d204ec2449c4078898f89c4a6e6f0ed1c1a510ef1e221d\"},\n    {file = \"regex-2022.3.2-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:91e0f7e7be77250b808a5f46d90bf0032527d3c032b2131b63dee54753a4d729\"},\n    {file = \"regex-2022.3.2-cp310-cp310-musllinux_1_1_ppc64le.whl\", hash = \"sha256:cb3652bbe6720786b9137862205986f3ae54a09dec8499a995ed58292bdf77c2\"},\n    {file = \"regex-2022.3.2-cp310-cp310-musllinux_1_1_s390x.whl\", hash = \"sha256:878c626cbca3b649e14e972c14539a01191d79e58934e3f3ef4a9e17f90277f8\"},\n    {file = \"regex-2022.3.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:6df070a986fc064d865c381aecf0aaff914178fdf6874da2f2387e82d93cc5bd\"},\n    {file = \"regex-2022.3.2-cp310-cp310-win32.whl\", hash = \"sha256:b549d851f91a4efb3e65498bd4249b1447ab6035a9972f7fc215eb1f59328834\"},\n    {file = \"regex-2022.3.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:8babb2b5751105dc0aef2a2e539f4ba391e738c62038d8cb331c710f6b0f3da7\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:1977bb64264815d3ef016625adc9df90e6d0e27e76260280c63eca993e3f455f\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1e73652057473ad3e6934944af090852a02590c349357b79182c1b681da2c772\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b22ff939a8856a44f4822da38ef4868bd3a9ade22bb6d9062b36957c850e404f\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:878f5d649ba1db9f52cc4ef491f7dba2d061cdc48dd444c54260eebc0b1729b9\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0008650041531d0eadecc96a73d37c2dc4821cf51b0766e374cb4f1ddc4e1c14\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:06b1df01cf2aef3a9790858af524ae2588762c8a90e784ba00d003f045306204\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:57484d39447f94967e83e56db1b1108c68918c44ab519b8ecfc34b790ca52bf7\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-musllinux_1_1_aarch64.whl\", hash = \"sha256:74d86e8924835f863c34e646392ef39039405f6ce52956d8af16497af4064a30\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-musllinux_1_1_i686.whl\", hash = \"sha256:ae17fc8103f3b63345709d3e9654a274eee1c6072592aec32b026efd401931d0\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-musllinux_1_1_ppc64le.whl\", hash = \"sha256:5f92a7cdc6a0ae2abd184e8dfd6ef2279989d24c85d2c85d0423206284103ede\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-musllinux_1_1_s390x.whl\", hash = \"sha256:5dcc4168536c8f68654f014a3db49b6b4a26b226f735708be2054314ed4964f4\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:1e30762ddddb22f7f14c4f59c34d3addabc789216d813b0f3e2788d7bcf0cf29\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-win32.whl\", hash = \"sha256:286ff9ec2709d56ae7517040be0d6c502642517ce9937ab6d89b1e7d0904f863\"},\n    {file = \"regex-2022.3.2-cp36-cp36m-win_amd64.whl\", hash = \"sha256:d326ff80ed531bf2507cba93011c30fff2dd51454c85f55df0f59f2030b1687b\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:9d828c5987d543d052b53c579a01a52d96b86f937b1777bbfe11ef2728929357\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c87ac58b9baaf50b6c1b81a18d20eda7e2883aa9a4fb4f1ca70f2e443bfcdc57\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:d6c2441538e4fadd4291c8420853431a229fcbefc1bf521810fbc2629d8ae8c2\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f3356afbb301ec34a500b8ba8b47cba0b44ed4641c306e1dd981a08b416170b5\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0d96eec8550fd2fd26f8e675f6d8b61b159482ad8ffa26991b894ed5ee19038b\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:cf668f26604e9f7aee9f8eaae4ca07a948168af90b96be97a4b7fa902a6d2ac1\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:0eb0e2845e81bdea92b8281a3969632686502565abf4a0b9e4ab1471c863d8f3\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:87bc01226cd288f0bd9a4f9f07bf6827134dc97a96c22e2d28628e824c8de231\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:09b4b6ccc61d4119342b26246ddd5a04accdeebe36bdfe865ad87a0784efd77f\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-musllinux_1_1_ppc64le.whl\", hash = \"sha256:9557545c10d52c845f270b665b52a6a972884725aa5cf12777374e18f2ea8960\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-musllinux_1_1_s390x.whl\", hash = \"sha256:0be0c34a39e5d04a62fd5342f0886d0e57592a4f4993b3f9d257c1f688b19737\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:7b103dffb9f6a47ed7ffdf352b78cfe058b1777617371226c1894e1be443afec\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-win32.whl\", hash = \"sha256:f8169ec628880bdbca67082a9196e2106060a4a5cbd486ac51881a4df805a36f\"},\n    {file = \"regex-2022.3.2-cp37-cp37m-win_amd64.whl\", hash = \"sha256:4b9c16a807b17b17c4fa3a1d8c242467237be67ba92ad24ff51425329e7ae3d0\"},\n    {file = \"regex-2022.3.2-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:67250b36edfa714ba62dc62d3f238e86db1065fccb538278804790f578253640\"},\n    {file = \"regex-2022.3.2-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:5510932596a0f33399b7fff1bd61c59c977f2b8ee987b36539ba97eb3513584a\"},\n    {file = \"regex-2022.3.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f6f7ee2289176cb1d2c59a24f50900f8b9580259fa9f1a739432242e7d254f93\"},\n    {file = \"regex-2022.3.2-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:86d7a68fa53688e1f612c3246044157117403c7ce19ebab7d02daf45bd63913e\"},\n    {file = \"regex-2022.3.2-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:aaf5317c961d93c1a200b9370fb1c6b6836cc7144fef3e5a951326912bf1f5a3\"},\n    {file = \"regex-2022.3.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ad397bc7d51d69cb07ef89e44243f971a04ce1dca9bf24c992c362406c0c6573\"},\n    {file = \"regex-2022.3.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:297c42ede2c81f0cb6f34ea60b5cf6dc965d97fa6936c11fc3286019231f0d66\"},\n    {file = \"regex-2022.3.2-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:af4d8cc28e4c7a2f6a9fed544228c567340f8258b6d7ea815b62a72817bbd178\"},\n    {file = \"regex-2022.3.2-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:452519bc4c973e961b1620c815ea6dd8944a12d68e71002be5a7aff0a8361571\"},\n    {file = \"regex-2022.3.2-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:cb34c2d66355fb70ae47b5595aafd7218e59bb9c00ad8cc3abd1406ca5874f07\"},\n    {file = \"regex-2022.3.2-cp38-cp38-musllinux_1_1_ppc64le.whl\", hash = \"sha256:3d146e5591cb67c5e836229a04723a30af795ef9b70a0bbd913572e14b7b940f\"},\n    {file = \"regex-2022.3.2-cp38-cp38-musllinux_1_1_s390x.whl\", hash = \"sha256:03299b0bcaa7824eb7c0ebd7ef1e3663302d1b533653bfe9dc7e595d453e2ae9\"},\n    {file = \"regex-2022.3.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:9ccb0a4ab926016867260c24c192d9df9586e834f5db83dfa2c8fffb3a6e5056\"},\n    {file = \"regex-2022.3.2-cp38-cp38-win32.whl\", hash = \"sha256:f7e8f1ee28e0a05831c92dc1c0c1c94af5289963b7cf09eca5b5e3ce4f8c91b0\"},\n    {file = \"regex-2022.3.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:35ed2f3c918a00b109157428abfc4e8d1ffabc37c8f9abc5939ebd1e95dabc47\"},\n    {file = \"regex-2022.3.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:55820bc631684172b9b56a991d217ec7c2e580d956591dc2144985113980f5a3\"},\n    {file = \"regex-2022.3.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:83f03f0bd88c12e63ca2d024adeee75234d69808b341e88343b0232329e1f1a1\"},\n    {file = \"regex-2022.3.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:42d6007722d46bd2c95cce700181570b56edc0dcbadbfe7855ec26c3f2d7e008\"},\n    {file = \"regex-2022.3.2-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:320c2f4106962ecea0f33d8d31b985d3c185757c49c1fb735501515f963715ed\"},\n    {file = \"regex-2022.3.2-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:fbd3fe37353c62fd0eb19fb76f78aa693716262bcd5f9c14bb9e5aca4b3f0dc4\"},\n    {file = \"regex-2022.3.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:17e51ad1e6131c496b58d317bc9abec71f44eb1957d32629d06013a21bc99cac\"},\n    {file = \"regex-2022.3.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:72bc3a5effa5974be6d965ed8301ac1e869bc18425c8a8fac179fbe7876e3aee\"},\n    {file = \"regex-2022.3.2-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:e5602a9b5074dcacc113bba4d2f011d2748f50e3201c8139ac5b68cf2a76bd8b\"},\n    {file = \"regex-2022.3.2-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:729aa8ca624c42f309397c5fc9e21db90bf7e2fdd872461aabdbada33de9063c\"},\n    {file = \"regex-2022.3.2-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:d6ecfd1970b3380a569d7b3ecc5dd70dba295897418ed9e31ec3c16a5ab099a5\"},\n    {file = \"regex-2022.3.2-cp39-cp39-musllinux_1_1_ppc64le.whl\", hash = \"sha256:13bbf0c9453c6d16e5867bda7f6c0c7cff1decf96c5498318bb87f8136d2abd4\"},\n    {file = \"regex-2022.3.2-cp39-cp39-musllinux_1_1_s390x.whl\", hash = \"sha256:58ba41e462653eaf68fc4a84ec4d350b26a98d030be1ab24aba1adcc78ffe447\"},\n    {file = \"regex-2022.3.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:c0446b2871335d5a5e9fcf1462f954586b09a845832263db95059dcd01442015\"},\n    {file = \"regex-2022.3.2-cp39-cp39-win32.whl\", hash = \"sha256:20e6a27959f162f979165e496add0d7d56d7038237092d1aba20b46de79158f1\"},\n    {file = \"regex-2022.3.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:9efa41d1527b366c88f265a227b20bcec65bda879962e3fc8a2aee11e81266d7\"},\n    {file = \"regex-2022.3.2.tar.gz\", hash = \"sha256:79e5af1ff258bc0fe0bdd6f69bc4ae33935a898e3cbefbbccf22e88a27fa053b\"},\n]\nretrying = [\n    {file = \"retrying-1.3.3.tar.gz\", hash = \"sha256:08c039560a6da2fe4f2c426d0766e284d3b736e355f8dd24b37367b0bb41973b\"},\n]\nrfc3986 = [\n    {file = \"rfc3986-1.5.0-py2.py3-none-any.whl\", hash = \"sha256:a86d6e1f5b1dc238b218b012df0aa79409667bb209e58da56d0b94704e712a97\"},\n    {file = \"rfc3986-1.5.0.tar.gz\", hash = \"sha256:270aaf10d87d0d4e095063c65bf3ddbc6ee3d0b226328ce21e036f946e421835\"},\n]\nrich = [\n    {file = \"rich-12.5.1-py3-none-any.whl\", hash = \"sha256:2eb4e6894cde1e017976d2975ac210ef515d7548bc595ba20e195fb9628acdeb\"},\n    {file = \"rich-12.5.1.tar.gz\", hash = \"sha256:63a5c5ce3673d3d5fbbf23cd87e11ab84b6b451436f1b7f19ec54b6bc36ed7ca\"},\n]\nrsa = [\n    {file = \"rsa-4.9-py3-none-any.whl\", hash = \"sha256:90260d9058e514786967344d0ef75fa8727eed8a7d2e43ce9f4bcf1b536174f7\"},\n    {file = \"rsa-4.9.tar.gz\", hash = \"sha256:e38464a49c6c85d7f1351b0126661487a7e0a14a50f1675ec50eb34d4f20ef21\"},\n]\n\"ruamel.yaml\" = [\n    {file = \"ruamel.yaml-0.17.21-py3-none-any.whl\", hash = \"sha256:742b35d3d665023981bd6d16b3d24248ce5df75fdb4e2924e93a05c1f8b61ca7\"},\n    {file = \"ruamel.yaml-0.17.21.tar.gz\", hash = \"sha256:8b7ce697a2f212752a35c1ac414471dc16c424c9573be4926b56ff3f5d23b7af\"},\n]\n\"ruamel.yaml.clib\" = [\n    {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:6e7be2c5bcb297f5b82fee9c665eb2eb7001d1050deaba8471842979293a80b0\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl\", hash = \"sha256:221eca6f35076c6ae472a531afa1c223b9c29377e62936f61bc8e6e8bdc5f9e7\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-win32.whl\", hash = \"sha256:1070ba9dd7f9370d0513d649420c3b362ac2d687fe78c6e888f5b12bf8bc7bee\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp310-cp310-win_amd64.whl\", hash = \"sha256:77df077d32921ad46f34816a9a16e6356d8100374579bc35e15bab5d4e9377de\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp35-cp35m-macosx_10_6_intel.whl\", hash = \"sha256:cfdb9389d888c5b74af297e51ce357b800dd844898af9d4a547ffc143fa56751\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp35-cp35m-manylinux1_x86_64.whl\", hash = \"sha256:7b2927e92feb51d830f531de4ccb11b320255ee95e791022555971c466af4527\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp35-cp35m-win32.whl\", hash = \"sha256:ada3f400d9923a190ea8b59c8f60680c4ef8a4b0dfae134d2f2ff68429adfab5\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp35-cp35m-win_amd64.whl\", hash = \"sha256:de9c6b8a1ba52919ae919f3ae96abb72b994dd0350226e28f3686cb4f142165c\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:d67f273097c368265a7b81e152e07fb90ed395df6e552b9fa858c6d2c9f42502\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-manylinux1_x86_64.whl\", hash = \"sha256:72a2b8b2ff0a627496aad76f37a652bcef400fd861721744201ef1b45199ab78\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-win32.whl\", hash = \"sha256:9efef4aab5353387b07f6b22ace0867032b900d8e91674b5d8ea9150db5cae94\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp36-cp36m-win_amd64.whl\", hash = \"sha256:846fc8336443106fe23f9b6d6b8c14a53d38cef9a375149d61f99d78782ea468\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:0847201b767447fc33b9c235780d3aa90357d20dd6108b92be544427bea197dd\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-manylinux1_x86_64.whl\", hash = \"sha256:78988ed190206672da0f5d50c61afef8f67daa718d614377dcd5e3ed85ab4a99\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-win32.whl\", hash = \"sha256:a49e0161897901d1ac9c4a79984b8410f450565bbad64dbfcbf76152743a0cdb\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp37-cp37m-win_amd64.whl\", hash = \"sha256:bf75d28fa071645c529b5474a550a44686821decebdd00e21127ef1fd566eabe\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:a32f8d81ea0c6173ab1b3da956869114cae53ba1e9f72374032e33ba3118c233\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-manylinux1_x86_64.whl\", hash = \"sha256:7f7ecb53ae6848f959db6ae93bdff1740e651809780822270eab111500842a84\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-win32.whl\", hash = \"sha256:89221ec6d6026f8ae859c09b9718799fea22c0e8da8b766b0b2c9a9ba2db326b\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp38-cp38-win_amd64.whl\", hash = \"sha256:31ea73e564a7b5fbbe8188ab8b334393e06d997914a4e184975348f204790277\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:dc6a613d6c74eef5a14a214d433d06291526145431c3b964f5e16529b1842bed\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-manylinux1_x86_64.whl\", hash = \"sha256:1866cf2c284a03b9524a5cc00daca56d80057c5ce3cdc86a52020f4c720856f0\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-win32.whl\", hash = \"sha256:3fb9575a5acd13031c57a62cc7823e5d2ff8bc3835ba4d94b921b4e6ee664104\"},\n    {file = \"ruamel.yaml.clib-0.2.6-cp39-cp39-win_amd64.whl\", hash = \"sha256:825d5fccef6da42f3c8eccd4281af399f21c02b32d98e113dbc631ea6a6ecbc7\"},\n    {file = \"ruamel.yaml.clib-0.2.6.tar.gz\", hash = \"sha256:4ff604ce439abb20794f05613c374759ce10e3595d1867764dd1ae675b85acbd\"},\n]\nscipy = [\n    {file = \"scipy-1.6.1-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:a15a1f3fc0abff33e792d6049161b7795909b40b97c6cc2934ed54384017ab76\"},\n    {file = \"scipy-1.6.1-cp37-cp37m-manylinux1_i686.whl\", hash = \"sha256:e79570979ccdc3d165456dd62041d9556fb9733b86b4b6d818af7a0afc15f092\"},\n    {file = \"scipy-1.6.1-cp37-cp37m-manylinux1_x86_64.whl\", hash = \"sha256:a423533c55fec61456dedee7b6ee7dce0bb6bfa395424ea374d25afa262be261\"},\n    {file = \"scipy-1.6.1-cp37-cp37m-manylinux2014_aarch64.whl\", hash = \"sha256:33d6b7df40d197bdd3049d64e8e680227151673465e5d85723b3b8f6b15a6ced\"},\n    {file = \"scipy-1.6.1-cp37-cp37m-win32.whl\", hash = \"sha256:6725e3fbb47da428794f243864f2297462e9ee448297c93ed1dcbc44335feb78\"},\n    {file = \"scipy-1.6.1-cp37-cp37m-win_amd64.whl\", hash = \"sha256:5fa9c6530b1661f1370bcd332a1e62ca7881785cc0f80c0d559b636567fab63c\"},\n    {file = \"scipy-1.6.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:bd50daf727f7c195e26f27467c85ce653d41df4358a25b32434a50d8870fc519\"},\n    {file = \"scipy-1.6.1-cp38-cp38-manylinux1_i686.whl\", hash = \"sha256:f46dd15335e8a320b0fb4685f58b7471702234cba8bb3442b69a3e1dc329c345\"},\n    {file = \"scipy-1.6.1-cp38-cp38-manylinux1_x86_64.whl\", hash = \"sha256:0e5b0ccf63155d90da576edd2768b66fb276446c371b73841e3503be1d63fb5d\"},\n    {file = \"scipy-1.6.1-cp38-cp38-manylinux2014_aarch64.whl\", hash = \"sha256:2481efbb3740977e3c831edfd0bd9867be26387cacf24eb5e366a6a374d3d00d\"},\n    {file = \"scipy-1.6.1-cp38-cp38-win32.whl\", hash = \"sha256:68cb4c424112cd4be886b4d979c5497fba190714085f46b8ae67a5e4416c32b4\"},\n    {file = \"scipy-1.6.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:5f331eeed0297232d2e6eea51b54e8278ed8bb10b099f69c44e2558c090d06bf\"},\n    {file = \"scipy-1.6.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:0c8a51d33556bf70367452d4d601d1742c0e806cd0194785914daf19775f0e67\"},\n    {file = \"scipy-1.6.1-cp39-cp39-manylinux1_i686.whl\", hash = \"sha256:83bf7c16245c15bc58ee76c5418e46ea1811edcc2e2b03041b804e46084ab627\"},\n    {file = \"scipy-1.6.1-cp39-cp39-manylinux1_x86_64.whl\", hash = \"sha256:794e768cc5f779736593046c9714e0f3a5940bc6dcc1dba885ad64cbfb28e9f0\"},\n    {file = \"scipy-1.6.1-cp39-cp39-manylinux2014_aarch64.whl\", hash = \"sha256:5da5471aed911fe7e52b86bf9ea32fb55ae93e2f0fac66c32e58897cfb02fa07\"},\n    {file = \"scipy-1.6.1-cp39-cp39-win32.whl\", hash = \"sha256:8e403a337749ed40af60e537cc4d4c03febddcc56cd26e774c9b1b600a70d3e4\"},\n    {file = \"scipy-1.6.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:a5193a098ae9f29af283dcf0041f762601faf2e595c0db1da929875b7570353f\"},\n    {file = \"scipy-1.6.1.tar.gz\", hash = \"sha256:c4fceb864890b6168e79b0e714c585dbe2fd4222768ee90bc1aa0f8218691b11\"},\n]\nsetuptools-scm = [\n    {file = \"setuptools_scm-7.0.5-py3-none-any.whl\", hash = \"sha256:7930f720905e03ccd1e1d821db521bff7ec2ac9cf0ceb6552dd73d24a45d3b02\"},\n    {file = \"setuptools_scm-7.0.5.tar.gz\", hash = \"sha256:031e13af771d6f892b941adb6ea04545bbf91ebc5ce68c78aaf3fff6e1fb4844\"},\n]\nsgmllib3k = [\n    {file = \"sgmllib3k-1.0.0.tar.gz\", hash = \"sha256:7868fb1c8bfa764c1ac563d3cf369c381d1325d36124933a726f29fcdaa812e9\"},\n]\nsix = [\n    {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},\n    {file = \"six-1.16.0.tar.gz\", hash = \"sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926\"},\n]\nsniffio = [\n    {file = \"sniffio-1.2.0-py3-none-any.whl\", hash = \"sha256:471b71698eac1c2112a40ce2752bb2f4a4814c22a54a3eed3676bc0f5ca9f663\"},\n    {file = \"sniffio-1.2.0.tar.gz\", hash = \"sha256:c4666eecec1d3f50960c6bdf61ab7bc350648da6c126e3cf6898d8cd4ddcd3de\"},\n]\nsoupsieve = [\n    {file = \"soupsieve-2.3.2.post1-py3-none-any.whl\", hash = \"sha256:3b2503d3c7084a42b1ebd08116e5f81aadfaea95863628c80a3b774a11b7c759\"},\n    {file = \"soupsieve-2.3.2.post1.tar.gz\", hash = \"sha256:fc53893b3da2c33de295667a0e19f078c14bf86544af307354de5fcf12a3f30d\"},\n]\nsqlalchemy = [\n    {file = \"SQLAlchemy-1.3.24-cp27-cp27m-macosx_10_14_x86_64.whl\", hash = \"sha256:87a2725ad7d41cd7376373c15fd8bf674e9c33ca56d0b8036add2d634dba372e\"},\n    {file = \"SQLAlchemy-1.3.24-cp27-cp27m-win32.whl\", hash = \"sha256:f597a243b8550a3a0b15122b14e49d8a7e622ba1c9d29776af741f1845478d79\"},\n    {file = \"SQLAlchemy-1.3.24-cp27-cp27m-win_amd64.whl\", hash = \"sha256:fc4cddb0b474b12ed7bdce6be1b9edc65352e8ce66bc10ff8cbbfb3d4047dbf4\"},\n    {file = \"SQLAlchemy-1.3.24-cp35-cp35m-macosx_10_14_x86_64.whl\", hash = \"sha256:f1149d6e5c49d069163e58a3196865e4321bad1803d7886e07d8710de392c548\"},\n    {file = \"SQLAlchemy-1.3.24-cp35-cp35m-manylinux1_x86_64.whl\", hash = \"sha256:14f0eb5db872c231b20c18b1e5806352723a3a89fb4254af3b3e14f22eaaec75\"},\n    {file = \"SQLAlchemy-1.3.24-cp35-cp35m-manylinux2010_x86_64.whl\", hash = \"sha256:e98d09f487267f1e8d1179bf3b9d7709b30a916491997137dd24d6ae44d18d79\"},\n    {file = \"SQLAlchemy-1.3.24-cp35-cp35m-manylinux2014_aarch64.whl\", hash = \"sha256:fc1f2a5a5963e2e73bac4926bdaf7790c4d7d77e8fc0590817880e22dd9d0b8b\"},\n    {file = \"SQLAlchemy-1.3.24-cp35-cp35m-win32.whl\", hash = \"sha256:f3c5c52f7cb8b84bfaaf22d82cb9e6e9a8297f7c2ed14d806a0f5e4d22e83fb7\"},\n    {file = \"SQLAlchemy-1.3.24-cp35-cp35m-win_amd64.whl\", hash = \"sha256:0352db1befcbed2f9282e72843f1963860bf0e0472a4fa5cf8ee084318e0e6ab\"},\n    {file = \"SQLAlchemy-1.3.24-cp36-cp36m-macosx_10_14_x86_64.whl\", hash = \"sha256:2ed6343b625b16bcb63c5b10523fd15ed8934e1ed0f772c534985e9f5e73d894\"},\n    {file = \"SQLAlchemy-1.3.24-cp36-cp36m-manylinux1_x86_64.whl\", hash = \"sha256:34fcec18f6e4b24b4a5f6185205a04f1eab1e56f8f1d028a2a03694ebcc2ddd4\"},\n    {file = \"SQLAlchemy-1.3.24-cp36-cp36m-manylinux2010_x86_64.whl\", hash = \"sha256:e47e257ba5934550d7235665eee6c911dc7178419b614ba9e1fbb1ce6325b14f\"},\n    {file = \"SQLAlchemy-1.3.24-cp36-cp36m-manylinux2014_aarch64.whl\", hash = \"sha256:816de75418ea0953b5eb7b8a74933ee5a46719491cd2b16f718afc4b291a9658\"},\n    {file = \"SQLAlchemy-1.3.24-cp36-cp36m-win32.whl\", hash = \"sha256:26155ea7a243cbf23287f390dba13d7927ffa1586d3208e0e8d615d0c506f996\"},\n    {file = \"SQLAlchemy-1.3.24-cp36-cp36m-win_amd64.whl\", hash = \"sha256:f03bd97650d2e42710fbe4cf8a59fae657f191df851fc9fc683ecef10746a375\"},\n    {file = \"SQLAlchemy-1.3.24-cp37-cp37m-macosx_10_14_x86_64.whl\", hash = \"sha256:a006d05d9aa052657ee3e4dc92544faae5fcbaafc6128217310945610d862d39\"},\n    {file = \"SQLAlchemy-1.3.24-cp37-cp37m-manylinux1_x86_64.whl\", hash = \"sha256:1e2f89d2e5e3c7a88e25a3b0e43626dba8db2aa700253023b82e630d12b37109\"},\n    {file = \"SQLAlchemy-1.3.24-cp37-cp37m-manylinux2010_x86_64.whl\", hash = \"sha256:0d5d862b1cfbec5028ce1ecac06a3b42bc7703eb80e4b53fceb2738724311443\"},\n    {file = \"SQLAlchemy-1.3.24-cp37-cp37m-manylinux2014_aarch64.whl\", hash = \"sha256:0172423a27fbcae3751ef016663b72e1a516777de324a76e30efa170dbd3dd2d\"},\n    {file = \"SQLAlchemy-1.3.24-cp37-cp37m-win32.whl\", hash = \"sha256:d37843fb8df90376e9e91336724d78a32b988d3d20ab6656da4eb8ee3a45b63c\"},\n    {file = \"SQLAlchemy-1.3.24-cp37-cp37m-win_amd64.whl\", hash = \"sha256:c10ff6112d119f82b1618b6dc28126798481b9355d8748b64b9b55051eb4f01b\"},\n    {file = \"SQLAlchemy-1.3.24-cp38-cp38-macosx_10_14_x86_64.whl\", hash = \"sha256:861e459b0e97673af6cc5e7f597035c2e3acdfb2608132665406cded25ba64c7\"},\n    {file = \"SQLAlchemy-1.3.24-cp38-cp38-manylinux1_x86_64.whl\", hash = \"sha256:5de2464c254380d8a6c20a2746614d5a436260be1507491442cf1088e59430d2\"},\n    {file = \"SQLAlchemy-1.3.24-cp38-cp38-manylinux2010_x86_64.whl\", hash = \"sha256:d375d8ccd3cebae8d90270f7aa8532fe05908f79e78ae489068f3b4eee5994e8\"},\n    {file = \"SQLAlchemy-1.3.24-cp38-cp38-manylinux2014_aarch64.whl\", hash = \"sha256:014ea143572fee1c18322b7908140ad23b3994036ef4c0d630110faf942652f8\"},\n    {file = \"SQLAlchemy-1.3.24-cp38-cp38-win32.whl\", hash = \"sha256:6607ae6cd3a07f8a4c3198ffbf256c261661965742e2b5265a77cd5c679c9bba\"},\n    {file = \"SQLAlchemy-1.3.24-cp38-cp38-win_amd64.whl\", hash = \"sha256:fcb251305fa24a490b6a9ee2180e5f8252915fb778d3dafc70f9cc3f863827b9\"},\n    {file = \"SQLAlchemy-1.3.24-cp39-cp39-macosx_10_14_x86_64.whl\", hash = \"sha256:01aa5f803db724447c1d423ed583e42bf5264c597fd55e4add4301f163b0be48\"},\n    {file = \"SQLAlchemy-1.3.24-cp39-cp39-manylinux1_x86_64.whl\", hash = \"sha256:4d0e3515ef98aa4f0dc289ff2eebb0ece6260bbf37c2ea2022aad63797eacf60\"},\n    {file = \"SQLAlchemy-1.3.24-cp39-cp39-manylinux2010_x86_64.whl\", hash = \"sha256:bce28277f308db43a6b4965734366f533b3ff009571ec7ffa583cb77539b84d6\"},\n    {file = \"SQLAlchemy-1.3.24-cp39-cp39-manylinux2014_aarch64.whl\", hash = \"sha256:8110e6c414d3efc574543109ee618fe2c1f96fa31833a1ff36cc34e968c4f233\"},\n    {file = \"SQLAlchemy-1.3.24-cp39-cp39-win32.whl\", hash = \"sha256:ee5f5188edb20a29c1cc4a039b074fdc5575337c9a68f3063449ab47757bb064\"},\n    {file = \"SQLAlchemy-1.3.24-cp39-cp39-win_amd64.whl\", hash = \"sha256:09083c2487ca3c0865dc588e07aeaa25416da3d95f7482c07e92f47e080aa17b\"},\n    {file = \"SQLAlchemy-1.3.24.tar.gz\", hash = \"sha256:ebbb777cbf9312359b897bf81ba00dae0f5cb69fba2a18265dcc18a6f5ef7519\"},\n]\nstarlette = [\n    {file = \"starlette-0.19.1-py3-none-any.whl\", hash = \"sha256:5a60c5c2d051f3a8eb546136aa0c9399773a689595e099e0877704d5888279bf\"},\n    {file = \"starlette-0.19.1.tar.gz\", hash = \"sha256:c6d21096774ecb9639acad41b86b7706e52ba3bf1dc13ea4ed9ad593d47e24c7\"},\n]\ntomli = [\n    {file = \"tomli-2.0.1-py3-none-any.whl\", hash = \"sha256:939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc\"},\n    {file = \"tomli-2.0.1.tar.gz\", hash = \"sha256:de526c12914f0c550d15924c62d72abc48d6fe7364aa87328337a31007fe8a4f\"},\n]\ntomlkit = [\n    {file = \"tomlkit-0.11.1-py3-none-any.whl\", hash = \"sha256:1c5bebdf19d5051e2e1de6cf70adfc5948d47221f097fcff7a3ffc91e953eaf5\"},\n    {file = \"tomlkit-0.11.1.tar.gz\", hash = \"sha256:61901f81ff4017951119cd0d1ed9b7af31c821d6845c8c477587bbdcd5e5854e\"},\n]\ntyping-extensions = [\n    {file = \"typing_extensions-4.3.0-py3-none-any.whl\", hash = \"sha256:25642c956049920a5aa49edcdd6ab1e06d7e5d467fc00e0506c44ac86fbfca02\"},\n    {file = \"typing_extensions-4.3.0.tar.gz\", hash = \"sha256:e6d2677a32f47fc7eb2795db1dd15c1f34eff616bcaf2cfb5e997f854fa1c4a6\"},\n]\ntzdata = [\n    {file = \"tzdata-2022.1-py2.py3-none-any.whl\", hash = \"sha256:238e70234214138ed7b4e8a0fab0e5e13872edab3be586ab8198c407620e2ab9\"},\n    {file = \"tzdata-2022.1.tar.gz\", hash = \"sha256:8b536a8ec63dc0751342b3984193a3118f8fca2afe25752bb9b7fffd398552d3\"},\n]\ntzlocal = [\n    {file = \"tzlocal-4.2-py3-none-any.whl\", hash = \"sha256:89885494684c929d9191c57aa27502afc87a579be5cdd3225c77c463ea043745\"},\n    {file = \"tzlocal-4.2.tar.gz\", hash = \"sha256:ee5842fa3a795f023514ac2d801c4a81d1743bbe642e3940143326b3a00addd7\"},\n]\nujson = [\n    {file = \"ujson-5.4.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:511aa641a5b91d19280183b134fb6c473039d4dd82e987ac810cffba783521ac\"},\n    {file = \"ujson-5.4.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:b045ca5497a950cc3492840adb3bcb3b9e305ed6599ed14c6aeaa08011aa463f\"},\n    {file = \"ujson-5.4.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:aa00b746138835271653b0c3da171d2a8b510c579381f71e8b8e03484d50d825\"},\n    {file = \"ujson-5.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:91edcf9978ee401119e9c8589376ae37fd3e6e75ee365c49385cb005eaff1535\"},\n    {file = \"ujson-5.4.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:05e411627e5d6ee773232960ca7307e66017f78e3fa74f7e95c3a8cc5cb05415\"},\n    {file = \"ujson-5.4.0-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:7d4c9ccd30e621e714ec24ca911ad8873567dc1ac1e5e914405ea9dd16b9d40c\"},\n    {file = \"ujson-5.4.0-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:dd0d4ec694cab8a0a4d85f45f81ae0065465c4670f0db72ba48d6c4e7ae42834\"},\n    {file = \"ujson-5.4.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:aaa77af91df3f71858a1f792c74d3f2d3abf3875f93ab1a2b9a24b3797743b02\"},\n    {file = \"ujson-5.4.0-cp310-cp310-win32.whl\", hash = \"sha256:fbea46c0fbc1c3bc8f957afd8dbb25b4ea3a356e18ee6dd79ace6cf32bd4cff7\"},\n    {file = \"ujson-5.4.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:2d98248f1df1e1aab67e0374ab98945dd36bc1764753d71fd8aea5f296360b76\"},\n    {file = \"ujson-5.4.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:f5c547d49a7e9d3f231e9323171bbbbcef63173fb007a2787cd4f05ac6269315\"},\n    {file = \"ujson-5.4.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:39bb702ca1612253b5e4b6004e0f20208c98a446606aa351f9a7ba5ceaff0eb8\"},\n    {file = \"ujson-5.4.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:381c97d326d1ec569d318cc0ae83940ea2df125ede1000871680fefd5b7fdea9\"},\n    {file = \"ujson-5.4.0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:3a0707f381f97e1287c0dbf94d95bd6c0bbf6e4eeeaa656f0076b7883010c818\"},\n    {file = \"ujson-5.4.0-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:6a20f2f6e8818c1ab89dd4be6bbad3fc2ddb15287f89e7ea35f3eb849afebbd9\"},\n    {file = \"ujson-5.4.0-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:8cd6117e33233f2de6bc896eea6a5a59b58a37db08f371157264e0ec5e51c76a\"},\n    {file = \"ujson-5.4.0-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:31bdb6d771d5ef6d37134b42211500bfe176c55d399f3317e569783dc42ed38e\"},\n    {file = \"ujson-5.4.0-cp37-cp37m-win32.whl\", hash = \"sha256:baa76a6f707a6d22437fe9c7ec9719672fb04d4d9435a3e80ee9b1aaeb2089d9\"},\n    {file = \"ujson-5.4.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:ee29cf5cfc1e841708297633e1ce749aa851fb96830bbe51f2e5940741ff2441\"},\n    {file = \"ujson-5.4.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:7e12272361e9722777c83b3f5b0bb91d402531f36e80c6e5fafb6acb89e897e3\"},\n    {file = \"ujson-5.4.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:3212847d3885bfd4f5fd56cdc37645a8f8e8a80d6cb569505da22fd9eb0e1a02\"},\n    {file = \"ujson-5.4.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0bcde3135265ecdd5714a7de4fdc167925390d7b17ca325e59980f4114c962b8\"},\n    {file = \"ujson-5.4.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0551c1ba0bc9e05b69d9c18266dbc93252b5fa3cd9940051bc88a0dd33607b19\"},\n    {file = \"ujson-5.4.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:13297a7d501f9c8c53e409d4fa57cc574e4fbfbe8807ef2c4c7ce2e3ec933a85\"},\n    {file = \"ujson-5.4.0-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:2974b17bc522ef86d98b498959d82f03c02e07d9eb08746026415298f4a4bca3\"},\n    {file = \"ujson-5.4.0-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:5df8b6369ee5ee2685fcc917f6c46b34e599c6e9a512fada6dfd752b909fa06a\"},\n    {file = \"ujson-5.4.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:754f422aba8db8201a1073f25e2f732effc6471f8755708b16e6ebf19dd23634\"},\n    {file = \"ujson-5.4.0-cp38-cp38-win32.whl\", hash = \"sha256:ea7fbc540bc04d5b05e5cd54e60ee8745ac665eedf2bad2ba9d12d5c7a7b7d2e\"},\n    {file = \"ujson-5.4.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:8d472efa9c92e1b2933a22d2f1dbd5237087997136b24ac2b913bf4e8be03135\"},\n    {file = \"ujson-5.4.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:e2a9ddb5c6d1427056b8d62a1a172a18ae522b14d9ba5996b8281b09cba87edd\"},\n    {file = \"ujson-5.4.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:1120c8263f7d85e89533a2b46d80cc6def15114772010ede4d197739e111dba6\"},\n    {file = \"ujson-5.4.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:400e4ca8a59f71398e8fa56c4d2d6f535e2a121ddb57284ec15752ffce2dd63a\"},\n    {file = \"ujson-5.4.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e844be0831042aa91e847e5ab03bddd1089ab1a8dd0a1bf90411abf864f058b2\"},\n    {file = \"ujson-5.4.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:0b46aee21e5d75426c4058dfdb42f7e7b1d130c664ee5027a8dbbc50872dc32b\"},\n    {file = \"ujson-5.4.0-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:326a96324ed9215b0bc9f1a5af324fb33900b6b0901516bcc421475d6596de0d\"},\n    {file = \"ujson-5.4.0-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:fd82932aaa224abd7d01e823b77aef9970f5ac1695027331d99e7f5fda9d37f5\"},\n    {file = \"ujson-5.4.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:8cce79ce47c37132373fbdf55b683883c262a3a60763130e080b8394c1201d32\"},\n    {file = \"ujson-5.4.0-cp39-cp39-win32.whl\", hash = \"sha256:191f88d5865740497b9827ef9b7c12f37a79872ac984e09f0901a10024019380\"},\n    {file = \"ujson-5.4.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:68c7f753aec490c6566fd3cd301887c413ac3a588316e446f30a4134ac665668\"},\n    {file = \"ujson-5.4.0-pp37-pypy37_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:1a2e645325f844f9c890c9d956fc2d35ca91f38c857278238ef6516c2f99cf7c\"},\n    {file = \"ujson-5.4.0-pp37-pypy37_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:cec010d318a0238b1333ea9f40d5603d374cc026c29c4471e2661712c6682da1\"},\n    {file = \"ujson-5.4.0-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b40a3757a563ef77c3f2f9ea1732c2924e8b3b2bda3fa89513f949472ad40b6e\"},\n    {file = \"ujson-5.4.0-pp37-pypy37_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:67f4e2fa81e1d99c01e7b1978ab0cbf3c9a8b663f683a709f87baad110d5b940\"},\n    {file = \"ujson-5.4.0-pp37-pypy37_pp73-win_amd64.whl\", hash = \"sha256:9ae1d0094ce730e39e09656bc14074d9573cdd80adec1a55b06d8bf1f9613a01\"},\n    {file = \"ujson-5.4.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:784dbd12925845a3f0757a956447e2fd31418abb5aeaebf3aca1203195f16fd1\"},\n    {file = \"ujson-5.4.0-pp38-pypy38_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:422653083c6df6cec17fdb5d6106c209aad9b0c94131c53b073980403db22167\"},\n    {file = \"ujson-5.4.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e91947fda8354ea7faf698b084ebcdbabd239e7b15d8436fb74394f59a207ac9\"},\n    {file = \"ujson-5.4.0-pp38-pypy38_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ef985eb2770900a485431910bd3f333b56d1a34b65f8c26a6ed8e8adf55f98d9\"},\n    {file = \"ujson-5.4.0-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:025758cf6561af6986d77cd4af9367ab56dde5c7c50f13f59e6964b4b25df73e\"},\n    {file = \"ujson-5.4.0.tar.gz\", hash = \"sha256:6b953e09441e307504130755e5bd6b15850178d591f66292bba4608c4f7f9b00\"},\n]\nuvicorn = [\n    {file = \"uvicorn-0.17.6-py3-none-any.whl\", hash = \"sha256:19e2a0e96c9ac5581c01eb1a79a7d2f72bb479691acd2b8921fce48ed5b961a6\"},\n    {file = \"uvicorn-0.17.6.tar.gz\", hash = \"sha256:5180f9d059611747d841a4a4c4ab675edf54c8489e97f96d0583ee90ac3bfc23\"},\n]\nuvloop = [\n    {file = \"uvloop-0.16.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:6224f1401025b748ffecb7a6e2652b17768f30b1a6a3f7b44660e5b5b690b12d\"},\n    {file = \"uvloop-0.16.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:30ba9dcbd0965f5c812b7c2112a1ddf60cf904c1c160f398e7eed3a6b82dcd9c\"},\n    {file = \"uvloop-0.16.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:bd53f7f5db562f37cd64a3af5012df8cac2c464c97e732ed556800129505bd64\"},\n    {file = \"uvloop-0.16.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:772206116b9b57cd625c8a88f2413df2fcfd0b496eb188b82a43bed7af2c2ec9\"},\n    {file = \"uvloop-0.16.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:b572256409f194521a9895aef274cea88731d14732343da3ecdb175228881638\"},\n    {file = \"uvloop-0.16.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:04ff57aa137230d8cc968f03481176041ae789308b4d5079118331ab01112450\"},\n    {file = \"uvloop-0.16.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3a19828c4f15687675ea912cc28bbcb48e9bb907c801873bd1519b96b04fb805\"},\n    {file = \"uvloop-0.16.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:e814ac2c6f9daf4c36eb8e85266859f42174a4ff0d71b99405ed559257750382\"},\n    {file = \"uvloop-0.16.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:bd8f42ea1ea8f4e84d265769089964ddda95eb2bb38b5cbe26712b0616c3edee\"},\n    {file = \"uvloop-0.16.0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:647e481940379eebd314c00440314c81ea547aa636056f554d491e40503c8464\"},\n    {file = \"uvloop-0.16.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8e0d26fa5875d43ddbb0d9d79a447d2ace4180d9e3239788208527c4784f7cab\"},\n    {file = \"uvloop-0.16.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:6ccd57ae8db17d677e9e06192e9c9ec4bd2066b77790f9aa7dede2cc4008ee8f\"},\n    {file = \"uvloop-0.16.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:089b4834fd299d82d83a25e3335372f12117a7d38525217c2258e9b9f4578897\"},\n    {file = \"uvloop-0.16.0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:98d117332cc9e5ea8dfdc2b28b0a23f60370d02e1395f88f40d1effd2cb86c4f\"},\n    {file = \"uvloop-0.16.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1e5f2e2ff51aefe6c19ee98af12b4ae61f5be456cd24396953244a30880ad861\"},\n    {file = \"uvloop-0.16.0.tar.gz\", hash = \"sha256:f74bc20c7b67d1c27c72601c78cf95be99d5c2cdd4514502b4f3eb0933ff1228\"},\n]\nwatchgod = [\n    {file = \"watchgod-0.8.2-py3-none-any.whl\", hash = \"sha256:2f3e8137d98f493ff58af54ea00f4d1433a6afe2ed08ab331a657df468c6bfce\"},\n    {file = \"watchgod-0.8.2.tar.gz\", hash = \"sha256:cb11ff66657befba94d828e3b622d5fb76f22fbda1376f355f3e6e51e97d9450\"},\n]\nwebsockets = [\n    {file = \"websockets-10.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:38db6e2163b021642d0a43200ee2dec8f4980bdbda96db54fde72b283b54cbfc\"},\n    {file = \"websockets-10.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:e1b60fd297adb9fc78375778a5220da7f07bf54d2a33ac781319650413fc6a60\"},\n    {file = \"websockets-10.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:3477146d1f87ead8df0f27e8960249f5248dceb7c2741e8bbec9aa5338d0c053\"},\n    {file = \"websockets-10.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bb01ea7b5f52e7125bdc3c5807aeaa2d08a0553979cf2d96a8b7803ea33e15e7\"},\n    {file = \"websockets-10.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:9fd62c6dc83d5d35fb6a84ff82ec69df8f4657fff05f9cd6c7d9bec0dd57f0f6\"},\n    {file = \"websockets-10.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:3bbf080f3892ba1dc8838786ec02899516a9d227abe14a80ef6fd17d4fb57127\"},\n    {file = \"websockets-10.1-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:5560558b0dace8312c46aa8915da977db02738ac8ecffbc61acfbfe103e10155\"},\n    {file = \"websockets-10.1-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:667c41351a6d8a34b53857ceb8343a45c85d438ee4fd835c279591db8aeb85be\"},\n    {file = \"websockets-10.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:468f0031fdbf4d643f89403a66383247eb82803430b14fa27ce2d44d2662ca37\"},\n    {file = \"websockets-10.1-cp310-cp310-win32.whl\", hash = \"sha256:d0d81b46a5c87d443e40ce2272436da8e6092aa91f5fbeb60d1be9f11eff5b4c\"},\n    {file = \"websockets-10.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:b68b6caecb9a0c6db537aa79750d1b592a841e4f1a380c6196091e65b2ad35f9\"},\n    {file = \"websockets-10.1-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:a249139abc62ef333e9e85064c27fefb113b16ffc5686cefc315bdaef3eefbc8\"},\n    {file = \"websockets-10.1-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8877861e3dee38c8d302eee0d5dbefa6663de3b46dc6a888f70cd7e82562d1f7\"},\n    {file = \"websockets-10.1-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:e3872ae57acd4306ecf937d36177854e218e999af410a05c17168cd99676c512\"},\n    {file = \"websockets-10.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:b66e6d514f12c28d7a2d80bb2a48ef223342e99c449782d9831b0d29a9e88a17\"},\n    {file = \"websockets-10.1-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:9f304a22ece735a3da8a51309bc2c010e23961a8f675fae46fdf62541ed62123\"},\n    {file = \"websockets-10.1-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:189ed478395967d6a98bb293abf04e8815349e17456a0a15511f1088b6cb26e4\"},\n    {file = \"websockets-10.1-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:08a42856158307e231b199671c4fce52df5786dd3d703f36b5d8ac76b206c485\"},\n    {file = \"websockets-10.1-cp37-cp37m-win32.whl\", hash = \"sha256:3ef6f73854cded34e78390dbdf40dfdcf0b89b55c0e282468ef92646fce8d13a\"},\n    {file = \"websockets-10.1-cp37-cp37m-win_amd64.whl\", hash = \"sha256:89e985d40d407545d5f5e2e58e1fdf19a22bd2d8cd54d20a882e29f97e930a0a\"},\n    {file = \"websockets-10.1-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:002071169d2e44ce8eb9e5ebac9fbce142ba4b5146eef1cfb16b177a27662657\"},\n    {file = \"websockets-10.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:cfae282c2aa7f0c4be45df65c248481f3509f8c40ca8b15ed96c35668ae0ff69\"},\n    {file = \"websockets-10.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:97b4b68a2ddaf5c4707ae79c110bfd874c5be3c6ac49261160fb243fa45d8bbb\"},\n    {file = \"websockets-10.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7c9407719f42cb77049975410490c58a705da6af541adb64716573e550e5c9db\"},\n    {file = \"websockets-10.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:1d858fb31e5ac992a2cdf17e874c95f8a5b1e917e1fb6b45ad85da30734b223f\"},\n    {file = \"websockets-10.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:7bdd3d26315db0a9cf8a0af30ca95e0aa342eda9c1377b722e71ccd86bc5d1dd\"},\n    {file = \"websockets-10.1-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:e259be0863770cb91b1a6ccf6907f1ac2f07eff0b7f01c249ed751865a70cb0d\"},\n    {file = \"websockets-10.1-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:6b014875fae19577a392372075e937ebfebf53fd57f613df07b35ab210f31534\"},\n    {file = \"websockets-10.1-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:98de71f86bdb29430fd7ba9997f47a6b10866800e3ea577598a786a785701bb0\"},\n    {file = \"websockets-10.1-cp38-cp38-win32.whl\", hash = \"sha256:3a02ab91d84d9056a9ee833c254895421a6333d7ae7fff94b5c68e4fa8095519\"},\n    {file = \"websockets-10.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:7d6673b2753f9c5377868a53445d0c321ef41ff3c8e3b6d57868e72054bfce5f\"},\n    {file = \"websockets-10.1-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:ddab2dc69ee5ae27c74dbfe9d7bb6fee260826c136dca257faa1a41d1db61a89\"},\n    {file = \"websockets-10.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:14e9cf68a08d1a5d42109549201aefba473b1d925d233ae19035c876dd845da9\"},\n    {file = \"websockets-10.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:e4819c6fb4f336fd5388372cb556b1f3a165f3f68e66913d1a2fc1de55dc6f58\"},\n    {file = \"websockets-10.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:05e7f098c76b0a4743716590bb8f9706de19f1ef5148d61d0cf76495ec3edb9c\"},\n    {file = \"websockets-10.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:5bb6256de5a4fb1d42b3747b4e2268706c92965d75d0425be97186615bf2f24f\"},\n    {file = \"websockets-10.1-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:888a5fa2a677e0c2b944f9826c756475980f1b276b6302e606f5c4ff5635be9e\"},\n    {file = \"websockets-10.1-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:6fdec1a0b3e5630c58e3d8704d2011c678929fce90b40908c97dfc47de8dca72\"},\n    {file = \"websockets-10.1-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:531d8eb013a9bc6b3ad101588182aa9b6dd994b190c56df07f0d84a02b85d530\"},\n    {file = \"websockets-10.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:0d93b7cadc761347d98da12ec1930b5c71b2096f1ceed213973e3cda23fead9c\"},\n    {file = \"websockets-10.1-cp39-cp39-win32.whl\", hash = \"sha256:d9b245db5a7e64c95816e27d72830e51411c4609c05673d1ae81eb5d23b0be54\"},\n    {file = \"websockets-10.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:882c0b8bdff3bf1bd7f024ce17c6b8006042ec4cceba95cf15df57e57efa471c\"},\n    {file = \"websockets-10.1-pp37-pypy37_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:10edd9d7d3581cfb9ff544ac09fc98cab7ee8f26778a5a8b2d5fd4b0684c5ba5\"},\n    {file = \"websockets-10.1-pp37-pypy37_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:baa83174390c0ff4fc1304fbe24393843ac7a08fdd59295759c4b439e06b1536\"},\n    {file = \"websockets-10.1-pp37-pypy37_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:483edee5abed738a0b6a908025be47f33634c2ad8e737edd03ffa895bd600909\"},\n    {file = \"websockets-10.1-pp37-pypy37_pp73-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:816ae7dac2c6522cfa620947ead0ca95ac654916eebf515c94d7c28de5601a6e\"},\n    {file = \"websockets-10.1-pp37-pypy37_pp73-win_amd64.whl\", hash = \"sha256:1dafe98698ece09b8ccba81b910643ff37198e43521d977be76caf37709cf62b\"},\n    {file = \"websockets-10.1.tar.gz\", hash = \"sha256:181d2b25de5a437b36aefedaf006ecb6fa3aa1328ec0236cdde15f32f9d3ff6d\"},\n]\nwin32-setctime = [\n    {file = \"win32_setctime-1.1.0-py3-none-any.whl\", hash = \"sha256:231db239e959c2fe7eb1d7dc129f11172354f98361c4fa2d6d2d7e278baa8aad\"},\n    {file = \"win32_setctime-1.1.0.tar.gz\", hash = \"sha256:15cf5750465118d6929ae4de4eb46e8edae9a5634350c01ba582df868e932cb2\"},\n]\nwordcloud = [\n    {file = \"wordcloud-1.8.2.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:2a90f512c1c3c2a483d9d12b06a80124cecf813ec7a49b328dce6181c5440f2d\"},\n    {file = \"wordcloud-1.8.2.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e6376f09543416d03844313d7e6e39eb0a42547e07001ac50be93fbd4c6c4431\"},\n    {file = \"wordcloud-1.8.2.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:334318eb345eafc3494d81fbbe11823fc945833e6a77cf05c7a6a1b88c1e1db0\"},\n    {file = \"wordcloud-1.8.2.2-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:c162814bc0ca2f1436e553ef8c451009c689f5a3f04be8acb5f1df7389b2dbc2\"},\n    {file = \"wordcloud-1.8.2.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:66bd735eb869a769806154067da01ecaeb4ce165d3c523c306e8ea7d376a1706\"},\n    {file = \"wordcloud-1.8.2.2-cp310-cp310-win32.whl\", hash = \"sha256:7344df98ea8556a4f8e12924cf0b2e2d7055b1565440fd0c2a453c2b7e1e240b\"},\n    {file = \"wordcloud-1.8.2.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:bc2974162313e3702cfd314401c943bb94add4ae64a4d7d4ecdf93863133b5e1\"},\n    {file = \"wordcloud-1.8.2.2-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:90174d2154d554e186e4db14121315bb0e2cb4b0c88d0ca0f8f99831f672cfea\"},\n    {file = \"wordcloud-1.8.2.2-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:948a947960ce688088e7617c9f82c26a0992c1e4e28a4de1f9a0afa736102556\"},\n    {file = \"wordcloud-1.8.2.2-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:52acd837fdd26239352f77be1491148b36e77f3c31ce7a9fe232664bfadd1a2c\"},\n    {file = \"wordcloud-1.8.2.2-cp36-cp36m-musllinux_1_1_i686.whl\", hash = \"sha256:a17055e10baee8e5f19d2b72c474d59dfb45660f66b92d3468fef44f0cc67b37\"},\n    {file = \"wordcloud-1.8.2.2-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:7b0a7e43b961ea7be13d7d7397fd131f8e795e1b36a23fdcab914a14d7c50def\"},\n    {file = \"wordcloud-1.8.2.2-cp36-cp36m-win32.whl\", hash = \"sha256:3d4da63b8f315caf3f715b23ab0a05d43139b9395e5e78b7e12b7ed2701d3a8e\"},\n    {file = \"wordcloud-1.8.2.2-cp36-cp36m-win_amd64.whl\", hash = \"sha256:ccd027f089df42d9d99f0a2d227823f1248d49826b82dc942e6066a16b825d99\"},\n    {file = \"wordcloud-1.8.2.2-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:61b292af5d88e719a641bb832280b81902df24a39936e6cf87ae0b6ea7910262\"},\n    {file = \"wordcloud-1.8.2.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:43a71a15ac8f721f425d1030633f26a8037ddb767fe9bb45647fe5ed94b92eda\"},\n    {file = \"wordcloud-1.8.2.2-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:14f7d34c25ddad412fac32760bd5d6d1565a98821f6dd021cf6617203b0db5ae\"},\n    {file = \"wordcloud-1.8.2.2-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:cf81862e9ff7c7abca1fb883ee60d3274b1ce1b30f99cd07cc29c5f5d95cbab8\"},\n    {file = \"wordcloud-1.8.2.2-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:3639eeb7c8b09f71376c6369277fb78d2dd8c96648034c3c25ee0f34f3e9249c\"},\n    {file = \"wordcloud-1.8.2.2-cp37-cp37m-win32.whl\", hash = \"sha256:d2a966bdebdb4eab57ce4ce9a31e96b8772c0e5c46f7e334cb2e8afa59297d8a\"},\n    {file = \"wordcloud-1.8.2.2-cp37-cp37m-win_amd64.whl\", hash = \"sha256:b8fc88ce6bd9edb514473f10ea4fb14ef78fbd5266b56a614939c5a8a0256283\"},\n    {file = \"wordcloud-1.8.2.2-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:9595200d2e30ba161f585dfc5bf568010e76adc7c7bbc5d7149f0bf3b96996aa\"},\n    {file = \"wordcloud-1.8.2.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5b6573eaab49a3682822ea7208077ed5b81210daa3ddb41a9d4879f9803d7b6b\"},\n    {file = \"wordcloud-1.8.2.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:55f6416f9958042fe92d751962a3dfd83e583828504d9f6e8f886e034b3354d0\"},\n    {file = \"wordcloud-1.8.2.2-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:4580f1cbf42b3a0565b140d580d6e249230373b8fa31e4491620af1caec45e92\"},\n    {file = \"wordcloud-1.8.2.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:3e3f01635def27b971f178b8bc3438f3be09d91f72ab3b51b90a1ae16e4028d8\"},\n    {file = \"wordcloud-1.8.2.2-cp38-cp38-win32.whl\", hash = \"sha256:b4e4dcd8c1c2483c2c45082d1e9cd600924d84b52154324cce5579a3dac33c46\"},\n    {file = \"wordcloud-1.8.2.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:31c09d77a01b3d5638f2e0e043cfcb0d90f1c8b4d12864132e1d421dc525467f\"},\n    {file = \"wordcloud-1.8.2.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:f6377f570838661ade045793e100f506a4e1f92ddac23455470a03617e30d2a8\"},\n    {file = \"wordcloud-1.8.2.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3b50378e7cb7b9a1990ff3a10dfcad968185a1fbfd99de68c436245bbd5cd669\"},\n    {file = \"wordcloud-1.8.2.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d76e1939ca45907dcdf8b17fd64d5a392534f42a90b6194e806f08b65ed73948\"},\n    {file = \"wordcloud-1.8.2.2-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:c70fd9ff86a4370d0ba9aede977440635a859b3c6a86693e178f2ecb4369e153\"},\n    {file = \"wordcloud-1.8.2.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:c1fa72f4f94d7236eb6a1a86cfcfa6df292411047320c8deb173cac379a87c2a\"},\n    {file = \"wordcloud-1.8.2.2-cp39-cp39-win32.whl\", hash = \"sha256:55224971bd7c3ba2a1038dd5aefa0559b3a320bf6f0b864c0469db5dfa7d587b\"},\n    {file = \"wordcloud-1.8.2.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:a3e6c77da50d1f5263281c72db8c2cf5893b2dd624ce684910b7830eb7069163\"},\n    {file = \"wordcloud-1.8.2.2-pp37-pypy37_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:be045984d2cdb4f181c7aff24001a97ade10d04b1098ac5c859748e2802263f4\"},\n    {file = \"wordcloud-1.8.2.2-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:15da7c4ff531b19527fb605da11e747d418a4d81d78503c34fb11babf3196b7a\"},\n    {file = \"wordcloud-1.8.2.2-pp37-pypy37_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:dd6d3f253f163ce21f6efc2cc675caf16ce474977de925b0adcdae9b97fe8659\"},\n    {file = \"wordcloud-1.8.2.2-pp37-pypy37_pp73-win_amd64.whl\", hash = \"sha256:47f329426a0952a4509d4d0c8b84867f8d11e65cb81ee852ebcfad588598cda8\"},\n    {file = \"wordcloud-1.8.2.2-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:001a0b4483fe4ec26302b306c1590a4c44a99483c2da8232012ac62177296594\"},\n    {file = \"wordcloud-1.8.2.2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d512c9867a43cbbfa51661ea2d7e3e84c4309ef29ee1be3e10b64f9d3353bd70\"},\n    {file = \"wordcloud-1.8.2.2-pp38-pypy38_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c887681e9353e559f25421bfd3b358990ae80ed77c42f28eed810ab180047578\"},\n    {file = \"wordcloud-1.8.2.2-pp38-pypy38_pp73-win_amd64.whl\", hash = \"sha256:aa0ddb25cde58232131072870f139d6c737d74d7a3b6a80fcb9721f3b9b2e7bb\"},\n    {file = \"wordcloud-1.8.2.2-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:16ed864495573094e5b64f424d66d9030a638569182ad7c5b2c8e11ab78a2541\"},\n    {file = \"wordcloud-1.8.2.2-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:19c444200056b3d75b5d84a6cc018d6491da1841462546663ea3a88300db03f1\"},\n    {file = \"wordcloud-1.8.2.2-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1dc69a57a349272119ae633b8d6bcc9cde600aeb4342261e12ce169badcd28ca\"},\n    {file = \"wordcloud-1.8.2.2-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:3c39bd66f172f56257f09cec8fe246cd11ef36e9e16eeabe88933788d983c6a1\"},\n    {file = \"wordcloud-1.8.2.2.tar.gz\", hash = \"sha256:523db887e47e840eb5c2e60428243bb1d7439fdc60f89626b17bafa1be64459c\"},\n]\nyarl = [\n    {file = \"yarl-1.7.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f2a8508f7350512434e41065684076f640ecce176d262a7d54f0da41d99c5a95\"},\n    {file = \"yarl-1.7.2-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:da6df107b9ccfe52d3a48165e48d72db0eca3e3029b5b8cb4fe6ee3cb870ba8b\"},\n    {file = \"yarl-1.7.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:a1d0894f238763717bdcfea74558c94e3bc34aeacd3351d769460c1a586a8b05\"},\n    {file = \"yarl-1.7.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:dfe4b95b7e00c6635a72e2d00b478e8a28bfb122dc76349a06e20792eb53a523\"},\n    {file = \"yarl-1.7.2-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:c145ab54702334c42237a6c6c4cc08703b6aa9b94e2f227ceb3d477d20c36c63\"},\n    {file = \"yarl-1.7.2-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:1ca56f002eaf7998b5fcf73b2421790da9d2586331805f38acd9997743114e98\"},\n    {file = \"yarl-1.7.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:1d3d5ad8ea96bd6d643d80c7b8d5977b4e2fb1bab6c9da7322616fd26203d125\"},\n    {file = \"yarl-1.7.2-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:167ab7f64e409e9bdd99333fe8c67b5574a1f0495dcfd905bc7454e766729b9e\"},\n    {file = \"yarl-1.7.2-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:95a1873b6c0dd1c437fb3bb4a4aaa699a48c218ac7ca1e74b0bee0ab16c7d60d\"},\n    {file = \"yarl-1.7.2-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:6152224d0a1eb254f97df3997d79dadd8bb2c1a02ef283dbb34b97d4f8492d23\"},\n    {file = \"yarl-1.7.2-cp310-cp310-musllinux_1_1_ppc64le.whl\", hash = \"sha256:5bb7d54b8f61ba6eee541fba4b83d22b8a046b4ef4d8eb7f15a7e35db2e1e245\"},\n    {file = \"yarl-1.7.2-cp310-cp310-musllinux_1_1_s390x.whl\", hash = \"sha256:9c1f083e7e71b2dd01f7cd7434a5f88c15213194df38bc29b388ccdf1492b739\"},\n    {file = \"yarl-1.7.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:f44477ae29025d8ea87ec308539f95963ffdc31a82f42ca9deecf2d505242e72\"},\n    {file = \"yarl-1.7.2-cp310-cp310-win32.whl\", hash = \"sha256:cff3ba513db55cc6a35076f32c4cdc27032bd075c9faef31fec749e64b45d26c\"},\n    {file = \"yarl-1.7.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:c9c6d927e098c2d360695f2e9d38870b2e92e0919be07dbe339aefa32a090265\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:9b4c77d92d56a4c5027572752aa35082e40c561eec776048330d2907aead891d\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c01a89a44bb672c38f42b49cdb0ad667b116d731b3f4c896f72302ff77d71656\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:c19324a1c5399b602f3b6e7db9478e5b1adf5cf58901996fc973fe4fccd73eed\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3abddf0b8e41445426d29f955b24aeecc83fa1072be1be4e0d194134a7d9baee\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:6a1a9fe17621af43e9b9fcea8bd088ba682c8192d744b386ee3c47b56eaabb2c\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:8b0915ee85150963a9504c10de4e4729ae700af11df0dc5550e6587ed7891e92\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-musllinux_1_1_aarch64.whl\", hash = \"sha256:29e0656d5497733dcddc21797da5a2ab990c0cb9719f1f969e58a4abac66234d\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-musllinux_1_1_i686.whl\", hash = \"sha256:bf19725fec28452474d9887a128e98dd67eee7b7d52e932e6949c532d820dc3b\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-musllinux_1_1_ppc64le.whl\", hash = \"sha256:d6f3d62e16c10e88d2168ba2d065aa374e3c538998ed04996cd373ff2036d64c\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-musllinux_1_1_s390x.whl\", hash = \"sha256:ac10bbac36cd89eac19f4e51c032ba6b412b3892b685076f4acd2de18ca990aa\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-musllinux_1_1_x86_64.whl\", hash = \"sha256:aa32aaa97d8b2ed4e54dc65d241a0da1c627454950f7d7b1f95b13985afd6c5d\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-win32.whl\", hash = \"sha256:87f6e082bce21464857ba58b569370e7b547d239ca22248be68ea5d6b51464a1\"},\n    {file = \"yarl-1.7.2-cp36-cp36m-win_amd64.whl\", hash = \"sha256:ac35ccde589ab6a1870a484ed136d49a26bcd06b6a1c6397b1967ca13ceb3913\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:a467a431a0817a292121c13cbe637348b546e6ef47ca14a790aa2fa8cc93df63\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6ab0c3274d0a846840bf6c27d2c60ba771a12e4d7586bf550eefc2df0b56b3b4\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:d260d4dc495c05d6600264a197d9d6f7fc9347f21d2594926202fd08cf89a8ba\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:fc4dd8b01a8112809e6b636b00f487846956402834a7fd59d46d4f4267181c41\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:c1164a2eac148d85bbdd23e07dfcc930f2e633220f3eb3c3e2a25f6148c2819e\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:67e94028817defe5e705079b10a8438b8cb56e7115fa01640e9c0bb3edf67332\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:89ccbf58e6a0ab89d487c92a490cb5660d06c3a47ca08872859672f9c511fc52\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:8cce6f9fa3df25f55521fbb5c7e4a736683148bcc0c75b21863789e5185f9185\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-musllinux_1_1_ppc64le.whl\", hash = \"sha256:211fcd65c58bf250fb994b53bc45a442ddc9f441f6fec53e65de8cba48ded986\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-musllinux_1_1_s390x.whl\", hash = \"sha256:c10ea1e80a697cf7d80d1ed414b5cb8f1eec07d618f54637067ae3c0334133c4\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:52690eb521d690ab041c3919666bea13ab9fbff80d615ec16fa81a297131276b\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-win32.whl\", hash = \"sha256:695ba021a9e04418507fa930d5f0704edbce47076bdcfeeaba1c83683e5649d1\"},\n    {file = \"yarl-1.7.2-cp37-cp37m-win_amd64.whl\", hash = \"sha256:c17965ff3706beedafd458c452bf15bac693ecd146a60a06a214614dc097a271\"},\n    {file = \"yarl-1.7.2-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:fce78593346c014d0d986b7ebc80d782b7f5e19843ca798ed62f8e3ba8728576\"},\n    {file = \"yarl-1.7.2-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:c2a1ac41a6aa980db03d098a5531f13985edcb451bcd9d00670b03129922cd0d\"},\n    {file = \"yarl-1.7.2-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:39d5493c5ecd75c8093fa7700a2fb5c94fe28c839c8e40144b7ab7ccba6938c8\"},\n    {file = \"yarl-1.7.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1eb6480ef366d75b54c68164094a6a560c247370a68c02dddb11f20c4c6d3c9d\"},\n    {file = \"yarl-1.7.2-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5ba63585a89c9885f18331a55d25fe81dc2d82b71311ff8bd378fc8004202ff6\"},\n    {file = \"yarl-1.7.2-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:e39378894ee6ae9f555ae2de332d513a5763276a9265f8e7cbaeb1b1ee74623a\"},\n    {file = \"yarl-1.7.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:c0910c6b6c31359d2f6184828888c983d54d09d581a4a23547a35f1d0b9484b1\"},\n    {file = \"yarl-1.7.2-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:6feca8b6bfb9eef6ee057628e71e1734caf520a907b6ec0d62839e8293e945c0\"},\n    {file = \"yarl-1.7.2-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:8300401dc88cad23f5b4e4c1226f44a5aa696436a4026e456fe0e5d2f7f486e6\"},\n    {file = \"yarl-1.7.2-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:788713c2896f426a4e166b11f4ec538b5736294ebf7d5f654ae445fd44270832\"},\n    {file = \"yarl-1.7.2-cp38-cp38-musllinux_1_1_ppc64le.whl\", hash = \"sha256:fd547ec596d90c8676e369dd8a581a21227fe9b4ad37d0dc7feb4ccf544c2d59\"},\n    {file = \"yarl-1.7.2-cp38-cp38-musllinux_1_1_s390x.whl\", hash = \"sha256:737e401cd0c493f7e3dd4db72aca11cfe069531c9761b8ea474926936b3c57c8\"},\n    {file = \"yarl-1.7.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:baf81561f2972fb895e7844882898bda1eef4b07b5b385bcd308d2098f1a767b\"},\n    {file = \"yarl-1.7.2-cp38-cp38-win32.whl\", hash = \"sha256:ede3b46cdb719c794427dcce9d8beb4abe8b9aa1e97526cc20de9bd6583ad1ef\"},\n    {file = \"yarl-1.7.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:cc8b7a7254c0fc3187d43d6cb54b5032d2365efd1df0cd1749c0c4df5f0ad45f\"},\n    {file = \"yarl-1.7.2-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:580c1f15500e137a8c37053e4cbf6058944d4c114701fa59944607505c2fe3a0\"},\n    {file = \"yarl-1.7.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:3ec1d9a0d7780416e657f1e405ba35ec1ba453a4f1511eb8b9fbab81cb8b3ce1\"},\n    {file = \"yarl-1.7.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:3bf8cfe8856708ede6a73907bf0501f2dc4e104085e070a41f5d88e7faf237f3\"},\n    {file = \"yarl-1.7.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1be4bbb3d27a4e9aa5f3df2ab61e3701ce8fcbd3e9846dbce7c033a7e8136746\"},\n    {file = \"yarl-1.7.2-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:534b047277a9a19d858cde163aba93f3e1677d5acd92f7d10ace419d478540de\"},\n    {file = \"yarl-1.7.2-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c6ddcd80d79c96eb19c354d9dca95291589c5954099836b7c8d29278a7ec0bda\"},\n    {file = \"yarl-1.7.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_12_i686.manylinux2010_i686.whl\", hash = \"sha256:9bfcd43c65fbb339dc7086b5315750efa42a34eefad0256ba114cd8ad3896f4b\"},\n    {file = \"yarl-1.7.2-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\", hash = \"sha256:f64394bd7ceef1237cc604b5a89bf748c95982a84bcd3c4bbeb40f685c810794\"},\n    {file = \"yarl-1.7.2-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:044daf3012e43d4b3538562da94a88fb12a6490652dbc29fb19adfa02cf72eac\"},\n    {file = \"yarl-1.7.2-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:368bcf400247318382cc150aaa632582d0780b28ee6053cd80268c7e72796dec\"},\n    {file = \"yarl-1.7.2-cp39-cp39-musllinux_1_1_ppc64le.whl\", hash = \"sha256:bab827163113177aee910adb1f48ff7af31ee0289f434f7e22d10baf624a6dfe\"},\n    {file = \"yarl-1.7.2-cp39-cp39-musllinux_1_1_s390x.whl\", hash = \"sha256:0cba38120db72123db7c58322fa69e3c0efa933040ffb586c3a87c063ec7cae8\"},\n    {file = \"yarl-1.7.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:59218fef177296451b23214c91ea3aba7858b4ae3306dde120224cfe0f7a6ee8\"},\n    {file = \"yarl-1.7.2-cp39-cp39-win32.whl\", hash = \"sha256:1edc172dcca3f11b38a9d5c7505c83c1913c0addc99cd28e993efeaafdfaa18d\"},\n    {file = \"yarl-1.7.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:797c2c412b04403d2da075fb93c123df35239cd7b4cc4e0cd9e5839b73f52c58\"},\n    {file = \"yarl-1.7.2.tar.gz\", hash = \"sha256:45399b46d60c253327a460e99856752009fcee5f5d3c80b2f7c0cae1c38d56dd\"},\n]\nzhconv = [\n    {file = \"zhconv-1.4.3.tar.gz\", hash = \"sha256:ad42d9057ca0605f8e41d62b67ca797f879f58193ee6840562c51459b2698c45\"},\n]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/poetry.lock b/poetry.lock
--- a/poetry.lock	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/poetry.lock	(date 1663665690887)
@@ -6,6 +6,11 @@
 optional = false
 python-versions = ">=3.6,<4.0"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "aiohttp"
 version = "3.7.4.post0"
@@ -15,16 +20,21 @@
 python-versions = ">=3.6"
 
 [package.dependencies]
-async-timeout = ">=3.0,<4.0"
+async_timeout = ">=3.0,<4.0"
 attrs = ">=17.3.0"
 chardet = ">=2.0,<5.0"
 multidict = ">=4.5,<7.0"
-typing-extensions = ">=3.6.5"
+typing_extensions = ">=3.6.5"
 yarl = ">=1.0,<2.0"
 
 [package.extras]
 speedups = ["aiodns", "brotlipy", "cchardet"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "anyio"
 version = "3.6.1"
@@ -38,10 +48,15 @@
 sniffio = ">=1.1"
 
 [package.extras]
-doc = ["packaging", "sphinx-rtd-theme", "sphinx-autodoc-typehints (>=1.2.0)"]
-test = ["coverage[toml] (>=4.5)", "hypothesis (>=4.0)", "pytest (>=7.0)", "pytest-mock (>=3.6.1)", "trustme", "contextlib2", "uvloop (<0.15)", "mock (>=4)", "uvloop (>=0.15)"]
+doc = ["packaging", "sphinx-autodoc-typehints (>=1.2.0)", "sphinx-rtd-theme"]
+test = ["contextlib2", "coverage[toml] (>=4.5)", "hypothesis (>=4.0)", "mock (>=4)", "pytest (>=7.0)", "pytest-mock (>=3.6.1)", "trustme", "uvloop (<0.15)", "uvloop (>=0.15)"]
 trio = ["trio (>=0.16)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "apscheduler"
 version = "3.9.1"
@@ -52,6 +67,7 @@
 
 [package.dependencies]
 pytz = "*"
+setuptools = ">=0.7"
 six = ">=1.4.0"
 tzlocal = ">=2.0,<3.0.0 || >=4.0.0"
 
@@ -63,11 +79,16 @@
 redis = ["redis (>=3.0)"]
 rethinkdb = ["rethinkdb (>=2.4.0)"]
 sqlalchemy = ["sqlalchemy (>=0.8)"]
-testing = ["pytest", "pytest-cov", "pytest-tornado5", "mock", "pytest-asyncio (<0.6)", "pytest-asyncio"]
+testing = ["mock", "pytest", "pytest-asyncio", "pytest-asyncio (<0.6)", "pytest-cov", "pytest-tornado5"]
 tornado = ["tornado (>=4.3)"]
 twisted = ["twisted"]
 zookeeper = ["kazoo"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "asgiref"
 version = "3.5.2"
@@ -77,7 +98,12 @@
 python-versions = ">=3.7"
 
 [package.extras]
-tests = ["pytest", "pytest-asyncio", "mypy (>=0.800)"]
+tests = ["mypy (>=0.800)", "pytest", "pytest-asyncio"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "async-timeout"
@@ -87,6 +113,11 @@
 optional = false
 python-versions = ">=3.5.3"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "asyncpg"
 version = "0.26.0"
@@ -96,9 +127,14 @@
 python-versions = ">=3.6.0"
 
 [package.extras]
-dev = ["Cython (>=0.29.24,<0.30.0)", "pytest (>=6.0)", "Sphinx (>=4.1.2,<4.2.0)", "sphinxcontrib-asyncio (>=0.3.0,<0.4.0)", "sphinx-rtd-theme (>=0.5.2,<0.6.0)", "pycodestyle (>=2.7.0,<2.8.0)", "flake8 (>=3.9.2,<3.10.0)", "uvloop (>=0.15.3)"]
-docs = ["Sphinx (>=4.1.2,<4.2.0)", "sphinxcontrib-asyncio (>=0.3.0,<0.4.0)", "sphinx-rtd-theme (>=0.5.2,<0.6.0)"]
-test = ["pycodestyle (>=2.7.0,<2.8.0)", "flake8 (>=3.9.2,<3.10.0)", "uvloop (>=0.15.3)"]
+dev = ["Cython (>=0.29.24,<0.30.0)", "Sphinx (>=4.1.2,<4.2.0)", "flake8 (>=3.9.2,<3.10.0)", "pycodestyle (>=2.7.0,<2.8.0)", "pytest (>=6.0)", "sphinx_rtd_theme (>=0.5.2,<0.6.0)", "sphinxcontrib-asyncio (>=0.3.0,<0.4.0)", "uvloop (>=0.15.3)"]
+docs = ["Sphinx (>=4.1.2,<4.2.0)", "sphinx_rtd_theme (>=0.5.2,<0.6.0)", "sphinxcontrib-asyncio (>=0.3.0,<0.4.0)"]
+test = ["flake8 (>=3.9.2,<3.10.0)", "pycodestyle (>=2.7.0,<2.8.0)", "uvloop (>=0.15.3)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "attrs"
@@ -109,10 +145,15 @@
 python-versions = ">=3.5"
 
 [package.extras]
-dev = ["coverage[toml] (>=5.0.2)", "hypothesis", "pympler", "pytest (>=4.3.0)", "mypy (>=0.900,!=0.940)", "pytest-mypy-plugins", "zope.interface", "furo", "sphinx", "sphinx-notfound-page", "pre-commit", "cloudpickle"]
-docs = ["furo", "sphinx", "zope.interface", "sphinx-notfound-page"]
-tests = ["coverage[toml] (>=5.0.2)", "hypothesis", "pympler", "pytest (>=4.3.0)", "mypy (>=0.900,!=0.940)", "pytest-mypy-plugins", "zope.interface", "cloudpickle"]
-tests_no_zope = ["coverage[toml] (>=5.0.2)", "hypothesis", "pympler", "pytest (>=4.3.0)", "mypy (>=0.900,!=0.940)", "pytest-mypy-plugins", "cloudpickle"]
+dev = ["cloudpickle", "coverage[toml] (>=5.0.2)", "furo", "hypothesis", "mypy (>=0.900,!=0.940)", "pre-commit", "pympler", "pytest (>=4.3.0)", "pytest-mypy-plugins", "sphinx", "sphinx-notfound-page", "zope.interface"]
+docs = ["furo", "sphinx", "sphinx-notfound-page", "zope.interface"]
+tests = ["cloudpickle", "coverage[toml] (>=5.0.2)", "hypothesis", "mypy (>=0.900,!=0.940)", "pympler", "pytest (>=4.3.0)", "pytest-mypy-plugins", "zope.interface"]
+tests_no_zope = ["cloudpickle", "coverage[toml] (>=5.0.2)", "hypothesis", "mypy (>=0.900,!=0.940)", "pympler", "pytest (>=4.3.0)", "pytest-mypy-plugins"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "backports.zoneinfo"
@@ -125,6 +166,11 @@
 [package.extras]
 tzdata = ["tzdata"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "beautifulsoup4"
 version = "4.9.3"
@@ -140,9 +186,14 @@
 html5lib = ["html5lib"]
 lxml = ["lxml"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "bilireq"
-version = "0.2.0.post1"
+version = "0.2.2"
 description = ""
 category = "main"
 optional = false
@@ -157,6 +208,11 @@
 [package.extras]
 qrcode = ["qrcode[pil] (>=7.3.1,<8.0.0)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "black"
 version = "22.6.0"
@@ -179,6 +235,11 @@
 jupyter = ["ipython (>=7.8.0)", "tokenize-rt (>=3.2.0)"]
 uvloop = ["uvloop (>=0.15.2)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "certifi"
 version = "2022.6.15"
@@ -187,6 +248,11 @@
 optional = false
 python-versions = ">=3.6"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "chardet"
 version = "4.0.0"
@@ -195,6 +261,11 @@
 optional = false
 python-versions = ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "click"
 version = "8.1.3"
@@ -206,6 +277,11 @@
 [package.dependencies]
 colorama = {version = "*", markers = "platform_system == \"Windows\""}
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "cn2an"
 version = "0.5.17"
@@ -217,6 +293,12 @@
 [package.dependencies]
 proces = ">=0.1.0"
 "ruamel.yaml" = ">=0.16.0"
+setuptools = ">=47.3.1"
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "colorama"
@@ -226,6 +308,11 @@
 optional = false
 python-versions = ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "commonmark"
 version = "0.9.1"
@@ -235,7 +322,12 @@
 python-versions = "*"
 
 [package.extras]
-test = ["hypothesis (==3.55.3)", "flake8 (==3.7.8)"]
+test = ["flake8 (==3.7.8)", "hypothesis (==3.55.3)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "cycler"
@@ -245,6 +337,11 @@
 optional = false
 python-versions = ">=3.6"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "dateparser"
 version = "1.1.1"
@@ -260,9 +357,14 @@
 tzlocal = "*"
 
 [package.extras]
-langdetect = ["langdetect"]
+calendars = ["convertdate", "convertdate", "hijri-converter"]
 fasttext = ["fasttext"]
-calendars = ["convertdate", "hijri-converter", "convertdate"]
+langdetect = ["langdetect"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "ecdsa"
@@ -279,6 +381,11 @@
 gmpy = ["gmpy"]
 gmpy2 = ["gmpy2"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "emoji"
 version = "1.7.0"
@@ -288,7 +395,12 @@
 python-versions = "*"
 
 [package.extras]
-dev = ["pytest", "coverage", "coveralls"]
+dev = ["coverage", "coveralls", "pytest"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "fastapi"
@@ -303,10 +415,15 @@
 starlette = "0.19.1"
 
 [package.extras]
-all = ["requests (>=2.24.0,<3.0.0)", "jinja2 (>=2.11.2,<4.0.0)", "python-multipart (>=0.0.5,<0.0.6)", "itsdangerous (>=1.1.0,<3.0.0)", "pyyaml (>=5.3.1,<7.0.0)", "ujson (>=4.0.1,!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0,<6.0.0)", "orjson (>=3.2.1,<4.0.0)", "email_validator (>=1.1.1,<2.0.0)", "uvicorn[standard] (>=0.12.0,<0.18.0)"]
-dev = ["python-jose[cryptography] (>=3.3.0,<4.0.0)", "passlib[bcrypt] (>=1.7.2,<2.0.0)", "autoflake (>=1.4.0,<2.0.0)", "flake8 (>=3.8.3,<4.0.0)", "uvicorn[standard] (>=0.12.0,<0.18.0)", "pre-commit (>=2.17.0,<3.0.0)"]
-doc = ["mkdocs (>=1.1.2,<2.0.0)", "mkdocs-material (>=8.1.4,<9.0.0)", "mdx-include (>=1.4.1,<2.0.0)", "mkdocs-markdownextradata-plugin (>=0.1.7,<0.3.0)", "typer (>=0.4.1,<0.5.0)", "pyyaml (>=5.3.1,<7.0.0)"]
-test = ["pytest (>=6.2.4,<7.0.0)", "pytest-cov (>=2.12.0,<4.0.0)", "mypy (==0.910)", "flake8 (>=3.8.3,<4.0.0)", "black (==22.3.0)", "isort (>=5.0.6,<6.0.0)", "requests (>=2.24.0,<3.0.0)", "httpx (>=0.14.0,<0.19.0)", "email_validator (>=1.1.1,<2.0.0)", "sqlalchemy (>=1.3.18,<1.5.0)", "peewee (>=3.13.3,<4.0.0)", "databases[sqlite] (>=0.3.2,<0.6.0)", "orjson (>=3.2.1,<4.0.0)", "ujson (>=4.0.1,!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0,<6.0.0)", "python-multipart (>=0.0.5,<0.0.6)", "flask (>=1.1.2,<3.0.0)", "anyio[trio] (>=3.2.1,<4.0.0)", "types-ujson (==4.2.1)", "types-orjson (==3.6.2)", "types-dataclasses (==0.6.5)"]
+all = ["email_validator (>=1.1.1,<2.0.0)", "itsdangerous (>=1.1.0,<3.0.0)", "jinja2 (>=2.11.2,<4.0.0)", "orjson (>=3.2.1,<4.0.0)", "python-multipart (>=0.0.5,<0.0.6)", "pyyaml (>=5.3.1,<7.0.0)", "requests (>=2.24.0,<3.0.0)", "ujson (>=4.0.1,!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0,<6.0.0)", "uvicorn[standard] (>=0.12.0,<0.18.0)"]
+dev = ["autoflake (>=1.4.0,<2.0.0)", "flake8 (>=3.8.3,<4.0.0)", "passlib[bcrypt] (>=1.7.2,<2.0.0)", "pre-commit (>=2.17.0,<3.0.0)", "python-jose[cryptography] (>=3.3.0,<4.0.0)", "uvicorn[standard] (>=0.12.0,<0.18.0)"]
+doc = ["mdx-include (>=1.4.1,<2.0.0)", "mkdocs (>=1.1.2,<2.0.0)", "mkdocs-markdownextradata-plugin (>=0.1.7,<0.3.0)", "mkdocs-material (>=8.1.4,<9.0.0)", "pyyaml (>=5.3.1,<7.0.0)", "typer (>=0.4.1,<0.5.0)"]
+test = ["anyio[trio] (>=3.2.1,<4.0.0)", "black (==22.3.0)", "databases[sqlite] (>=0.3.2,<0.6.0)", "email_validator (>=1.1.1,<2.0.0)", "flake8 (>=3.8.3,<4.0.0)", "flask (>=1.1.2,<3.0.0)", "httpx (>=0.14.0,<0.19.0)", "isort (>=5.0.6,<6.0.0)", "mypy (==0.910)", "orjson (>=3.2.1,<4.0.0)", "peewee (>=3.13.3,<4.0.0)", "pytest (>=6.2.4,<7.0.0)", "pytest-cov (>=2.12.0,<4.0.0)", "python-multipart (>=0.0.5,<0.0.6)", "requests (>=2.24.0,<3.0.0)", "sqlalchemy (>=1.3.18,<1.5.0)", "types-dataclasses (==0.6.5)", "types-orjson (==3.6.2)", "types-ujson (==4.2.1)", "ujson (>=4.0.1,!=4.0.2,!=4.1.0,!=4.2.0,!=4.3.0,!=5.0.0,!=5.1.0,<6.0.0)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "feedparser"
@@ -319,6 +436,11 @@
 [package.dependencies]
 sgmllib3k = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "fonttools"
 version = "4.34.4"
@@ -328,9 +450,9 @@
 python-versions = ">=3.7"
 
 [package.extras]
-all = ["fs (>=2.2.0,<3)", "lxml (>=4.0,<5)", "zopfli (>=0.1.4)", "lz4 (>=1.7.4.2)", "matplotlib", "sympy", "skia-pathops (>=0.5.0)", "uharfbuzz (>=0.23.0)", "brotlicffi (>=0.8.0)", "scipy", "brotli (>=1.0.1)", "munkres", "unicodedata2 (>=14.0.0)", "xattr"]
+all = ["brotli (>=1.0.1)", "brotlicffi (>=0.8.0)", "fs (>=2.2.0,<3)", "lxml (>=4.0,<5)", "lz4 (>=1.7.4.2)", "matplotlib", "munkres", "scipy", "skia-pathops (>=0.5.0)", "sympy", "uharfbuzz (>=0.23.0)", "unicodedata2 (>=14.0.0)", "xattr", "zopfli (>=0.1.4)"]
 graphite = ["lz4 (>=1.7.4.2)"]
-interpolatable = ["scipy", "munkres"]
+interpolatable = ["munkres", "scipy"]
 lxml = ["lxml (>=4.0,<5)"]
 pathops = ["skia-pathops (>=0.5.0)"]
 plot = ["matplotlib"]
@@ -339,7 +461,12 @@
 type1 = ["xattr"]
 ufo = ["fs (>=2.2.0,<3)"]
 unicode = ["unicodedata2 (>=14.0.0)"]
-woff = ["zopfli (>=0.1.4)", "brotlicffi (>=0.8.0)", "brotli (>=1.0.1)"]
+woff = ["brotli (>=1.0.1)", "brotlicffi (>=0.8.0)", "zopfli (>=0.1.4)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "gino"
@@ -354,11 +481,16 @@
 SQLAlchemy = ">=1.2.16,<1.4"
 
 [package.extras]
+aiohttp = ["gino-aiohttp (>=0.1.0,<0.2.0)"]
 quart = ["gino-quart (>=0.1.0,<0.2.0)"]
 sanic = ["gino-sanic (>=0.1.0,<0.2.0)"]
-tornado = ["gino-tornado (>=0.1.0,<0.2.0)"]
-aiohttp = ["gino-aiohttp (>=0.1.0,<0.2.0)"]
 starlette = ["gino-starlette (>=0.1.1,<0.2.0)"]
+tornado = ["gino-tornado (>=0.1.0,<0.2.0)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "greenlet"
@@ -369,7 +501,12 @@
 python-versions = ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*"
 
 [package.extras]
-docs = ["sphinx"]
+docs = ["Sphinx"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "grpcio"
@@ -385,6 +522,11 @@
 [package.extras]
 protobuf = ["grpcio-tools (>=1.48.0)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "h11"
 version = "0.12.0"
@@ -393,6 +535,11 @@
 optional = false
 python-versions = ">=3.6"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "httpcore"
 version = "0.15.0"
@@ -411,6 +558,11 @@
 http2 = ["h2 (>=3,<5)"]
 socks = ["socksio (>=1.0.0,<2.0.0)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "httptools"
 version = "0.4.0"
@@ -422,6 +574,11 @@
 [package.extras]
 test = ["Cython (>=0.29.24,<0.30.0)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "httpx"
 version = "0.23.0"
@@ -437,11 +594,16 @@
 sniffio = "*"
 
 [package.extras]
-brotli = ["brotlicffi", "brotli"]
-cli = ["click (>=8.0.0,<9.0.0)", "rich (>=10,<13)", "pygments (>=2.0.0,<3.0.0)"]
+brotli = ["brotli", "brotlicffi"]
+cli = ["click (>=8.0.0,<9.0.0)", "pygments (>=2.0.0,<3.0.0)", "rich (>=10,<13)"]
 http2 = ["h2 (>=3,<5)"]
 socks = ["socksio (>=1.0.0,<2.0.0)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "idna"
 version = "3.3"
@@ -450,6 +612,11 @@
 optional = false
 python-versions = ">=3.5"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "imagehash"
 version = "4.2.1"
@@ -465,6 +632,11 @@
 scipy = "*"
 six = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "jieba"
 version = "0.42.1"
@@ -473,6 +645,11 @@
 optional = false
 python-versions = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "kiwisolver"
 version = "1.4.4"
@@ -481,6 +658,11 @@
 optional = false
 python-versions = ">=3.7"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "loguru"
 version = "0.6.0"
@@ -494,7 +676,12 @@
 win32-setctime = {version = ">=1.0.0", markers = "sys_platform == \"win32\""}
 
 [package.extras]
-dev = ["sphinx-rtd-theme (>=0.4.3)", "sphinx-autobuild (>=0.7.1)", "Sphinx (>=4.1.1)", "isort (>=5.1.1)", "black (>=19.10b0)", "pytest-cov (>=2.7.1)", "pytest (>=4.6.2)", "tox (>=3.9.0)", "flake8 (>=3.7.7)", "docutils (==0.16)", "colorama (>=0.3.4)"]
+dev = ["Sphinx (>=4.1.1)", "black (>=19.10b0)", "colorama (>=0.3.4)", "docutils (==0.16)", "flake8 (>=3.7.7)", "isort (>=5.1.1)", "pytest (>=4.6.2)", "pytest-cov (>=2.7.1)", "sphinx-autobuild (>=0.7.1)", "sphinx-rtd-theme (>=0.4.3)", "tox (>=3.9.0)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "lxml"
@@ -507,9 +694,14 @@
 [package.extras]
 cssselect = ["cssselect (>=0.7)"]
 html5 = ["html5lib"]
-htmlsoup = ["beautifulsoup4"]
+htmlsoup = ["BeautifulSoup4"]
 source = ["Cython (>=0.29.7)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "matplotlib"
 version = "3.5.2"
@@ -529,6 +721,11 @@
 python-dateutil = ">=2.7"
 setuptools_scm = ">=4"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "msgpack"
 version = "1.0.4"
@@ -537,6 +734,11 @@
 optional = false
 python-versions = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "multidict"
 version = "6.0.2"
@@ -545,6 +747,11 @@
 optional = false
 python-versions = ">=3.7"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "mypy-extensions"
 version = "0.4.3"
@@ -553,6 +760,11 @@
 optional = false
 python-versions = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "nonebot-adapter-onebot"
 version = "2.1.1"
@@ -565,6 +777,11 @@
 msgpack = ">=1.0.3,<2.0.0"
 nonebot2 = ">=2.0.0-beta.3,<3.0.0"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "nonebot-plugin-apscheduler"
 version = "0.1.3"
@@ -577,6 +794,11 @@
 apscheduler = ">=3.7.0,<4.0.0"
 nonebot2 = ">=2.0.0-alpha.8,<3.0.0"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "nonebot2"
 version = "2.0.0b4"
@@ -596,11 +818,16 @@
 yarl = ">=1.7.2,<2.0.0"
 
 [package.extras]
+aiohttp = ["aiohttp[speedups] (>=3.7.4,<4.0.0)"]
+all = ["Quart (>=0.17.0,<0.18.0)", "aiohttp[speedups] (>=3.7.4,<4.0.0)", "httpx[http2] (>=0.20.0,<1.0.0)", "websockets (>=10.0,<11.0)"]
+httpx = ["httpx[http2] (>=0.20.0,<1.0.0)"]
 quart = ["Quart (>=0.17.0,<0.18.0)"]
-all = ["Quart (>=0.17.0,<0.18.0)", "websockets (>=10.0,<11.0)", "aiohttp[speedups] (>=3.7.4,<4.0.0)", "httpx[http2] (>=0.20.0,<1.0.0)"]
 websockets = ["websockets (>=10.0,<11.0)"]
-aiohttp = ["aiohttp[speedups] (>=3.7.4,<4.0.0)"]
-httpx = ["httpx[http2] (>=0.20.0,<1.0.0)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "numpy"
@@ -610,6 +837,11 @@
 optional = false
 python-versions = ">=3.8"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "opencv-python"
 version = "4.6.0.66"
@@ -626,6 +858,11 @@
     {version = ">=1.17.3", markers = "python_version >= \"3.8\""},
 ]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "packaging"
 version = "21.3"
@@ -637,6 +874,11 @@
 [package.dependencies]
 pyparsing = ">=2.0.2,<3.0.5 || >3.0.5"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pathspec"
 version = "0.9.0"
@@ -645,6 +887,11 @@
 optional = false
 python-versions = "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pillow"
 version = "9.2.0"
@@ -657,6 +904,11 @@
 docs = ["furo", "olefile", "sphinx (>=2.4)", "sphinx-copybutton", "sphinx-issues (>=3.0.1)", "sphinx-removed-in", "sphinxext-opengraph"]
 tests = ["check-manifest", "coverage", "defusedxml", "markdown2", "olefile", "packaging", "pyroma", "pytest", "pytest-cov", "pytest-timeout"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "platformdirs"
 version = "2.5.2"
@@ -666,8 +918,13 @@
 python-versions = ">=3.7"
 
 [package.extras]
-docs = ["furo (>=2021.7.5b38)", "proselint (>=0.10.2)", "sphinx-autodoc-typehints (>=1.12)", "sphinx (>=4)"]
-test = ["appdirs (==1.4.4)", "pytest-cov (>=2.7)", "pytest-mock (>=3.6)", "pytest (>=6)"]
+docs = ["furo (>=2021.7.5b38)", "proselint (>=0.10.2)", "sphinx (>=4)", "sphinx-autodoc-typehints (>=1.12)"]
+test = ["appdirs (==1.4.4)", "pytest (>=6)", "pytest-cov (>=2.7)", "pytest-mock (>=3.6)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "playwright"
@@ -683,6 +940,11 @@
 typing-extensions = {version = "*", markers = "python_version <= \"3.8\""}
 websockets = "10.1"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "proces"
 version = "0.1.2"
@@ -692,8 +954,14 @@
 python-versions = ">=3.6"
 
 [package.dependencies]
+setuptools = ">=40.6.3"
 zhconv = "1.4.3"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "protobuf"
 version = "3.20.1"
@@ -702,6 +970,11 @@
 optional = false
 python-versions = ">=3.7"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "psutil"
 version = "5.9.1"
@@ -711,7 +984,12 @@
 python-versions = ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*"
 
 [package.extras]
-test = ["ipaddress", "mock", "enum34", "pywin32", "wmi"]
+test = ["enum34", "ipaddress", "mock", "pywin32", "wmi"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "pyasn1"
@@ -721,6 +999,11 @@
 optional = false
 python-versions = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pydantic"
 version = "1.9.1"
@@ -737,6 +1020,11 @@
 dotenv = ["python-dotenv (>=0.10.4)"]
 email = ["email-validator (>=1.0.3)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pyee"
 version = "8.1.0"
@@ -745,6 +1033,11 @@
 optional = false
 python-versions = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pygments"
 version = "2.12.0"
@@ -753,6 +1046,11 @@
 optional = false
 python-versions = ">=3.6"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pygtrie"
 version = "2.5.0"
@@ -761,6 +1059,11 @@
 optional = false
 python-versions = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pyparsing"
 version = "3.0.9"
@@ -770,7 +1073,12 @@
 python-versions = ">=3.6.8"
 
 [package.extras]
-diagrams = ["railroad-diagrams", "jinja2"]
+diagrams = ["jinja2", "railroad-diagrams"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "pypinyin"
@@ -780,6 +1088,11 @@
 optional = false
 python-versions = ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "python-dateutil"
 version = "2.8.2"
@@ -791,6 +1104,11 @@
 [package.dependencies]
 six = ">=1.5"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "python-dotenv"
 version = "0.20.0"
@@ -802,6 +1120,11 @@
 [package.extras]
 cli = ["click (>=5.0)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "python-jose"
 version = "3.3.0"
@@ -817,8 +1140,13 @@
 
 [package.extras]
 cryptography = ["cryptography (>=3.4.0)"]
-pycrypto = ["pycrypto (>=2.6.0,<2.7.0)", "pyasn1"]
-pycryptodome = ["pycryptodome (>=3.3.1,<4.0.0)", "pyasn1"]
+pycrypto = ["pyasn1", "pycrypto (>=2.6.0,<2.7.0)"]
+pycryptodome = ["pyasn1", "pycryptodome (>=3.3.1,<4.0.0)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "python-multipart"
@@ -831,6 +1159,11 @@
 [package.dependencies]
 six = ">=1.4.0"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pytz"
 version = "2022.1"
@@ -839,6 +1172,11 @@
 optional = false
 python-versions = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pytz-deprecation-shim"
 version = "0.1.0.post0"
@@ -851,6 +1189,11 @@
 "backports.zoneinfo" = {version = "*", markers = "python_version >= \"3.6\" and python_version < \"3.9\""}
 tzdata = {version = "*", markers = "python_version >= \"3.6\""}
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pywavelets"
 version = "1.3.0"
@@ -862,6 +1205,11 @@
 [package.dependencies]
 numpy = ">=1.17.3"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "pyyaml"
 version = "5.4.1"
@@ -870,6 +1218,11 @@
 optional = false
 python-versions = ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "regex"
 version = "2022.3.2"
@@ -878,6 +1231,11 @@
 optional = false
 python-versions = ">=3.6"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "retrying"
 version = "1.3.3"
@@ -889,6 +1247,11 @@
 [package.dependencies]
 six = ">=1.7.0"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "rfc3986"
 version = "1.5.0"
@@ -903,6 +1266,11 @@
 [package.extras]
 idna2008 = ["idna"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "rich"
 version = "12.5.1"
@@ -919,6 +1287,11 @@
 [package.extras]
 jupyter = ["ipywidgets (>=7.5.1,<8.0.0)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "rsa"
 version = "4.9"
@@ -930,6 +1303,11 @@
 [package.dependencies]
 pyasn1 = ">=0.1.3"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "ruamel.yaml"
 version = "0.17.21"
@@ -945,6 +1323,11 @@
 docs = ["ryd"]
 jinja2 = ["ruamel.yaml.jinja2 (>=0.2)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "ruamel.yaml.clib"
 version = "0.2.6"
@@ -953,6 +1336,11 @@
 optional = false
 python-versions = ">=3.5"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "scipy"
 version = "1.6.1"
@@ -964,6 +1352,29 @@
 [package.dependencies]
 numpy = ">=1.16.5"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
+[[package]]
+name = "setuptools"
+version = "65.3.0"
+description = "Easily download, build, install, upgrade, and uninstall Python packages"
+category = "main"
+optional = false
+python-versions = ">=3.7"
+
+[package.extras]
+docs = ["furo", "jaraco.packaging (>=9)", "jaraco.tidelift (>=1.4)", "pygments-github-lexers (==0.0.5)", "rst.linker (>=1.9)", "sphinx", "sphinx-favicon", "sphinx-hoverxref (<2)", "sphinx-inline-tabs", "sphinx-notfound-page (==0.8.3)", "sphinx-reredirects", "sphinxcontrib-towncrier"]
+testing = ["build[virtualenv]", "filelock (>=3.4.0)", "flake8 (<5)", "flake8-2020", "ini2toml[lite] (>=0.9)", "jaraco.envs (>=2.2)", "jaraco.path (>=3.2.0)", "mock", "pip (>=19.1)", "pip-run (>=8.8)", "pytest (>=6)", "pytest-black (>=0.3.7)", "pytest-checkdocs (>=2.4)", "pytest-cov", "pytest-enabler (>=1.3)", "pytest-flake8", "pytest-mypy (>=0.9.1)", "pytest-perf", "pytest-xdist", "tomli-w (>=1.0.0)", "virtualenv (>=13.0.0)", "wheel"]
+testing-integration = ["build[virtualenv]", "filelock (>=3.4.0)", "jaraco.envs (>=2.2)", "jaraco.path (>=3.2.0)", "pytest", "pytest-enabler", "pytest-xdist", "tomli", "virtualenv (>=13.0.0)", "wheel"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "setuptools-scm"
 version = "7.0.5"
@@ -974,6 +1385,7 @@
 
 [package.dependencies]
 packaging = ">=20.0"
+setuptools = "*"
 tomli = ">=1.0.0"
 typing-extensions = "*"
 
@@ -981,6 +1393,11 @@
 test = ["pytest (>=6.2)", "virtualenv (>20)"]
 toml = ["setuptools (>=42)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "sgmllib3k"
 version = "1.0.0"
@@ -989,6 +1406,11 @@
 optional = false
 python-versions = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "six"
 version = "1.16.0"
@@ -997,6 +1419,11 @@
 optional = false
 python-versions = ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "sniffio"
 version = "1.2.0"
@@ -1005,6 +1432,11 @@
 optional = false
 python-versions = ">=3.5"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "soupsieve"
 version = "2.3.2.post1"
@@ -1013,6 +1445,11 @@
 optional = false
 python-versions = ">=3.6"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "sqlalchemy"
 version = "1.3.24"
@@ -1026,12 +1463,17 @@
 mssql_pymssql = ["pymssql"]
 mssql_pyodbc = ["pyodbc"]
 mysql = ["mysqlclient"]
-oracle = ["cx-oracle"]
+oracle = ["cx_oracle"]
 postgresql = ["psycopg2"]
 postgresql_pg8000 = ["pg8000 (<1.16.6)"]
 postgresql_psycopg2binary = ["psycopg2-binary"]
 postgresql_psycopg2cffi = ["psycopg2cffi"]
-pymysql = ["pymysql (<1)", "pymysql"]
+pymysql = ["pymysql", "pymysql (<1)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "starlette"
@@ -1048,6 +1490,11 @@
 [package.extras]
 full = ["itsdangerous", "jinja2", "python-multipart", "pyyaml", "requests"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "tomli"
 version = "2.0.1"
@@ -1056,6 +1503,11 @@
 optional = false
 python-versions = ">=3.7"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "tomlkit"
 version = "0.11.1"
@@ -1064,6 +1516,11 @@
 optional = false
 python-versions = ">=3.6,<4.0"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "typing-extensions"
 version = "4.3.0"
@@ -1072,6 +1529,11 @@
 optional = false
 python-versions = ">=3.7"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "tzdata"
 version = "2022.1"
@@ -1080,6 +1542,11 @@
 optional = false
 python-versions = ">=2"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "tzlocal"
 version = "4.2"
@@ -1095,7 +1562,12 @@
 
 [package.extras]
 devenv = ["black", "pyroma", "pytest-cov", "zest.releaser"]
-test = ["pytest-mock (>=3.3)", "pytest (>=4.3)"]
+test = ["pytest (>=4.3)", "pytest-mock (>=3.3)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "ujson"
@@ -1105,6 +1577,11 @@
 optional = false
 python-versions = ">=3.7"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "uvicorn"
 version = "0.17.6"
@@ -1126,7 +1603,12 @@
 websockets = {version = ">=10.0", optional = true, markers = "extra == \"standard\""}
 
 [package.extras]
-standard = ["websockets (>=10.0)", "httptools (>=0.4.0)", "watchgod (>=0.6)", "python-dotenv (>=0.13)", "PyYAML (>=5.1)", "uvloop (>=0.14.0,!=0.15.0,!=0.15.1)", "colorama (>=0.4)"]
+standard = ["PyYAML (>=5.1)", "colorama (>=0.4)", "httptools (>=0.4.0)", "python-dotenv (>=0.13)", "uvloop (>=0.14.0,!=0.15.0,!=0.15.1)", "watchgod (>=0.6)", "websockets (>=10.0)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "uvloop"
@@ -1137,9 +1619,14 @@
 python-versions = ">=3.7"
 
 [package.extras]
-dev = ["Cython (>=0.29.24,<0.30.0)", "pytest (>=3.6.0)", "Sphinx (>=4.1.2,<4.2.0)", "sphinxcontrib-asyncio (>=0.3.0,<0.4.0)", "sphinx-rtd-theme (>=0.5.2,<0.6.0)", "aiohttp", "flake8 (>=3.9.2,<3.10.0)", "psutil", "pycodestyle (>=2.7.0,<2.8.0)", "pyOpenSSL (>=19.0.0,<19.1.0)", "mypy (>=0.800)"]
-docs = ["Sphinx (>=4.1.2,<4.2.0)", "sphinxcontrib-asyncio (>=0.3.0,<0.4.0)", "sphinx-rtd-theme (>=0.5.2,<0.6.0)"]
-test = ["aiohttp", "flake8 (>=3.9.2,<3.10.0)", "psutil", "pycodestyle (>=2.7.0,<2.8.0)", "pyOpenSSL (>=19.0.0,<19.1.0)", "mypy (>=0.800)"]
+dev = ["Cython (>=0.29.24,<0.30.0)", "Sphinx (>=4.1.2,<4.2.0)", "aiohttp", "flake8 (>=3.9.2,<3.10.0)", "mypy (>=0.800)", "psutil", "pyOpenSSL (>=19.0.0,<19.1.0)", "pycodestyle (>=2.7.0,<2.8.0)", "pytest (>=3.6.0)", "sphinx_rtd_theme (>=0.5.2,<0.6.0)", "sphinxcontrib-asyncio (>=0.3.0,<0.4.0)"]
+docs = ["Sphinx (>=4.1.2,<4.2.0)", "sphinx_rtd_theme (>=0.5.2,<0.6.0)", "sphinxcontrib-asyncio (>=0.3.0,<0.4.0)"]
+test = ["aiohttp", "flake8 (>=3.9.2,<3.10.0)", "mypy (>=0.800)", "psutil", "pyOpenSSL (>=19.0.0,<19.1.0)", "pycodestyle (>=2.7.0,<2.8.0)"]
+
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
 
 [[package]]
 name = "watchgod"
@@ -1152,6 +1639,11 @@
 [package.dependencies]
 anyio = ">=3.0.0,<4"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "websockets"
 version = "10.1"
@@ -1160,6 +1652,11 @@
 optional = false
 python-versions = ">=3.7"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "win32-setctime"
 version = "1.1.0"
@@ -1171,6 +1668,11 @@
 [package.extras]
 dev = ["black (>=19.3b0)", "pytest (>=4.6.2)"]
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "wordcloud"
 version = "1.8.2.2"
@@ -1184,6 +1686,11 @@
 numpy = ">=1.6.1"
 pillow = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "yarl"
 version = "1.7.2"
@@ -1196,6 +1703,11 @@
 idna = ">=2.0"
 multidict = ">=4.0"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [[package]]
 name = "zhconv"
 version = "1.4.3"
@@ -1204,10 +1716,15 @@
 optional = false
 python-versions = "*"
 
+[package.source]
+type = "legacy"
+url = "https://mirrors.aliyun.com/pypi/simple"
+reference = "ali"
+
 [metadata]
 lock-version = "1.1"
 python-versions = "^3.8"
-content-hash = "efbf24a685398d0ecf8de274d72f15a1337200482b4a9095716579794ea4aecb"
+content-hash = "b1a5470c6c7aa84a4dfdd259f3e994c72cf8cb1c4b218d4f7f6403b2e83b87f1"
 
 [metadata.files]
 aiofiles = [
@@ -1325,8 +1842,8 @@
     {file = "beautifulsoup4-4.9.3.tar.gz", hash = "sha256:84729e322ad1d5b4d25f805bfa05b902dd96450f43842c4e99067d5e1369eb25"},
 ]
 bilireq = [
-    {file = "bilireq-0.2.0.post1-py3-none-any.whl", hash = "sha256:bced02207c09fc29d08f1f37cfeaefdcfdde3dbff180d35d5c3c9d7ea3fa1f90"},
-    {file = "bilireq-0.2.0.post1.tar.gz", hash = "sha256:f731a5768c7e3159b1e0d5b02b3fdb58939ed24d6cd23a428ab1df20fbbf62cc"},
+    {file = "bilireq-0.2.2-py3-none-any.whl", hash = "sha256:0c82908eb908b766a602709b413dfcea076ce34ad7d3c3d70970884c13f31a15"},
+    {file = "bilireq-0.2.2.tar.gz", hash = "sha256:fbd93654e33a40e0a99e7ccc291f3c663feec39996aa639ab2a21f24d6fe3f70"},
 ]
 black = [
     {file = "black-22.6.0-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:f586c26118bc6e714ec58c09df0157fe2d9ee195c764f630eb0d8e7ccce72e69"},
@@ -1582,6 +2099,21 @@
     {file = "kiwisolver-1.4.4-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:a68b62a02953b9841730db7797422f983935aeefceb1679f0fc85cbfbd311c32"},
     {file = "kiwisolver-1.4.4-cp310-cp310-win32.whl", hash = "sha256:e92a513161077b53447160b9bd8f522edfbed4bd9759e4c18ab05d7ef7e49408"},
     {file = "kiwisolver-1.4.4-cp310-cp310-win_amd64.whl", hash = "sha256:3fe20f63c9ecee44560d0e7f116b3a747a5d7203376abeea292ab3152334d004"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:e0ea21f66820452a3f5d1655f8704a60d66ba1191359b96541eaf457710a5fc6"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:bc9db8a3efb3e403e4ecc6cd9489ea2bac94244f80c78e27c31dcc00d2790ac2"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:d5b61785a9ce44e5a4b880272baa7cf6c8f48a5180c3e81c59553ba0cb0821ca"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:c2dbb44c3f7e6c4d3487b31037b1bdbf424d97687c1747ce4ff2895795c9bf69"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6295ecd49304dcf3bfbfa45d9a081c96509e95f4b9d0eb7ee4ec0530c4a96514"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:4bd472dbe5e136f96a4b18f295d159d7f26fd399136f5b17b08c4e5f498cd494"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:bf7d9fce9bcc4752ca4a1b80aabd38f6d19009ea5cbda0e0856983cf6d0023f5"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:78d6601aed50c74e0ef02f4204da1816147a6d3fbdc8b3872d263338a9052c51"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:877272cf6b4b7e94c9614f9b10140e198d2186363728ed0f701c6eee1baec1da"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-musllinux_1_1_i686.whl", hash = "sha256:db608a6757adabb32f1cfe6066e39b3706d8c3aa69bbc353a5b61edad36a5cb4"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-musllinux_1_1_ppc64le.whl", hash = "sha256:5853eb494c71e267912275e5586fe281444eb5e722de4e131cddf9d442615626"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-musllinux_1_1_s390x.whl", hash = "sha256:f0a1dbdb5ecbef0d34eb77e56fcb3e95bbd7e50835d9782a45df81cc46949750"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:283dffbf061a4ec60391d51e6155e372a1f7a4f5b15d59c8505339454f8989e4"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-win32.whl", hash = "sha256:d06adcfa62a4431d404c31216f0f8ac97397d799cd53800e9d3efc2fbb3cf14e"},
+    {file = "kiwisolver-1.4.4-cp311-cp311-win_amd64.whl", hash = "sha256:e7da3fec7408813a7cebc9e4ec55afed2d0fd65c4754bc376bf03498d4e92686"},
     {file = "kiwisolver-1.4.4-cp37-cp37m-macosx_10_9_x86_64.whl", hash = "sha256:62ac9cc684da4cf1778d07a89bf5f81b35834cb96ca523d3a7fb32509380cbf6"},
     {file = "kiwisolver-1.4.4-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:41dae968a94b1ef1897cb322b39360a0812661dba7c682aa45098eb8e193dbdf"},
     {file = "kiwisolver-1.4.4-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:02f79693ec433cb4b5f51694e8477ae83b3205768a6fb48ffba60549080e295b"},
@@ -1614,6 +2146,16 @@
     {file = "kiwisolver-1.4.4-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl", hash = "sha256:787518a6789009c159453da4d6b683f468ef7a65bbde796bcea803ccf191058d"},
     {file = "kiwisolver-1.4.4-pp37-pypy37_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:da152d8cdcab0e56e4f45eb08b9aea6455845ec83172092f09b0e077ece2cf7a"},
     {file = "kiwisolver-1.4.4-pp37-pypy37_pp73-win_amd64.whl", hash = "sha256:ecb1fa0db7bf4cff9dac752abb19505a233c7f16684c5826d1f11ebd9472b871"},
+    {file = "kiwisolver-1.4.4-pp38-pypy38_pp73-macosx_10_9_x86_64.whl", hash = "sha256:28bc5b299f48150b5f822ce68624e445040595a4ac3d59251703779836eceff9"},
+    {file = "kiwisolver-1.4.4-pp38-pypy38_pp73-manylinux_2_12_i686.manylinux2010_i686.whl", hash = "sha256:81e38381b782cc7e1e46c4e14cd997ee6040768101aefc8fa3c24a4cc58e98f8"},
+    {file = "kiwisolver-1.4.4-pp38-pypy38_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl", hash = "sha256:2a66fdfb34e05b705620dd567f5a03f239a088d5a3f321e7b6ac3239d22aa286"},
+    {file = "kiwisolver-1.4.4-pp38-pypy38_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:872b8ca05c40d309ed13eb2e582cab0c5a05e81e987ab9c521bf05ad1d5cf5cb"},
+    {file = "kiwisolver-1.4.4-pp38-pypy38_pp73-win_amd64.whl", hash = "sha256:70e7c2e7b750585569564e2e5ca9845acfaa5da56ac46df68414f29fea97be9f"},
+    {file = "kiwisolver-1.4.4-pp39-pypy39_pp73-macosx_10_9_x86_64.whl", hash = "sha256:9f85003f5dfa867e86d53fac6f7e6f30c045673fa27b603c397753bebadc3008"},
+    {file = "kiwisolver-1.4.4-pp39-pypy39_pp73-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:2e307eb9bd99801f82789b44bb45e9f541961831c7311521b13a6c85afc09767"},
+    {file = "kiwisolver-1.4.4-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b1792d939ec70abe76f5054d3f36ed5656021dcad1322d1cc996d4e54165cef9"},
+    {file = "kiwisolver-1.4.4-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f6cb459eea32a4e2cf18ba5fcece2dbdf496384413bc1bae15583f19e567f3b2"},
+    {file = "kiwisolver-1.4.4-pp39-pypy39_pp73-win_amd64.whl", hash = "sha256:36dafec3d6d6088d34e2de6b85f9d8e2324eb734162fba59d2ba9ed7a2043d5b"},
     {file = "kiwisolver-1.4.4.tar.gz", hash = "sha256:d41997519fcba4a1e46eb4a2fe31bc12f0ff957b2b81bac28db24744f333e955"},
 ]
 loguru = [
@@ -1902,8 +2444,8 @@
     {file = "Pillow-9.2.0-cp310-cp310-musllinux_1_1_x86_64.whl", hash = "sha256:37ff6b522a26d0538b753f0b4e8e164fdada12db6c6f00f62145d732d8a3152e"},
     {file = "Pillow-9.2.0-cp310-cp310-win32.whl", hash = "sha256:c79698d4cd9318d9481d89a77e2d3fcaeff5486be641e60a4b49f3d2ecca4e28"},
     {file = "Pillow-9.2.0-cp310-cp310-win_amd64.whl", hash = "sha256:254164c57bab4b459f14c64e93df11eff5ded575192c294a0c49270f22c5d93d"},
-    {file = "Pillow-9.2.0-cp311-cp311-macosx_10_10_universal2.whl", hash = "sha256:408673ed75594933714482501fe97e055a42996087eeca7e5d06e33218d05aa8"},
-    {file = "Pillow-9.2.0-cp311-cp311-macosx_11_0_universal2.whl", hash = "sha256:727dd1389bc5cb9827cbd1f9d40d2c2a1a0c9b32dd2261db522d22a604a6eec9"},
+    {file = "Pillow-9.2.0-cp311-cp311-macosx_10_10_x86_64.whl", hash = "sha256:adabc0bce035467fb537ef3e5e74f2847c8af217ee0be0455d4fec8adc0462fc"},
+    {file = "Pillow-9.2.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:336b9036127eab855beec9662ac3ea13a4544a523ae273cbf108b228ecac8437"},
     {file = "Pillow-9.2.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:50dff9cc21826d2977ef2d2a205504034e3a4563ca6f5db739b0d1026658e004"},
     {file = "Pillow-9.2.0-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:cb6259196a589123d755380b65127ddc60f4c64b21fc3bb46ce3a6ea663659b0"},
     {file = "Pillow-9.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7b0554af24df2bf96618dac71ddada02420f946be943b181108cac55a7a2dcd4"},
@@ -2029,18 +2571,7 @@
     {file = "psutil-5.9.1.tar.gz", hash = "sha256:57f1819b5d9e95cdfb0c881a8a5b7d542ed0b7c522d575706a80bedc848c8954"},
 ]
 pyasn1 = [
-    {file = "pyasn1-0.4.8-py2.4.egg", hash = "sha256:fec3e9d8e36808a28efb59b489e4528c10ad0f480e57dcc32b4de5c9d8c9fdf3"},
-    {file = "pyasn1-0.4.8-py2.5.egg", hash = "sha256:0458773cfe65b153891ac249bcf1b5f8f320b7c2ce462151f8fa74de8934becf"},
-    {file = "pyasn1-0.4.8-py2.6.egg", hash = "sha256:5c9414dcfede6e441f7e8f81b43b34e834731003427e5b09e4e00e3172a10f00"},
-    {file = "pyasn1-0.4.8-py2.7.egg", hash = "sha256:6e7545f1a61025a4e58bb336952c5061697da694db1cae97b116e9c46abcf7c8"},
     {file = "pyasn1-0.4.8-py2.py3-none-any.whl", hash = "sha256:39c7e2ec30515947ff4e87fb6f456dfc6e84857d34be479c9d4a4ba4bf46aa5d"},
-    {file = "pyasn1-0.4.8-py3.1.egg", hash = "sha256:78fa6da68ed2727915c4767bb386ab32cdba863caa7dbe473eaae45f9959da86"},
-    {file = "pyasn1-0.4.8-py3.2.egg", hash = "sha256:08c3c53b75eaa48d71cf8c710312316392ed40899cb34710d092e96745a358b7"},
-    {file = "pyasn1-0.4.8-py3.3.egg", hash = "sha256:03840c999ba71680a131cfaee6fab142e1ed9bbd9c693e285cc6aca0d555e576"},
-    {file = "pyasn1-0.4.8-py3.4.egg", hash = "sha256:7ab8a544af125fb704feadb008c99a88805126fb525280b2270bb25cc1d78a12"},
-    {file = "pyasn1-0.4.8-py3.5.egg", hash = "sha256:e89bf84b5437b532b0803ba5c9a5e054d21fec423a89952a74f87fa2c9b7bce2"},
-    {file = "pyasn1-0.4.8-py3.6.egg", hash = "sha256:014c0e9976956a08139dc0712ae195324a75e142284d5f87f1a87ee1b068a359"},
-    {file = "pyasn1-0.4.8-py3.7.egg", hash = "sha256:99fcc3c8d804d1bc6d9a099921e39d827026409a58f2a720dcdb89374ea0c776"},
     {file = "pyasn1-0.4.8.tar.gz", hash = "sha256:aef77c9fb94a3ac588e87841208bdec464471d9871bd5050a287cc9a475cd0ba"},
 ]
 pydantic = [
@@ -2282,6 +2813,7 @@
 ]
 "ruamel.yaml.clib" = [
     {file = "ruamel.yaml.clib-0.2.6-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:6e7be2c5bcb297f5b82fee9c665eb2eb7001d1050deaba8471842979293a80b0"},
+    {file = "ruamel.yaml.clib-0.2.6-cp310-cp310-manylinux2014_aarch64.whl", hash = "sha256:066f886bc90cc2ce44df8b5f7acfc6a7e2b2e672713f027136464492b0c34d7c"},
     {file = "ruamel.yaml.clib-0.2.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl", hash = "sha256:221eca6f35076c6ae472a531afa1c223b9c29377e62936f61bc8e6e8bdc5f9e7"},
     {file = "ruamel.yaml.clib-0.2.6-cp310-cp310-win32.whl", hash = "sha256:1070ba9dd7f9370d0513d649420c3b362ac2d687fe78c6e888f5b12bf8bc7bee"},
     {file = "ruamel.yaml.clib-0.2.6-cp310-cp310-win_amd64.whl", hash = "sha256:77df077d32921ad46f34816a9a16e6356d8100374579bc35e15bab5d4e9377de"},
@@ -2291,18 +2823,22 @@
     {file = "ruamel.yaml.clib-0.2.6-cp35-cp35m-win_amd64.whl", hash = "sha256:de9c6b8a1ba52919ae919f3ae96abb72b994dd0350226e28f3686cb4f142165c"},
     {file = "ruamel.yaml.clib-0.2.6-cp36-cp36m-macosx_10_9_x86_64.whl", hash = "sha256:d67f273097c368265a7b81e152e07fb90ed395df6e552b9fa858c6d2c9f42502"},
     {file = "ruamel.yaml.clib-0.2.6-cp36-cp36m-manylinux1_x86_64.whl", hash = "sha256:72a2b8b2ff0a627496aad76f37a652bcef400fd861721744201ef1b45199ab78"},
+    {file = "ruamel.yaml.clib-0.2.6-cp36-cp36m-manylinux2014_aarch64.whl", hash = "sha256:d3c620a54748a3d4cf0bcfe623e388407c8e85a4b06b8188e126302bcab93ea8"},
     {file = "ruamel.yaml.clib-0.2.6-cp36-cp36m-win32.whl", hash = "sha256:9efef4aab5353387b07f6b22ace0867032b900d8e91674b5d8ea9150db5cae94"},
     {file = "ruamel.yaml.clib-0.2.6-cp36-cp36m-win_amd64.whl", hash = "sha256:846fc8336443106fe23f9b6d6b8c14a53d38cef9a375149d61f99d78782ea468"},
     {file = "ruamel.yaml.clib-0.2.6-cp37-cp37m-macosx_10_9_x86_64.whl", hash = "sha256:0847201b767447fc33b9c235780d3aa90357d20dd6108b92be544427bea197dd"},
     {file = "ruamel.yaml.clib-0.2.6-cp37-cp37m-manylinux1_x86_64.whl", hash = "sha256:78988ed190206672da0f5d50c61afef8f67daa718d614377dcd5e3ed85ab4a99"},
+    {file = "ruamel.yaml.clib-0.2.6-cp37-cp37m-manylinux2014_aarch64.whl", hash = "sha256:210c8fcfeff90514b7133010bf14e3bad652c8efde6b20e00c43854bf94fa5a6"},
     {file = "ruamel.yaml.clib-0.2.6-cp37-cp37m-win32.whl", hash = "sha256:a49e0161897901d1ac9c4a79984b8410f450565bbad64dbfcbf76152743a0cdb"},
     {file = "ruamel.yaml.clib-0.2.6-cp37-cp37m-win_amd64.whl", hash = "sha256:bf75d28fa071645c529b5474a550a44686821decebdd00e21127ef1fd566eabe"},
     {file = "ruamel.yaml.clib-0.2.6-cp38-cp38-macosx_10_9_x86_64.whl", hash = "sha256:a32f8d81ea0c6173ab1b3da956869114cae53ba1e9f72374032e33ba3118c233"},
     {file = "ruamel.yaml.clib-0.2.6-cp38-cp38-manylinux1_x86_64.whl", hash = "sha256:7f7ecb53ae6848f959db6ae93bdff1740e651809780822270eab111500842a84"},
+    {file = "ruamel.yaml.clib-0.2.6-cp38-cp38-manylinux2014_aarch64.whl", hash = "sha256:61bc5e5ca632d95925907c569daa559ea194a4d16084ba86084be98ab1cec1c6"},
     {file = "ruamel.yaml.clib-0.2.6-cp38-cp38-win32.whl", hash = "sha256:89221ec6d6026f8ae859c09b9718799fea22c0e8da8b766b0b2c9a9ba2db326b"},
     {file = "ruamel.yaml.clib-0.2.6-cp38-cp38-win_amd64.whl", hash = "sha256:31ea73e564a7b5fbbe8188ab8b334393e06d997914a4e184975348f204790277"},
     {file = "ruamel.yaml.clib-0.2.6-cp39-cp39-macosx_10_9_x86_64.whl", hash = "sha256:dc6a613d6c74eef5a14a214d433d06291526145431c3b964f5e16529b1842bed"},
     {file = "ruamel.yaml.clib-0.2.6-cp39-cp39-manylinux1_x86_64.whl", hash = "sha256:1866cf2c284a03b9524a5cc00daca56d80057c5ce3cdc86a52020f4c720856f0"},
+    {file = "ruamel.yaml.clib-0.2.6-cp39-cp39-manylinux2014_aarch64.whl", hash = "sha256:1b4139a6ffbca8ef60fdaf9b33dec05143ba746a6f0ae0f9d11d38239211d335"},
     {file = "ruamel.yaml.clib-0.2.6-cp39-cp39-win32.whl", hash = "sha256:3fb9575a5acd13031c57a62cc7823e5d2ff8bc3835ba4d94b921b4e6ee664104"},
     {file = "ruamel.yaml.clib-0.2.6-cp39-cp39-win_amd64.whl", hash = "sha256:825d5fccef6da42f3c8eccd4281af399f21c02b32d98e113dbc631ea6a6ecbc7"},
     {file = "ruamel.yaml.clib-0.2.6.tar.gz", hash = "sha256:4ff604ce439abb20794f05613c374759ce10e3595d1867764dd1ae675b85acbd"},
@@ -2328,6 +2864,10 @@
     {file = "scipy-1.6.1-cp39-cp39-win_amd64.whl", hash = "sha256:a5193a098ae9f29af283dcf0041f762601faf2e595c0db1da929875b7570353f"},
     {file = "scipy-1.6.1.tar.gz", hash = "sha256:c4fceb864890b6168e79b0e714c585dbe2fd4222768ee90bc1aa0f8218691b11"},
 ]
+setuptools = [
+    {file = "setuptools-65.3.0-py3-none-any.whl", hash = "sha256:2e24e0bec025f035a2e72cdd1961119f557d78ad331bb00ff82efb2ab8da8e82"},
+    {file = "setuptools-65.3.0.tar.gz", hash = "sha256:7732871f4f7fa58fb6bdcaeadb0161b2bd046c85905dbaa066bdcbcc81953b57"},
+]
 setuptools-scm = [
     {file = "setuptools_scm-7.0.5-py3-none-any.whl", hash = "sha256:7930f720905e03ccd1e1d821db521bff7ec2ac9cf0ceb6552dd73d24a45d3b02"},
     {file = "setuptools_scm-7.0.5.tar.gz", hash = "sha256:031e13af771d6f892b941adb6ea04545bbf91ebc5ce68c78aaf3fff6e1fb4844"},
Index: .env.dev
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n\nSUPERUSERS=[\"\"]\n\nCOMMAND_START=[\"\"]\n\nSESSION_RUNNING_EXPRESSION=\"别急呀,小真寻要宕机了!QAQ\"\n\nNICKNAME=[\"真寻\", \"小真寻\", \"绪山真寻\", \"小寻子\"]\n\nSESSION_EXPIRE_TIMEOUT=30\n\nDEBUG=False\n# 服务器和端口\nHOST = 127.0.0.1\nPORT = 8080\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.env.dev b/.env.dev
--- a/.env.dev	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/.env.dev	(date 1663665373240)
@@ -1,6 +1,6 @@
 
 
-SUPERUSERS=[""]
+SUPERUSERS=["1808347356"]
 
 COMMAND_START=[""]
 
Index: plugins/word_bank/_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/word_bank/_model.py b/plugins/word_bank/_model.py
new file mode 100644
--- /dev/null	(date 1663665690887)
+++ b/plugins/word_bank/_model.py	(date 1663665690887)
@@ -0,0 +1,523 @@
+import time
+from nonebot.internal.adapter.template import MessageTemplate
+from nonebot.adapters.onebot.v11 import (
+    Message,
+    MessageEvent,
+    GroupMessageEvent,
+    MessageSegment,
+)
+from services.db_context import db
+from typing import Optional, List, Union, Tuple, Any
+from datetime import datetime
+from configs.path_config import DATA_PATH
+import random
+from ._config import int2type
+from utils.image_utils import get_img_hash
+from utils.http_utils import AsyncHttpx
+import re
+
+from utils.message_builder import image, face, at
+from utils.utils import get_message_img
+
+path = DATA_PATH / "word_bank"
+
+
+class WordBank(db.Model):
+    __tablename__ = "word_bank2"
+
+    id = db.Column(db.Integer(), primary_key=True)
+    user_qq = db.Column(db.BigInteger(), nullable=False)
+    group_id = db.Column(db.Integer())
+    word_scope = db.Column(
+        db.Integer(), nullable=False, default=0
+    )  # 生效范围 0: 全局 1: 群聊 2: 私聊
+    word_type = db.Column(
+        db.Integer(), nullable=False, default=0
+    )  # 词条类型 0: 完全匹配 1: 模糊 2: 正则 3: 图片
+    status = db.Column(db.Boolean(), nullable=False, default=True)  # 词条状态
+    problem = db.Column(db.String(), nullable=False)  # 问题，为图片时使用图片hash
+    answer = db.Column(db.String(), nullable=False)  # 回答
+    placeholder = db.Column(db.String())  # 占位符
+    image_path = db.Column(db.String())  # 使用图片作为问题时图片存储的路径
+    create_time = db.Column(db.DateTime(), nullable=False)
+    update_time = db.Column(db.DateTime(), nullable=False)
+
+    @classmethod
+    async def exists(
+        cls,
+        user_id: Optional[int],
+        group_id: Optional[int],
+        problem: str,
+        answer: Optional[str],
+        word_scope: Optional[int] = None,
+        word_type: Optional[int] = None,
+    ) -> bool:
+        """
+        说明:
+            检测问题是否存在
+        参数:
+            :param user_id: 用户id
+            :param group_id: 群号
+            :param problem: 问题
+            :param answer: 回答
+            :param word_scope: 词条范围
+            :param word_type: 词条类型
+        """
+        query = cls.query.where(cls.problem == problem)
+        if user_id:
+            query = query.where(cls.user_qq == user_id)
+        if group_id:
+            query = query.where(cls.group_id == group_id)
+        if answer:
+            query = query.where(cls.answer == answer)
+        if word_type:
+            query = query.where(cls.word_type == word_type)
+        if word_scope:
+            query = query.where(cls.word_scope == word_scope)
+        return bool(await query.gino.first())
+
+    @classmethod
+    async def add_problem_answer(
+        cls,
+        user_id: int,
+        group_id: Optional[int],
+        word_scope: int,
+        word_type: int,
+        problem: Union[str, Message],
+        answer: Union[str, Message],
+    ):
+        """
+        说明:
+            添加或新增一个问答
+        参数:
+            :param user_id: 用户id
+            :param group_id: 群号
+            :param word_scope: 词条范围,
+            :param word_type: 词条类型,
+            :param problem: 问题
+            :param answer: 回答
+        """
+        # 对图片做额外处理
+        image_path = None
+        if word_type == 3:
+            url = get_message_img(problem)[0]
+            _file = (
+                path / "problem" / f"{group_id}" / f"{user_id}_{int(time.time())}.jpg"
+            )
+            _file.parent.mkdir(exist_ok=True, parents=True)
+            await AsyncHttpx.download_file(url, _file)
+            problem = str(get_img_hash(_file))
+            image_path = f"problem/{group_id}/{user_id}_{int(time.time())}.jpg"
+        answer, _list = await cls._answer2format(answer, user_id, group_id)
+        if not await cls.exists(user_id, group_id, problem, answer, word_scope, word_type):
+            await cls.create(
+                user_qq=user_id,
+                group_id=group_id,
+                word_scope=word_scope,
+                word_type=word_type,
+                status=True,
+                problem=problem,
+                answer=answer,
+                image_path=image_path,
+                placeholder=",".join(_list),
+                create_time=datetime.now().replace(microsecond=0),
+                update_time=datetime.now().replace(microsecond=0),
+            )
+
+    @classmethod
+    async def _answer2format(
+        cls, answer: Union[str, Message], user_id: int, group_id: int
+    ) -> Tuple[str, List[Any]]:
+        """
+        说明:
+            将CQ码转化为占位符
+        参数:
+            :param answer: 回答内容
+            :param user_id: 用户id
+            :param group_id: 群号
+        """
+        if isinstance(answer, str):
+            return answer, []
+        _list = []
+        text = ""
+        index = 0
+        for seg in answer:
+            if isinstance(seg, str):
+                text += seg
+            elif seg.type == "text":
+                text += seg.data["text"]
+            elif seg.type == "face":
+                text += f"[face:placeholder_{index}]"
+                _list.append(seg.data['id'])
+            elif seg.type == "at":
+                text += f"[at:placeholder_{index}]"
+                _list.append(seg.data["qq"])
+            else:
+                text += f"[image:placeholder_{index}]"
+                index += 1
+                t = int(time.time())
+                _file = path / "answer" / f"{group_id}" / f"{user_id}_{t}.jpg"
+                _file.parent.mkdir(exist_ok=True, parents=True)
+                await AsyncHttpx.download_file(seg.data["url"], _file)
+                _list.append(f"answer/{group_id}/{user_id}_{t}.jpg")
+        return text, _list
+
+    @classmethod
+    async def _format2answer(
+        cls,
+        problem: str,
+        answer: Union[str, Message],
+        user_id: int,
+        group_id: int,
+        query: Optional["WordBank"] = None,
+    ) -> Union[str, Message]:
+        """
+        说明:
+            将占位符转换为CQ码
+        参数:
+            :param problem: 问题内容
+            :param answer: 回答内容
+            :param user_id: 用户id
+            :param group_id: 群号
+        """
+        if query:
+            answer = query.answer
+        else:
+            query = await cls.query.where(
+                (cls.problem == problem)
+                & (cls.user_qq == user_id)
+                & (cls.group_id == group_id)
+                & (cls.answer == answer)
+            ).gino.first()
+        if query and query.placeholder:
+            type_list = re.findall(rf"\[(.*):placeholder_.*]", answer)
+            temp_answer = re.sub(rf"\[(.*):placeholder_.*]", "{}", answer)
+            seg_list = []
+            for t, p in zip(type_list, query.placeholder.split(",")):
+                if t == "image":
+                    seg_list.append(image(path / p))
+                elif t == "face":
+                    seg_list.append(face(p))
+                elif t == "at":
+                    seg_list.append(at(p))
+            return MessageTemplate(temp_answer, Message).format(*seg_list)
+        return answer
+
+    @classmethod
+    async def check(
+        cls,
+        event: MessageEvent,
+        problem: str,
+        word_scope: Optional[int] = None,
+        word_type: Optional[int] = None,
+    ) -> Optional[Any]:
+        """
+        说明:
+            检测是否包含该问题并获取所有回答
+        参数:
+            :param event: event
+            :param problem: 问题内容
+            :param word_scope: 词条范围
+            :param word_type: 词条类型
+        """
+        query = cls.query
+        sql_text = "SELECT * FROM public.word_bank2 where 1 = 1"
+        # 救命！！没找到gino的正则表达式方法，暂时使用sql语句
+        if isinstance(event, GroupMessageEvent):
+            if word_scope:
+                query = query.where(cls.word_scope == word_scope)
+                sql_text += f" and word_scope = {word_scope}"
+            else:
+                query = query.where(
+                    (cls.group_id == event.group_id) | (cls.word_scope == 0)
+                )
+                sql_text += f" and (group_id = {event.group_id} or word_scope = 0)"
+        else:
+            query = query.where((cls.word_scope == 2) | (cls.word_scope == 0))
+            sql_text += f" and (word_scope = 2 or word_scope = 0)"
+            if word_type:
+                query = query.where(cls.word_scope == word_type)
+                sql_text += f" and word_scope = {word_scope}"
+        # 完全匹配
+        if await query.where(
+            ((cls.word_type == 0) | (cls.word_type == 3)) & (cls.problem == problem)
+        ).gino.first():
+            return query.where(
+                ((cls.word_type == 0) | (cls.word_type == 3)) & (cls.problem == problem)
+            )
+        # 模糊匹配
+        if await db.first(
+            db.text(
+                sql_text
+                + f" and word_type = 1 and :problem like '%' || problem || '%';"
+            ),
+            problem=problem,
+        ):
+            return (
+                sql_text
+                + f" and word_type = 1 and :problem like '%' || problem || '%';"
+            )
+        # 正则匹配
+        if await db.first(
+            db.text(
+                sql_text
+                + f" and word_type = 2 and word_scope != 999 and :problem ~ problem;"
+            ),
+            problem=problem,
+        ):
+            return (
+                sql_text
+                + f" and word_type = 2 and word_scope != 999 and :problem ~ problem;"
+            )
+        # if await db.first(
+        #     db.text(sql_text + f" and word_type = 1 and word_scope != 999 and '{problem}' ~ problem;")
+        # ):
+        #     return sql_text + f" and word_type = 1 and word_scope != 999 and '{problem}' ~ problem;"
+        # return None
+
+    @classmethod
+    async def get_answer(
+        cls,
+        event: MessageEvent,
+        problem: str,
+        word_scope: Optional[int] = None,
+        word_type: Optional[int] = None,
+    ) -> Optional[Union[str, Message]]:
+        """
+        说明:
+            根据问题内容获取随机回答
+        参数:
+            :param event: event
+            :param problem: 问题内容
+            :param word_scope: 词条范围
+            :param word_type: 词条类型
+        """
+        query = await cls.check(event, problem, word_scope, word_type)
+        if query is not None:
+            if isinstance(query, str):
+                answer_list = await db.all(db.text(query), problem=problem)
+                answer = random.choice(answer_list)
+                return (
+                    await cls._format2answer(answer[6], answer[7], answer[1], answer[2])
+                    if answer.placeholder
+                    else answer.answer
+                )
+            else:
+                answer_list = await query.gino.all()
+                answer = random.choice(answer_list)
+                return (
+                    await cls._format2answer(
+                        problem, answer.answer, answer.user_qq, answer.group_id
+                    )
+                    if answer.placeholder
+                    else answer.answer
+                )
+
+    @classmethod
+    async def get_problem_all_answer(
+        cls,
+        problem: str,
+        index: Optional[int] = None,
+        group_id: Optional[int] = None,
+        word_scope: Optional[int] = 0,
+    ) -> List[Union[str, Message]]:
+        """
+        说明:
+            获取指定问题所有回答
+        参数:
+            :param problem: 问题
+            :param index: 下标
+            :param group_id: 群号
+            :param word_scope: 词条范围
+        """
+        if index is not None:
+            if group_id:
+                problem = (await cls.query.where(cls.group_id == group_id).gino.all())[
+                    index
+                ]
+            else:
+                problem = (
+                    await cls.query.where(
+                        cls.word_scope == (word_scope or 0)
+                    ).gino.all()
+                )[index]
+            problem = problem.problem
+        answer = cls.query.where(cls.problem == problem)
+        if group_id:
+            answer = answer.where(cls.group_id == group_id)
+        return [
+            await cls._format2answer("", "", 0, 0, x) for x in (await answer.gino.all())
+        ]
+
+    @classmethod
+    async def delete_group_problem(
+        cls,
+        problem: str,
+        group_id: int,
+        index: Optional[int] = None,
+        word_scope: int = 1,
+    ):
+        """
+        说明:
+            删除指定问题全部或指定回答
+        参数:
+            :param problem: 问题文本
+            :param group_id: 群号
+            :param index: 回答下标
+            :param word_scope: 词条范围
+        """
+        if index is not None:
+            if group_id:
+                query = await cls.query.where(
+                    (cls.group_id == group_id) & (cls.problem == problem)
+                ).gino.all()
+            else:
+                query = await cls.query.where(
+                    (cls.word_scope == 0) & (cls.problem == problem)
+                ).gino.all()
+            await query[index].delete()
+        else:
+            if group_id:
+                await WordBank.delete.where(
+                    (cls.group_id == group_id) & (cls.problem == problem)
+                ).gino.status()
+            else:
+                await WordBank.delete.where(
+                    (cls.word_scope == word_scope) & (cls.problem == problem)
+                ).gino.status()
+
+    @classmethod
+    async def update_group_problem(
+        cls,
+        problem: str,
+        replace_str: str,
+        group_id: int,
+        index: Optional[int] = None,
+        word_scope: int = 1,
+    ):
+        """
+        说明:
+            修改词条问题
+        参数:
+            :param problem: 问题
+            :param replace_str: 替换问题
+            :param group_id: 群号
+            :param index: 下标
+            :param word_scope: 词条范围
+        """
+        if index is not None:
+            if group_id:
+                query = await cls.query.where(
+                    (cls.group_id == group_id) & (cls.problem == problem)
+                ).gino.all()
+            else:
+                query = await cls.query.where(
+                    (cls.word_scope == word_scope) & (cls.problem == problem)
+                ).gino.all()
+            await query[index].update(problem=replace_str).apply()
+        else:
+            if group_id:
+                await WordBank.update.values(problem=replace_str).where(
+                    (cls.group_id == group_id) & (cls.problem == problem)
+                ).gino.status()
+            else:
+                await WordBank.update.values(problem=replace_str).where(
+                    (cls.word_scope == word_scope) & (cls.problem == problem)
+                ).gino.status()
+
+    @classmethod
+    async def get_group_all_problem(
+        cls, group_id: int
+    ) -> List[Tuple[Any, Union[MessageSegment, str]]]:
+        """
+        说明:
+            获取群聊所有词条
+        参数:
+            :param group_id: 群号
+        """
+        return cls._handle_problem(
+            await cls.query.where(cls.group_id == group_id).gino.all()
+        )
+
+    @classmethod
+    async def get_problem_by_scope(cls, word_scope: int):
+        """
+        说明:
+            通过词条范围获取词条
+        参数:
+            :param word_scope: 词条范围
+        """
+        return cls._handle_problem(
+            await cls.query.where(cls.word_scope == word_scope).gino.all()
+        )
+
+    @classmethod
+    async def get_problem_by_type(cls, word_type: int):
+        """
+        说明:
+            通过词条类型获取词条
+        参数:
+            :param word_type: 词条类型
+        """
+        return cls._handle_problem(
+            await cls.query.where(cls.word_type == word_type).gino.all()
+        )
+
+    @classmethod
+    def _handle_problem(cls, msg_list: List[Union[str, MessageSegment]]):
+        """
+            说明:
+            格式化处理问题
+        参数:
+         :param msg_list: 消息列表
+        """
+        _tmp = []
+        problem_list = []
+        for q in msg_list:
+            if q.problem not in _tmp:
+                problem = (
+                    q.problem,
+                    image(path / q.image_path)
+                    if q.image_path
+                    else f"[{int2type[q.word_type]}] " + q.problem,
+                )
+                problem_list.append(problem)
+                _tmp.append(q.problem)
+        return problem_list
+
+    @classmethod
+    async def _move(
+        cls,
+        user_id: int,
+        group_id: Optional[int],
+        problem: Union[str, Message],
+        answer: Union[str, Message],
+        placeholder: str,
+    ):
+        """
+        说明:
+            旧词条图片移动方法
+        参数:
+            :param user_id: 用户id
+            :param group_id: 群号
+            :param problem: 问题
+            :param answer: 回答
+            :param placeholder: 占位符
+        """
+        word_scope = 0
+        word_type = 0
+        # 对图片做额外处理
+        if not await cls.exists(user_id, group_id, problem, answer, word_scope, word_type):
+            await cls.create(
+                user_qq=user_id,
+                group_id=group_id,
+                word_scope=word_scope,
+                word_type=word_type,
+                status=True,
+                problem=problem,
+                answer=answer,
+                image_path=None,
+                placeholder=placeholder,
+                create_time=datetime.now().replace(microsecond=0),
+                update_time=datetime.now().replace(microsecond=0),
+            )
Index: plugins/word_bank/word_handle.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/word_bank/word_handle.py b/plugins/word_bank/word_handle.py
new file mode 100644
--- /dev/null	(date 1663665690887)
+++ b/plugins/word_bank/word_handle.py	(date 1663665690887)
@@ -0,0 +1,318 @@
+import re
+from typing import Tuple, Any, Optional
+
+from nonebot.internal.params import Arg, ArgStr
+from nonebot.typing import T_State
+
+from utils.utils import get_message_at, is_number, get_message_img
+from nonebot.params import CommandArg, RegexGroup, Command
+from nonebot.exception import FinishedException
+from services.log import logger
+from configs.path_config import DATA_PATH
+from utils.message_builder import custom_forward_msg
+from ._model import WordBank
+from nonebot.adapters.onebot.v11 import Bot, GroupMessageEvent, Message, MessageEvent, PrivateMessageEvent, unescape
+from nonebot import on_command, on_regex
+from configs.config import Config
+from ._data_source import delete_word, update_word, show_word
+from ._config import scope2int, type2int
+
+__zx_plugin_name__ = "词库问答 [Admin]"
+__plugin_usage__ = r"""
+usage：
+    对指定问题的随机回答，对相同问题可以设置多个不同回答
+    删除词条后每个词条的id可能会变化，请查看后再删除
+    更推荐使用id方式删除
+    问题回答支持的CQ：at, face, image
+    查看词条命令：群聊时为 群词条+全局词条，私聊时为 私聊词条+全局词条
+    添加词条正则：添加词条(模糊|正则|图片)?问\s*?(\S*\s?\S*)\s*?答\s?(\S*)
+    指令：
+        添加词条 ?[模糊|正则|图片]问...答...：添加问答词条，可重复添加相同问题的不同回答
+        删除词条 [问题/下标] ?[下标]：删除指定词条指定或全部回答
+        修改词条 [问题/下标] [新问题]：修改词条问题
+        查看词条 ?[问题/下标]：查看全部词条或对应词条回答
+        示例：添加词条问图片答嗨嗨嗨
+            [图片]...
+        示例：添加词条@萝莉 我来啦
+        示例：添加词条问谁是萝莉答是我
+        示例：删除词条 谁是萝莉
+        示例：删除词条 谁是萝莉 0
+        示例：删除词条 id:0 1
+        示例：修改词条 谁是萝莉 是你
+        示例：修改词条 id:0 是你
+        示例：查看词条
+        示例：查看词条 谁是萝莉
+        示例：查看词条 id:0    (群/私聊词条)
+        示例：查看词条 gid:0   (全局词条)
+""".strip()
+__plugin_superuser_usage__ = r"""
+usage:
+    在私聊中超级用户额外设置
+    指令：
+        (全局|私聊)?添加词条\s*?(模糊|正则|图片)?问\s*?(\S*\s?\S*)\s*?答\s?(\S*)：添加问答词条，可重复添加相同问题的不同回答
+        全局添加词条
+        私聊添加词条
+        （私聊情况下）删除词条: 删除私聊词条
+        （私聊情况下）删除全局词条
+        （私聊情况下）修改词条: 修改词条私聊词条
+        （私聊情况下）修改全局词条
+        用法与普通用法相同
+""".strip()
+__plugin_des__ = "自定义词条内容随机回复"
+__plugin_cmd__ = [
+    "添加词条 ?[模糊/关键字]问...答..",
+    "删除词条 [问题/下标] ?[下标]",
+    "修改词条 [问题/下标] ?[下标/新回答] [新回答]",
+    "查看词条 ?[问题/下标]",
+]
+__plugin_version__ = 0.3
+__plugin_author__ = "HibiKier & yajiwa"
+__plugin_settings__ = {
+    "admin_level": Config.get_config("word_bank", "WORD_BANK_LEVEL [LEVEL]"),
+    "cmd": ["词库问答", "添加词条", "删除词条", "修改词条", "查看词条"],
+}
+
+data_dir = DATA_PATH / "word_bank"
+data_dir.mkdir(parents=True, exist_ok=True)
+
+add_word = on_regex(
+    r"^(全局|私聊)?添加词条\s*?(模糊|正则|图片)?问\s*?(\S*\s?\S*)\s*?答\s?(\S*)", priority=5, block=True
+)
+
+delete_word_matcher = on_command("删除词条", aliases={'删除全局词条'}, priority=5, block=True)
+
+update_word_matcher = on_command("修改词条", aliases={'修改全局词条'}, priority=5, block=True)
+
+show_word_matcher = on_command("显示词条", aliases={"查看词条"}, priority=5, block=True)
+
+
+@add_word.handle()
+async def _(
+    bot: Bot,
+    event: MessageEvent,
+    state: T_State,
+    reg_group: Tuple[Any, ...] = RegexGroup(),
+):
+    if isinstance(event, PrivateMessageEvent) and str(event.user_id) not in bot.config.superusers:
+        await add_word.finish('权限不足捏')
+    word_scope, word_type, problem, answer = reg_group
+    if (
+        word_scope
+        and word_scope in ["全局", "私聊"]
+        and str(event.user_id) not in bot.config.superusers
+    ):
+        await add_word.finish("权限不足，无法添加该范围词条")
+    if (not problem or not problem.strip()) and word_type != "图片":
+        await add_word.finish("词条问题不能为空！")
+    if (not answer or not answer.strip()) and not len(get_message_img(event.message)):
+        await add_word.finish("词条回答不能为空！")
+    if word_type != "图片":
+        state["problem_image"] = "YES"
+    answer = event.message
+    # 对at问题对额外处理
+    if get_message_at(event.message):
+        for index, seg in enumerate(event.message):
+            if seg.type == 'text' and '答' in str(seg):
+                _problem = event.message[:index]
+                answer = event.message[index:]
+                answer[0] = str(answer[0])[str(answer[0]).index('答')+1:]
+                _problem[0] = str(_problem[0])[str(_problem[0]).index('问')+1:]
+                if _problem[-1].type != 'at' or seg.data['text'][:seg.data['text'].index('答')].lstrip():
+                    _problem.append(seg.data['text'][:seg.data['text'].index('答')])
+                temp = ''
+                for g in _problem:
+                    if isinstance(g, str):
+                        temp += g
+                    elif g.type == 'text':
+                        temp += g.data['text']
+                    elif g.type == 'at':
+                        temp += f"[at:{g.data['qq']}]"
+                problem = temp
+                break
+    problem = unescape(problem)
+    event.message[0] = event.message[0].data["text"].split('答', maxsplit=1)[-1].strip()
+    state["word_scope"] = word_scope
+    state["word_type"] = word_type
+    state["problem"] = problem
+    state["answer"] = answer
+
+
+@add_word.got("problem_image", prompt="请发送该回答设置的问题图片")
+async def _(
+    event: MessageEvent,
+    word_scope: Optional[str] = ArgStr("word_scope"),
+    word_type: Optional[str] = ArgStr("word_type"),
+    problem: Optional[str] = ArgStr("problem"),
+    answer: Message = Arg("answer"),
+    problem_image: Message = Arg("problem_image"),
+):
+    try:
+        if word_type == "正则":
+            try:
+                re.compile(problem)
+            except re.error:
+                await add_word.finish(f"添加词条失败，正则表达式 {problem} 非法！")
+        await WordBank.add_problem_answer(
+            event.user_id,
+            event.group_id if isinstance(event, GroupMessageEvent) and (not word_scope or word_scope == '1') else 0,
+            scope2int[word_scope] if word_scope else 1,
+            type2int[word_type] if word_type else 0,
+            problem or problem_image,
+            answer,
+        )
+    except Exception as e:
+        if isinstance(e, FinishedException):
+            await add_word.finish()
+        logger.error(
+            f"(USER {event.user_id}, GROUP "
+            f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+            f" 添加词条 {problem} 发生错误 {type(e)}: {e} "
+        )
+        await add_word.finish(f"添加词条 {problem} 发生错误！")
+    await add_word.send("添加词条 " + (problem or problem_image) + " 成功！")
+    logger.info(
+        f"(USER {event.user_id}, GROUP "
+        f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+        f" 添加词条 {problem} 成功！"
+    )
+
+
+@delete_word_matcher.handle()
+async def _(event: GroupMessageEvent, arg: Message = CommandArg()):
+    if not (msg := arg.extract_plain_text().strip()):
+        await delete_word_matcher.finish("此命令之后需要跟随指定词条，通过“显示词条“查看")
+    result = await delete_word(msg, event.group_id)
+    await delete_word_matcher.send(result)
+    logger.info(
+        f"(USER {event.user_id}, GROUP "
+        f"{event.group_id})"
+        f" 删除词条:" + msg
+    )
+
+
+@delete_word_matcher.handle()
+async def _(bot: Bot, event: PrivateMessageEvent, arg: Message = CommandArg(), cmd: Tuple[str, ...] = Command()):
+    if str(event.user_id) not in bot.config.superusers:
+        await delete_word_matcher.finish("权限不足捏！")
+    if not (msg := arg.extract_plain_text().strip()):
+        await delete_word_matcher.finish("此命令之后需要跟随指定词条，通过“显示词条“查看")
+    result = await delete_word(msg, word_scope=2 if cmd[0] == '删除词条' else 0)
+    await delete_word_matcher.send(result)
+    logger.info(
+        f"(USER {event.user_id})"
+        f" 删除词条:" + msg
+    )
+
+
+@update_word_matcher.handle()
+async def _(event: GroupMessageEvent, arg: Message = CommandArg()):
+    if not (msg := arg.extract_plain_text().strip()):
+        await update_word_matcher.finish("此命令之后需要跟随指定词条，通过“显示词条“查看")
+    if len(msg.split()) < 2:
+        await update_word_matcher.finish("此命令需要两个参数，请查看帮助")
+    result = await update_word(msg, event.group_id)
+    await update_word_matcher.send(result)
+    logger.info(
+        f"(USER {event.user_id}, GROUP "
+        f"{event.group_id})"
+        f" 更新词条词条:" + msg
+    )
+
+
+@update_word_matcher.handle()
+async def _(bot: Bot, event: PrivateMessageEvent, arg: Message = CommandArg(), cmd: Tuple[str, ...] = Command()):
+    if str(event.user_id) not in bot.config.superusers:
+        await delete_word_matcher.finish("权限不足捏！")
+    if not (msg := arg.extract_plain_text().strip()):
+        await update_word_matcher.finish("此命令之后需要跟随指定词条，通过“显示词条“查看")
+    if len(msg.split()) < 2:
+        await update_word_matcher.finish("此命令需要两个参数，请查看帮助")
+    result = await update_word(msg, word_scope=2 if cmd[0] == '修改词条' else 0)
+    await update_word_matcher.send(result)
+    logger.info(
+        f"(USER {event.user_id})"
+        f" 更新词条词条:" + msg
+    )
+
+
+@show_word_matcher.handle()
+async def _(bot: Bot, event: GroupMessageEvent, arg: Message = CommandArg()):
+    if problem := arg.extract_plain_text().strip():
+        id_ = None
+        gid = None
+        if problem.startswith("id:"):
+            id_ = problem.split(":")[-1]
+            if (
+                not is_number(id_)
+                or int(id_) < 0
+                or int(id_)
+                >= len(await WordBank.get_group_all_problem(event.group_id))
+            ):
+                await show_word_matcher.finish("id必须为数字且在范围内")
+            id_ = int(id_)
+        if problem.startswith("gid:"):
+            gid = problem.split(":")[-1]
+            if (
+                not is_number(gid)
+                or int(gid) < 0
+                or int(gid)
+                >= len(await WordBank.get_problem_by_scope(0))
+            ):
+                await show_word_matcher.finish("gid必须为数字且在范围内")
+            gid = int(gid)
+        msg_list = await show_word(problem, id_, gid, None if gid else event.group_id)
+    else:
+        msg_list = await show_word(problem, None, None, event.group_id)
+    if isinstance(msg_list, str):
+        await show_word_matcher.send(msg_list)
+    else:
+        await bot.send_group_forward_msg(
+            group_id=event.group_id, messages=custom_forward_msg(msg_list, bot.self_id)
+        )
+    logger.info(
+        f"(USER {event.user_id}, GROUP "
+        f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+        f" 发送查看词条回答:" + problem
+    )
+
+
+@show_word_matcher.handle()
+async def _(event: PrivateMessageEvent, arg: Message = CommandArg()):
+    if problem := arg.extract_plain_text().strip():
+        id_ = None
+        gid = None
+        if problem.startswith("id:"):
+            id_ = problem.split(":")[-1]
+            if (
+                not is_number(id_)
+                or int(id_) < 0
+                or int(id_)
+                > len(await WordBank.get_problem_by_scope(2))
+            ):
+                await show_word_matcher.finish("id必须为数字且在范围内")
+            id_ = int(id_)
+        if problem.startswith("gid:"):
+            gid = problem.split(":")[-1]
+            if (
+                not is_number(gid)
+                or int(gid) < 0
+                or int(gid)
+                > len(await WordBank.get_problem_by_scope(0))
+            ):
+                await show_word_matcher.finish("gid必须为数字且在范围内")
+            gid = int(gid)
+        msg_list = await show_word(problem, id_, gid, word_scope=2 if id_ is not None else None)
+    else:
+        msg_list = await show_word(problem, None, None, word_scope=2)
+    if isinstance(msg_list, str):
+        await show_word_matcher.send(msg_list)
+    else:
+        t = ""
+        for msg in msg_list:
+            t += msg + '\n'
+        await show_word_matcher.send(t[:-1])
+    logger.info(
+        f"(USER {event.user_id}, GROUP "
+        f"private)"
+        f" 发送查看词条回答:" + problem
+    )
Index: plugins/genshin/query_user/mihoyobbs_sign/mihoyobbs.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/mihoyobbs_sign/mihoyobbs.py b/plugins/genshin/query_user/mihoyobbs_sign/mihoyobbs.py
new file mode 100644
--- /dev/null	(date 1663665690883)
+++ b/plugins/genshin/query_user/mihoyobbs_sign/mihoyobbs.py	(date 1663665690883)
@@ -0,0 +1,193 @@
+from services.log import logger
+from .error import CookieError
+from utils.http_utils import AsyncHttpx
+from .setting import *
+from .tools import *
+import json
+
+today_get_coins = 0
+today_have_get_coins = 0  # 这个变量以后可能会用上，先留着了
+Have_coins = 0
+
+
+class Mihoyobbs:
+    def __init__(self, stuid: str, stoken: str, cookie: str) -> None:
+        self.postsList = None
+        self.headers = {
+            "DS": get_ds(web=False),
+            "cookie": f'stuid={stuid};stoken={stoken}',
+            "x-rpc-client_type": mihoyobbs_Client_type,
+            "x-rpc-app_version": mihoyobbs_Version,
+            "x-rpc-sys_version": "6.0.1",
+            "x-rpc-channel": "miyousheluodi",
+            "x-rpc-device_id": get_device_id(cookie=cookie),
+            "x-rpc-device_name": random_text(random.randint(1, 10)),
+            "x-rpc-device_model": "Mi 10",
+            "Referer": "https://app.mihoyo.com",
+            "Host": "bbs-api.mihoyo.com",
+            "User-Agent": "okhttp/4.8.0"
+        }
+        self.Task_do = {
+            "bbs_Sign": False,
+            "bbs_Read_posts": False,
+            "bbs_Read_posts_num": 3,
+            "bbs_Like_posts": False,
+            "bbs_Like_posts_num": 5,
+            "bbs_Share": False
+        }
+
+    async def init(self):
+        await self.get_tasks_list()
+        # 如果这三个任务都做了就没必要获取帖子了
+        if self.Task_do["bbs_Read_posts"] and self.Task_do["bbs_Like_posts"] and self.Task_do["bbs_Share"]:
+            pass
+        else:
+            self.postsList = await self.get_list()
+
+    async def refresh_list(self) -> None:
+        self.postsList = await self.get_list()
+
+    # 获取任务列表，用来判断做了哪些任务
+    async def get_tasks_list(self):
+        global today_get_coins
+        global today_have_get_coins
+        global Have_coins
+        logger.info("正在获取任务列表")
+        req = await AsyncHttpx.get(url=bbs_Tasks_list, headers=self.headers)
+        data = req.json()
+        if "err" in data["message"] or data["retcode"] == -100:
+            logger.error("获取任务列表失败，你的cookie可能已过期，请重新设置cookie。")
+            raise CookieError('Cookie expires')
+        else:
+            today_get_coins = data["data"]["can_get_points"]
+            today_have_get_coins = data["data"]["already_received_points"]
+            Have_coins = data["data"]["total_points"]
+            # 如果当日可获取米游币数量为0直接判断全部任务都完成了
+            if today_get_coins == 0:
+                self.Task_do["bbs_Sign"] = True
+                self.Task_do["bbs_Read_posts"] = True
+                self.Task_do["bbs_Like_posts"] = True
+                self.Task_do["bbs_Share"] = True
+            else:
+                # 如果第0个大于或等于62则直接判定任务没做
+                if data["data"]["states"][0]["mission_id"] >= 62:
+                    logger.info(f"今天可以获得{today_get_coins}个米游币")
+                    pass
+                else:
+                    logger.info(f"还有任务未完成，今天还能获得{today_get_coins}米游币")
+                    for i in data["data"]["states"]:
+                        # 58是讨论区签到
+                        if i["mission_id"] == 58:
+                            if i["is_get_award"]:
+                                self.Task_do["bbs_Sign"] = True
+                        # 59是看帖子
+                        elif i["mission_id"] == 59:
+                            if i["is_get_award"]:
+                                self.Task_do["bbs_Read_posts"] = True
+                            else:
+                                self.Task_do["bbs_Read_posts_num"] -= i["happened_times"]
+                        # 60是给帖子点赞
+                        elif i["mission_id"] == 60:
+                            if i["is_get_award"]:
+                                self.Task_do["bbs_Like_posts"] = True
+                            else:
+                                self.Task_do["bbs_Like_posts_num"] -= i["happened_times"]
+                        # 61是分享帖子
+                        elif i["mission_id"] == 61:
+                            if i["is_get_award"]:
+                                self.Task_do["bbs_Share"] = True
+                                # 分享帖子，是最后一个任务，到这里了下面都是一次性任务，直接跳出循环
+                                break
+
+    # 获取要帖子列表
+    async def get_list(self) -> list:
+        temp_list = []
+        logger.info("正在获取帖子列表......")
+        req = await AsyncHttpx.get(url=bbs_List_url.format(mihoyobbs_List_Use[0]["forumId"]),
+                                   headers=self.headers)
+        data = req.json()["data"]["list"]
+        for n in range(5):
+            r_l = random.choice(data)
+            while r_l["post"]["subject"] in str(temp_list):
+                r_l = random.choice(data)
+            temp_list.append([r_l["post"]["post_id"], r_l["post"]["subject"]])
+            # temp_list.append([data["data"]["list"][n]["post"]["post_id"], data["data"]["list"][n]["post"]["subject"]])
+
+        logger.info("已获取{}个帖子".format(len(temp_list)))
+        return temp_list
+
+    # 进行签到操作
+    async def signing(self):
+        if self.Task_do["bbs_Sign"]:
+            logger.info("讨论区任务已经完成过了~")
+        else:
+            logger.info("正在签到......")
+            header = {}
+            header.update(self.headers)
+            for i in mihoyobbs_List_Use:
+                header["DS"] = get_ds2("", json.dumps({"gids": i["id"]}))
+                req = await AsyncHttpx.post(url=bbs_Sign_url, json={"gids": i["id"]}, headers=header)
+                data = req.json()
+                if "err" not in data["message"]:
+                    logger.info(str(i["name"] + data["message"]))
+                    time.sleep(random.randint(2, 8))
+                else:
+                    logger.error("签到失败，你的cookie可能已过期，请重新设置cookie。")
+                    raise CookieError('Cookie expires')
+
+    # 看帖子
+    async def read_posts(self):
+        if self.Task_do["bbs_Read_posts"]:
+            logger.info("看帖任务已经完成过了~")
+        else:
+            logger.info("正在看帖......")
+            for i in range(self.Task_do["bbs_Read_posts_num"]):
+                req = await AsyncHttpx.get(url=bbs_Detail_url.format(self.postsList[i][0]), headers=self.headers)
+                data = req.json()
+                if data["message"] == "OK":
+                    logger.debug("看帖：{} 成功".format(self.postsList[i][1]))
+                time.sleep(random.randint(2, 8))
+
+    # 点赞
+    async def like_posts(self):
+        if self.Task_do["bbs_Like_posts"]:
+            logger.info("点赞任务已经完成过了~")
+        else:
+            logger.info("正在点赞......")
+            for i in range(self.Task_do["bbs_Like_posts_num"]):
+                req = await AsyncHttpx.post(url=bbs_Like_url, headers=self.headers,
+                                            json={"post_id": self.postsList[i][0], "is_cancel": False})
+                data = req.json()
+                if data["message"] == "OK":
+                    logger.debug("点赞：{} 成功".format(self.postsList[i][1]))
+                # 判断取消点赞是否打开
+                # if config.config["mihoyobbs"]["un_like"] :
+                #     time.sleep(random.randint(2, 8))
+                #     req = httpx.post(url=bbs_Like_url, headers=self.headers,
+                #                     json={"post_id": self.postsList[i][0], "is_cancel": True})
+                #     data = req.json()
+                #     if data["message"] == "OK":
+                #         logger.debug("取消点赞：{} 成功".format(self.postsList[i][1]))
+                time.sleep(random.randint(2, 8))
+
+                # 分享操作
+
+    async def share_post(self):
+        if self.Task_do["bbs_Share"]:
+            logger.info("分享任务已经完成过了~")
+        else:
+            logger.info("正在执行分享任务......")
+            for i in range(3):
+                req = await AsyncHttpx.get(url=bbs_Share_url.format(self.postsList[0][0]), headers=self.headers)
+                data = req.json()
+                if data["message"] == "OK":
+                    logger.debug("分享：{} 成功".format(self.postsList[0][1]))
+                    logger.info("分享任务执行成功......")
+                    break
+                else:
+                    logger.debug(f"分享任务执行失败，正在执行第{i + 2}次，共3次")
+                    time.sleep(random.randint(2, 8))
+            time.sleep(random.randint(2, 8))
+
+
+
Index: plugins/genshin/query_user/mihoyobbs_sign/tools.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/mihoyobbs_sign/tools.py b/plugins/genshin/query_user/mihoyobbs_sign/tools.py
new file mode 100644
--- /dev/null	(date 1663665690883)
+++ b/plugins/genshin/query_user/mihoyobbs_sign/tools.py	(date 1663665690883)
@@ -0,0 +1,65 @@
+import uuid
+import time
+import random
+import string
+import hashlib
+from .setting import *
+
+
+# md5计算
+def md5(text: str) -> str:
+    md5 = hashlib.md5()
+    md5.update(text.encode())
+    return md5.hexdigest()
+
+
+# 随机文本
+def random_text(num: int) -> str:
+    return ''.join(random.sample(string.ascii_lowercase + string.digits, num))
+
+
+# 时间戳
+def timestamp() -> int:
+    return int(time.time())
+
+
+# 获取请求Header里的DS 当web为true则生成网页端的DS
+def get_ds(web: bool) -> str:
+    if web:
+        n = mihoyobbs_Salt_web
+    else:
+        n = mihoyobbs_Salt
+    i = str(timestamp())
+    r = random_text(6)
+    c = md5("salt=" + n + "&t=" + i + "&r=" + r)
+    return f"{i},{r},{c}"
+
+
+# 获取请求Header里的DS(版本2) 这个版本ds之前见到都是查询接口里的
+def get_ds2(q: str, b: str) -> str:
+    n = mihoyobbs_Salt2
+    i = str(timestamp())
+    r = str(random.randint(100001, 200000))
+    add = f'&b={b}&q={q}'
+    c = md5("salt=" + n + "&t=" + i + "&r=" + r + add)
+    return f"{i},{r},{c}"
+
+
+# 生成一个device id
+def get_device_id(cookie) -> str:
+    return str(uuid.uuid3(uuid.NAMESPACE_URL, cookie))
+
+
+# 获取签到的奖励名称
+def get_item(raw_data: dict) -> str:
+    temp_name = raw_data["name"]
+    temp_cnt = raw_data["cnt"]
+    return f"{temp_name}x{temp_cnt}"
+
+
+# 获取明天早晨0点的时间戳
+def next_day() -> int:
+    now_time = int(time.time())
+    next_day_time = now_time - now_time % 86400 + time.timezone + 86400
+    return next_day_time
+
Index: plugins/genshin/query_user/mihoyobbs_sign/setting.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/mihoyobbs_sign/setting.py b/plugins/genshin/query_user/mihoyobbs_sign/setting.py
new file mode 100644
--- /dev/null	(date 1663665690883)
+++ b/plugins/genshin/query_user/mihoyobbs_sign/setting.py	(date 1663665690883)
@@ -0,0 +1,124 @@
+# 米游社的Salt
+mihoyobbs_Salt = "z8DRIUjNDT7IT5IZXvrUAxyupA1peND9"
+mihoyobbs_Salt2 = "t0qEgfub6cvueAPgR5m9aQWWVciEer7v"
+mihoyobbs_Salt_web = "9nQiU3AV0rJSIBWgdynfoGMGKaklfbM7"
+# 米游社的版本
+mihoyobbs_Version = "2.34.1"  # Slat和Version相互对应
+# 米游社的客户端类型
+mihoyobbs_Client_type = "2"  # 1为ios 2为安卓
+mihoyobbs_Client_type_web = "5"  # 4为pc web 5为mobile web
+# 米游社的分区列表
+mihoyobbs_List = [{
+    "id": "1",
+    "forumId": "1",
+    "name": "崩坏3",
+    "url": "https://bbs.mihoyo.com/bh3/"
+}, {
+    "id": "2",
+    "forumId": "26",
+    "name": "原神",
+    "url": "https://bbs.mihoyo.com/ys/"
+}, {
+    "id": "3",
+    "forumId": "30",
+    "name": "崩坏2",
+    "url": "https://bbs.mihoyo.com/bh2/"
+}, {
+    "id": "4",
+    "forumId": "37",
+    "name": "未定事件簿",
+    "url": "https://bbs.mihoyo.com/wd/"
+}, {
+    "id": "5",
+    "forumId": "34",
+    "name": "大别野",
+    "url": "https://bbs.mihoyo.com/dby/"
+}, {
+    "id": "6",
+    "forumId": "52",
+    "name": "崩坏：星穹铁道",
+    "url": "https://bbs.mihoyo.com/sr/"
+}, {
+    "id": "8",
+    "forumId": "57",
+    "name": "绝区零",
+    "url": "https://bbs.mihoyo.com/zzz/"
+}]
+
+game_id2name = {
+    "bh2_cn": "崩坏2",
+    "bh3_cn": "崩坏3",
+    "nxx_cn": "未定事件簿",
+    "hk4e_cn": "原神",
+}
+# Config Load之后run里面进行列表的选择
+mihoyobbs_List_Use = [{
+    "id": "2",
+    "forumId": "26",
+    "name": "原神",
+    "url": "https://bbs.mihoyo.com/ys/"
+},
+    # 不玩原神可以把签到讨论区换为大别墅
+    #     {
+    #     "id": "5",
+    #     "forumId": "34",
+    #     "name": "大别野",
+    #     "url": "https://bbs.mihoyo.com/dby/"
+    # }
+]
+
+# 游戏签到的请求头
+headers = {
+    'Accept': 'application/json, text/plain, */*',
+    'DS': "",
+    'Origin': 'https://webstatic.mihoyo.com',
+    'x-rpc-app_version': mihoyobbs_Version,
+    'User-Agent': 'Mozilla/5.0 (Linux; Android 12; Unspecified Device) AppleWebKit/537.36 (KHTML, like Gecko) '
+                  f'Version/4.0 Chrome/103.0.5060.129 Mobile Safari/537.36 miHoYoBBS/{mihoyobbs_Version}',
+    'x-rpc-client_type': mihoyobbs_Client_type_web,
+    'Referer': '',
+    'Accept-Encoding': 'gzip, deflate',
+    'Accept-Language': 'zh-CN,en-US;q=0.8',
+    'X-Requested-With': 'com.mihoyo.hyperion',
+    "Cookie": "",
+    'x-rpc-device_id': ""
+}
+
+# 通用设置
+bbs_Api = "https://bbs-api.mihoyo.com"
+web_Api = "https://api-takumi.mihoyo.com"
+account_Info_url = web_Api + "/binding/api/getUserGameRolesByCookie?game_biz="
+
+# 米游社的API列表
+bbs_Cookie_url = "https://webapi.account.mihoyo.com/Api/cookie_accountinfo_by_loginticket?login_ticket={}"
+bbs_Cookie_url2 = web_Api + "/auth/api/getMultiTokenByLoginTicket?login_ticket={}&token_types=3&uid={}"
+bbs_Tasks_list = bbs_Api + "/apihub/sapi/getUserMissionsState"  # 获取任务列表
+bbs_Sign_url = bbs_Api + "/apihub/app/api/signIn"  # post
+bbs_List_url = bbs_Api + "/post/api/getForumPostList?forum_id={}&is_good=false&is_hot=false&page_size=20&sort_type=1"
+bbs_Detail_url = bbs_Api + "/post/api/getPostFull?post_id={}"
+bbs_Share_url = bbs_Api + "/apihub/api/getShareConf?entity_id={}&entity_type=1"
+bbs_Like_url = bbs_Api + "/apihub/sapi/upvotePost"  # post json
+
+# 崩坏2自动签到相关的相关设置
+honkai2_Act_id = "e202203291431091"
+honkai2_checkin_rewards = f'{web_Api}/event/luna/home?lang=zh-cn&act_id={honkai2_Act_id}'
+honkai2_Is_signurl = web_Api + "/event/luna/info?lang=zh-cn&act_id={}&region={}&uid={}"
+honkai2_Sign_url = web_Api + "/event/luna/sign"
+
+# 崩坏3自动签到相关的设置
+honkai3rd_Act_id = "e202207181446311"
+honkai3rd_checkin_rewards = f'{web_Api}/event/luna/home?lang=zh-cn&act_id={honkai3rd_Act_id}'
+honkai3rd_Is_signurl = web_Api + "/event/luna/info?lang=zh-cn&act_id={}&region={}&uid={}"
+honkai3rd_Sign_url = web_Api + "/event/luna/sign"
+
+# 未定事件簿自动签到相关设置
+tearsofthemis_Act_id = "e202202251749321"
+tearsofthemis_checkin_rewards = f'{web_Api}/event/luna/home?lang=zh-cn&act_id={tearsofthemis_Act_id}'
+tearsofthemis_Is_signurl = honkai2_Is_signurl
+tearsofthemis_Sign_url = honkai2_Sign_url  # 和二崩完全一致
+
+# 原神自动签到相关的设置
+genshin_Act_id = "e202009291139501"
+genshin_checkin_rewards = f'{web_Api}/event/bbs_sign_reward/home?act_id={genshin_Act_id}'
+genshin_Is_signurl = web_Api + "/event/bbs_sign_reward/info?act_id={}&region={}&uid={}"
+genshin_Signurl = web_Api + "/event/bbs_sign_reward/sign"
Index: plugins/genshin/query_user/mihoyobbs_sign/error.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/mihoyobbs_sign/error.py b/plugins/genshin/query_user/mihoyobbs_sign/error.py
new file mode 100644
--- /dev/null	(date 1663665690883)
+++ b/plugins/genshin/query_user/mihoyobbs_sign/error.py	(date 1663665690883)
@@ -0,0 +1,6 @@
+class CookieError(Exception):
+    def __init__(self, info):
+        self.info = info
+
+    def __str__(self):
+        return repr(self.info)
Index: plugins/word_bank/_config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/word_bank/_config.py b/plugins/word_bank/_config.py
new file mode 100644
--- /dev/null	(date 1663665690887)
+++ b/plugins/word_bank/_config.py	(date 1663665690887)
@@ -0,0 +1,23 @@
+
+
+scope2int = {
+    "全局": 0,
+    "群聊": 1,
+    "私聊": 2,
+}
+
+type2int = {
+    "精准": 0,
+    "模糊": 1,
+    "正则": 2,
+    "图片": 3,
+}
+
+int2type = {
+    0: "精准",
+    1: "模糊",
+    2: "正则",
+    3: "图片",
+}
+
+
Index: plugins/genshin/query_user/mihoyobbs_sign/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/mihoyobbs_sign/__init__.py b/plugins/genshin/query_user/mihoyobbs_sign/__init__.py
new file mode 100644
--- /dev/null	(date 1663665690883)
+++ b/plugins/genshin/query_user/mihoyobbs_sign/__init__.py	(date 1663665690883)
@@ -0,0 +1,81 @@
+from nonebot.adapters.onebot.v11 import MessageEvent
+from nonebot import on_command
+from services.log import logger
+# from .init_task import add_job, scheduler, _sign
+# from apscheduler.jobstores.base import JobLookupError
+from .._models import Genshin
+from nonebot.params import Command
+from typing import Tuple
+from .mihoyobbs import *
+
+
+__zx_plugin_name__ = "米游社自动签到"
+__plugin_usage__ = """
+usage：
+    发送'米游社签到'或绑定原神自动签到
+    即可手动/自动进行米游社签到
+    （若启用了原神自动签到会在签到原神同时完成米游币领取）
+    --> 每天白嫖90-110米游币不香吗
+    注：需要重新绑定原神cookie！！！
+    遇到问题请提issue或@作者
+""".strip()
+__plugin_des__ = "米游社自动签到任务"
+__plugin_cmd__ = ["米游社签到", "米游社我硬签"]
+__plugin_type__ = ("原神相关",)
+__plugin_version__ = 0.1
+__plugin_author__ = "HDU_Nbsp"
+__plugin_settings__ = {
+    "level": 5,
+    "default_status": True,
+    "limit_superuser": False,
+    "cmd": ["原神签到"],
+}
+
+mihoyobbs_matcher = on_command(
+    "米游社签到", aliases={"米游社我硬签"}, priority=5, block=True
+)
+
+
+@mihoyobbs_matcher.handle()
+async def _(event: MessageEvent, cmd: Tuple[str, ...] = Command()):
+    await mihoyobbs_matcher.send("提交米游社签到申请", at_sender=True)
+    return_data = await mihoyobbs_sign(event.user_id)
+    if return_data:
+        await mihoyobbs_matcher.finish(return_data, at_sender=True)
+    else:
+        await mihoyobbs_matcher.finish("米游社签到失败，请查看控制台输出", at_sender=True)
+
+
+async def mihoyobbs_sign(user_id):
+    uid = await Genshin.get_user_uid(user_id)
+    if not uid or not await Genshin.get_user_cookie(uid, True):
+        await mihoyobbs_matcher.finish("请先绑定uid和cookie！", at_sender=True)
+    stuid = await Genshin.get_stuid(uid)
+    stoken = await Genshin.get_stoken(uid)
+    cookie = await Genshin.get_user_cookie(uid)
+    bbs = mihoyobbs.Mihoyobbs(stuid=stuid, stoken=stoken, cookie=cookie)
+    await bbs.init()
+    return_data = ""
+    if bbs.Task_do["bbs_Sign"] and bbs.Task_do["bbs_Read_posts"] and bbs.Task_do["bbs_Like_posts"] and \
+            bbs.Task_do["bbs_Share"]:
+        return_data += f"今天的米游社签到任务已经全部完成了！\n" \
+                              f"一共获得{mihoyobbs.today_have_get_coins}个米游币\n目前有{mihoyobbs.Have_coins}个米游币"
+        logger.info(f"今天已经全部完成了！一共获得{mihoyobbs.today_have_get_coins}个米游币，目前有{mihoyobbs.Have_coins}个米游币")
+    else:
+        i = 0
+        print("开始签到")
+        print(mihoyobbs.today_have_get_coins)
+        while mihoyobbs.today_get_coins != 0 and i < 3:
+            # if i > 0:
+            await bbs.refresh_list()
+            await bbs.signing()
+            await bbs.read_posts()
+            await bbs.like_posts()
+            await bbs.share_post()
+            await bbs.get_tasks_list()
+            i += 1
+        return_data += "\n" + f"今天已经获得{mihoyobbs.today_have_get_coins}个米游币\n" \
+                              f"还能获得{mihoyobbs.today_get_coins}个米游币\n目前有{mihoyobbs.Have_coins}个米游币"
+        logger.info(f"今天已经获得{mihoyobbs.today_have_get_coins}个米游币，"
+                 f"还能获得{mihoyobbs.today_get_coins}个米游币，目前有{mihoyobbs.Have_coins}个米游币")
+    return return_data
Index: plugins/word_bank/_old_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/word_bank/_old_model.py b/plugins/word_bank/_old_model.py
new file mode 100644
--- /dev/null	(date 1663665690887)
+++ b/plugins/word_bank/_old_model.py	(date 1663665690887)
@@ -0,0 +1,20 @@
+from services.db_context import db
+from typing import List
+
+
+class WordBank(db.Model):
+    __tablename__ = "word_bank"
+
+    user_qq = db.Column(db.BigInteger(), nullable=False)
+    group_id = db.Column(db.Integer())
+    search_type = db.Column(db.Integer(), nullable=False, default=0)
+    problem = db.Column(db.String(), nullable=False)
+    answer = db.Column(db.String(), nullable=False)
+    format = db.Column(db.String())
+    create_time = db.Column(db.DateTime(), nullable=False)
+    update_time = db.Column(db.DateTime(), nullable=False)
+
+    @classmethod
+    async def get_all(cls) -> List['WordBank']:
+        return await cls.query.gino.all()
+
Index: plugins/check_zhenxun_update/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/check_zhenxun_update/__init__.py b/plugins/check_zhenxun_update/__init__.py
new file mode 100755
--- /dev/null	(date 1663666722924)
+++ b/plugins/check_zhenxun_update/__init__.py	(date 1663666722924)
@@ -0,0 +1,129 @@
+from nonebot.adapters.onebot.v11 import Bot, MessageEvent
+from nonebot.permission import SUPERUSER
+from nonebot import on_command
+from .data_source import check_update, get_latest_version_data
+from services.log import logger
+from utils.utils import scheduler, get_bot
+from pathlib import Path
+from configs.config import NICKNAME, Config
+from nonebot.rule import to_me
+from nonebot.params import ArgStr
+import platform
+import os
+
+
+__zx_plugin_name__ = "自动更新 [Superuser]"
+__plugin_usage__ = """
+usage：
+    检查更新真寻最新版本，包括了自动更新
+    指令：
+        检查更新真寻
+        重启
+""".strip()
+__plugin_des__ = "就算是真寻也会成长的"
+__plugin_cmd__ = ["检查更新真寻", "重启"]
+__plugin_version__ = 0.1
+__plugin_author__ = "HibiKier"
+__plugin_configs__ = {
+    "UPDATE_REMIND": {
+        "value": True,
+        "help": "真寻是否检测版本状态",
+        "default": True,
+    },
+    "AUTO_UPDATE_ZHENXUN": {
+        "value": False,
+        "help": "真寻是否自动检查更新",
+        "default": False,
+    }
+}
+
+update_zhenxun = on_command("检查更新真寻", permission=SUPERUSER, priority=1, block=True)
+
+restart = on_command(
+    "重启",
+    aliases={"restart"},
+    permission=SUPERUSER,
+    rule=to_me(),
+    priority=1,
+    block=True,
+)
+
+
+@update_zhenxun.handle()
+async def _(bot: Bot, event: MessageEvent):
+    try:
+        code, error = await check_update(bot)
+        if error:
+            logger.error(f"更新真寻未知错误 {error}")
+            await bot.send_private_msg(
+                user_id=event.user_id, message=f"更新真寻未知错误 {error}"
+            )
+    except Exception as e:
+        logger.error(f"更新真寻未知错误 {type(e)}：{e}")
+        await bot.send_private_msg(
+            user_id=event.user_id,
+            message=f"更新真寻未知错误 {type(e)}：{e}",
+        )
+    else:
+        if code == 200:
+            await bot.send_private_msg(
+                user_id=event.user_id, message=f"更新完毕，请重启真寻...."
+            )
+
+
+@restart.got("flag", prompt=f"确定是否重启{NICKNAME}？确定请回复[是|好|确定]（重启失败咱们将失去联系，请谨慎！）")
+async def _(flag: str = ArgStr("flag")):
+    if flag.lower() in ["true", "是", "好", "确定", "确定是"]:
+        await restart.send(f"开始重启{NICKNAME}..请稍等...")
+        open("is_restart", "w")
+        if str(platform.system()).lower() == "windows":
+            import sys
+            python = sys.executable
+            os.execl(python, python, *sys.argv)
+        else:
+            os.system("./restart.sh")
+    else:
+        await restart.send("已取消操作...")
+
+
+@scheduler.scheduled_job(
+    "cron",
+    hour=12,
+    minute=0,
+)
+async def _():
+    if Config.get_config("check_zhenxun_update", "UPDATE_REMIND"):
+        _version = "v0.0.0"
+        _version_file = Path() / "__version__"
+        if _version_file.exists():
+            _version = (
+                open(_version_file, "r", encoding="utf8")
+                .readline()
+                .split(":")[-1]
+                .strip()
+            )
+        data = await get_latest_version_data()
+        if data:
+            latest_version = data["name"]
+            if _version != latest_version:
+                bot = get_bot()
+                await bot.send_private_msg(
+                    user_id=int(list(bot.config.superusers)[0]),
+                    message=f"检测到真寻版本更新\n"
+                    f"当前版本：{_version}，最新版本：{latest_version}",
+                )
+                if Config.get_config("check_zhenxun_update", "AUTO_UPDATE_ZHENXUN"):
+                    try:
+                        code = await check_update(bot)
+                    except Exception as e:
+                        logger.error(f"更新真寻未知错误 {type(e)}：{e}")
+                        await bot.send_private_msg(
+                            user_id=int(list(bot.config.superusers)[0]),
+                            message=f"更新真寻未知错误 {type(e)}：{e}\n",
+                        )
+                    else:
+                        if code == 200:
+                            await bot.send_private_msg(
+                                user_id=int(list(bot.config.superusers)[0]),
+                                message=f"更新完毕，请重启{NICKNAME}....",
+                            )
Index: plugins/one_friend/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from io import BytesIO\r\nfrom random import choice\r\nfrom nonebot import on_regex\r\nfrom nonebot.adapters.onebot.v11 import Bot, GroupMessageEvent, Message\r\nfrom utils.utils import get_message_at, get_user_avatar, get_message_text\r\nfrom utils.message_builder import image\r\nfrom utils.image_utils import BuildImage\r\nfrom nonebot.params import RegexGroup\r\nfrom typing import Tuple, Any\r\n\r\n__zx_plugin_name__ = \"我有一个朋友\"\r\n__plugin_usage__ = \"\"\"\r\nusage：\r\n    我有一个朋友他...，不知道是不是你\r\n    指令：\r\n        我有一个朋友想问问 [文本] ?[at]: 当at时你的朋友就是艾特对象\r\n\"\"\".strip()\r\n__plugin_des__ = \"我有一个朋友想问问...\"\r\n__plugin_cmd__ = [\"我有一个朋友想问问[文本] ?[at]\"]\r\n__plugin_version__ = 0.1\r\n__plugin_author__ = \"HibiKier\"\r\n__plugin_settings__ = {\r\n    \"level\": 5,\r\n    \"default_status\": True,\r\n    \"limit_superuser\": False,\r\n    \"cmd\": [\"我有一个朋友想问问\", \"我有一个朋友\"],\r\n}\r\n\r\none_friend = on_regex(\r\n    \"^我.*?朋友.*?[想问问|说|让我问问|想问|让我问|想知道|让我帮他问问|让我帮他问|让我帮忙问|让我帮忙问问|问](.*)\",\r\n    priority=4,\r\n    block=True,\r\n)\r\n\r\n\r\n@one_friend.handle()\r\nasync def _(bot: Bot, event: GroupMessageEvent, reg_group: Tuple[Any, ...] = RegexGroup()):\r\n    qq = get_message_at(event.json())\r\n    if not qq:\r\n        qq = choice(\r\n            [\r\n                x[\"user_id\"]\r\n                for x in await bot.get_group_member_list(\r\n                    group_id=event.group_id\r\n                )\r\n            ]\r\n        )\r\n        user_name = \"朋友\"\r\n    else:\r\n        qq = qq[0]\r\n        at_user = await bot.get_group_member_info(group_id=event.group_id, user_id=qq)\r\n        user_name = at_user[\"card\"] or at_user[\"nickname\"]\r\n    msg = get_message_text(Message(reg_group[0])).strip()\r\n    if not msg:\r\n        msg = \"都不知道问什么\"\r\n    msg = msg.replace(\"他\", \"我\").replace(\"她\", \"我\").replace(\"它\", \"我\")\r\n    x = await get_user_avatar(qq)\r\n    if x:\r\n        ava = BuildImage(200, 100, background=BytesIO(x))\r\n    else:\r\n        ava = BuildImage(200, 100, color=(0, 0, 0))\r\n    ava.circle()\r\n    text = BuildImage(400, 30, font_size=30)\r\n    text.text((0, 0), user_name)\r\n    A = BuildImage(700, 150, font_size=25, color=\"white\")\r\n    await A.apaste(ava, (30, 25), True)\r\n    await A.apaste(text, (150, 38))\r\n    await A.atext((150, 85), msg, (125, 125, 125))\r\n\r\n    await one_friend.send(image(b64=A.pic2bs4()))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/one_friend/__init__.py b/plugins/one_friend/__init__.py
--- a/plugins/one_friend/__init__.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/one_friend/__init__.py	(date 1663665690883)
@@ -27,7 +27,7 @@
 }
 
 one_friend = on_regex(
-    "^我.*?朋友.*?[想问问|说|让我问问|想问|让我问|想知道|让我帮他问问|让我帮他问|让我帮忙问|让我帮忙问问|问](.*)",
+    "^我.{0,4}朋友.{0,2}(?:想问问|说|让我问问|想问|让我问|想知道|让我帮他问问|让我帮他问|让我帮忙问|让我帮忙问问|问)(.{0,30})$",
     priority=4,
     block=True,
 )
Index: plugins/parse_bilibili_json.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from nonebot import on_message\r\nfrom services.log import logger\r\nfrom nonebot.adapters.onebot.v11 import GroupMessageEvent, ActionFailed\r\nfrom utils.utils import get_message_json, get_local_proxy, is_number, get_message_text\r\nfrom nonebot.adapters.onebot.v11.permission import GROUP\r\nfrom utils.message_builder import image\r\nfrom utils.image_utils import BuildImage\r\nfrom utils.browser import get_browser\r\nfrom configs.path_config import IMAGE_PATH\r\nfrom utils.http_utils import AsyncHttpx\r\nfrom configs.config import Config\r\nfrom utils.user_agent import get_user_agent\r\nimport aiohttp\r\nimport asyncio\r\nimport time\r\nimport ujson as json\r\nfrom bilireq import video\r\n__zx_plugin_name__ = \"B站转发解析\"\r\n__plugin_usage__ = \"\"\"\r\nusage：\r\n    B站转发解析，解析b站分享信息，支持bv，bilibili链接，b站手机端转发卡片，cv，b23.tv，且5分钟内不解析相同url\r\n\"\"\".strip()\r\n__plugin_des__ = \"B站转发解析\"\r\n__plugin_type__ = (\"其他\",)\r\n__plugin_version__ = 0.1\r\n__plugin_author__ = \"HibiKier\"\r\n__plugin_task__ = {\"bilibili_parse\": \"b站转发解析\"}\r\nConfig.add_plugin_config(\r\n    \"_task\",\r\n    \"DEFAULT_BILIBILI_PARSE\",\r\n    True,\r\n    help_=\"被动 B站转发解析 进群默认开关状态\",\r\n    default_value=True,\r\n)\r\n\r\n\r\nparse_bilibili_json = on_message(priority=1, permission=GROUP, block=False)\r\n\r\n_tmp = {}\r\n\r\n\r\n@parse_bilibili_json.handle()\r\nasync def _(event: GroupMessageEvent):\r\n    vd_info = None\r\n    url = None\r\n    if get_message_json(event.json()):\r\n        try:\r\n            data = json.loads(get_message_json(event.json())[0][\"data\"])\r\n        except (IndexError, KeyError):\r\n            data = None\r\n        if data:\r\n            # 转发视频\r\n            if data.get(\"desc\") == \"哔哩哔哩\":\r\n                async with aiohttp.ClientSession(\r\n                    headers=get_user_agent()\r\n                ) as session:\r\n                    async with session.get(\r\n                            data[\"meta\"][\"detail_1\"][\"qqdocurl\"],\r\n                            timeout=7,\r\n                    ) as response:\r\n                        url = str(response.url).split(\"?\")[0]\r\n                        bvid = url.split(\"/\")[-1]\r\n                        vd_info = await video.get_video_base_info(bvid)\r\n            # 转发专栏\r\n            if (\r\n                data.get(\"meta\")\r\n                and data[\"meta\"].get(\"news\")\r\n                and data[\"meta\"][\"news\"].get(\"desc\") == \"哔哩哔哩专栏\"\r\n            ):\r\n                url = data[\"meta\"][\"news\"][\"jumpUrl\"]\r\n                page = None\r\n                try:\r\n                    browser = await get_browser()\r\n                    if not browser:\r\n                        return\r\n                    page = await browser.new_page(\r\n                        user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\r\n                        \" (KHTML, like Gecko) Chrome/93.0.4530.0 Safari/537.36\"\r\n                    )\r\n                    await page.goto(url, wait_until=\"networkidle\", timeout=10000)\r\n                    await page.set_viewport_size({\"width\": 2560, \"height\": 1080})\r\n                    await page.click(\"#app > div\")\r\n                    div = await page.query_selector(\"#app > div\")\r\n                    await div.screenshot(\r\n                        path=f\"{IMAGE_PATH}/temp/cv_{event.user_id}.png\",\r\n                        timeout=100000,\r\n                    )\r\n                    await asyncio.get_event_loop().run_in_executor(\r\n                        None, resize, f\"{IMAGE_PATH}/temp/cv_{event.user_id}.png\"\r\n                    )\r\n                    await parse_bilibili_json.send(\r\n                        \"[[_task|bilibili_parse]]\" + image(f\"cv_{event.user_id}.png\", \"temp\")\r\n                    )\r\n                    await page.close()\r\n                    logger.info(\r\n                        f\"USER {event.user_id} GROUP {event.group_id} 解析bilibili转发 {url}\"\r\n                    )\r\n                except Exception as e:\r\n                    logger.error(f\"尝试解析bilibili专栏 {url} 失败 {type(e)}：{e}\")\r\n                    if page:\r\n                        await page.close()\r\n                return\r\n    # BV\r\n    if msg := get_message_text(event.json()):\r\n        if \"BV\" in msg:\r\n            index = msg.find(\"BV\")\r\n            if len(msg[index + 2 :]) >= 10:\r\n                msg = msg[index : index + 12]\r\n                url = f\"https://www.bilibili.com/video/{msg}\"\r\n                vd_info = await video.get_video_base_info(msg)\r\n        elif \"av\" in msg:\r\n            index = msg.find(\"av\")\r\n            if len(msg[index + 2 :]) >= 9:\r\n                msg = msg[index + 2 : index + 11]\r\n                if is_number(msg):\r\n                    url = f\"https://www.bilibili.com/video/{msg}\"\r\n                    vd_info = await video.get_video_base_info(msg)\r\n        elif \"https://b23.tv\" in msg:\r\n            url = \"https://\" + msg[msg.find(\"b23.tv\"): msg.find(\"b23.tv\") + 14]\r\n            async with aiohttp.ClientSession(\r\n                    headers=get_user_agent()\r\n            ) as session:\r\n                async with session.get(\r\n                        url,\r\n                        timeout=7,\r\n                ) as response:\r\n                    url = str(response.url).split(\"?\")[0]\r\n                    bvid = url.split(\"/\")[-1]\r\n                    vd_info = await video.get_video_base_info(bvid)\r\n    if vd_info:\r\n        if (\r\n            url in _tmp.keys() and time.time() - _tmp[url] > 30\r\n        ) or url not in _tmp.keys():\r\n            _tmp[url] = time.time()\r\n            aid = vd_info[\"aid\"]\r\n            title = vd_info[\"title\"]\r\n            author = vd_info[\"owner\"][\"name\"]\r\n            reply = vd_info[\"stat\"][\"reply\"]  # 回复\r\n            favorite = vd_info[\"stat\"][\"favorite\"]  # 收藏\r\n            coin = vd_info[\"stat\"][\"coin\"]  # 投币\r\n            # like = vd_info['stat']['like']      # 点赞\r\n            # danmu = vd_info['stat']['danmaku']  # 弹幕\r\n            date = time.strftime(\"%Y-%m-%d\", time.localtime(vd_info[\"ctime\"]))\r\n            try:\r\n                await parse_bilibili_json.send(\r\n                    \"[[_task|bilibili_parse]]\" +\r\n                    image(vd_info[\"pic\"]) + f\"\\nav{aid}\\n标题：{title}\\n\"\r\n                    f\"UP：{author}\\n\"\r\n                    f\"上传日期：{date}\\n\"\r\n                    f\"回复：{reply}，收藏：{favorite}，投币：{coin}\\n\"\r\n                    f\"{url}\"\r\n                )\r\n            except ActionFailed:\r\n                logger.warning(f\"{event.group_id} 发送bilibili解析失败\")\r\n            else:\r\n                logger.info(\r\n                    f\"USER {event.user_id} GROUP {event.group_id} 解析bilibili转发 {url}\"\r\n                )\r\n\r\n\r\ndef resize(path: str):\r\n    A = BuildImage(0, 0, background=path, ratio=0.5)\r\n    A.save(path)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/parse_bilibili_json.py b/plugins/parse_bilibili_json.py
--- a/plugins/parse_bilibili_json.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/parse_bilibili_json.py	(date 1663665690883)
@@ -110,11 +110,11 @@
                 vd_info = await video.get_video_base_info(msg)
         elif "av" in msg:
             index = msg.find("av")
-            if len(msg[index + 2 :]) >= 9:
+            if len(msg[index + 2 :]) >= 1:
                 msg = msg[index + 2 : index + 11]
                 if is_number(msg):
-                    url = f"https://www.bilibili.com/video/{msg}"
-                    vd_info = await video.get_video_base_info(msg)
+                    url = f"https://www.bilibili.com/video/av{msg}"
+                    vd_info = await video.get_video_base_info('av' + msg)
         elif "https://b23.tv" in msg:
             url = "https://" + msg[msg.find("b23.tv"): msg.find("b23.tv") + 14]
             async with aiohttp.ClientSession(
Index: plugins/word_bank/_data_source.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from .model import WordBank\nfrom typing import Union\n\n\nclass WordBankBuilder:\n\n    def __init__(self, user_id: int, group_id: int, problem: str):\n        self._data = {\n            \"user_id\": user_id,\n            \"group_id\": group_id}\n        self.problem = problem\n\n    def set_placeholder(self, id_: int, placeholder: Union[str, int]):\n        \"\"\"\n        设置占位符\n        :param id_: 站位id\n        :param placeholder: 占位符内容\n        \"\"\"\n        if self._data.get(\"placeholder\") is None:\n            self._data[\"placeholder\"] = []\n        self._data[\"placeholder\"].append((id_, placeholder))\n\n    def set_answer(self, answer: str):\n        \"\"\"\n        设置回答\n        :param answer: 回答\n        \"\"\"\n        self._data[\"answer\"] = answer\n\n    def set_problem(self, problem: str):\n        \"\"\"\n        设置问题\n        :param problem: 问题\n        \"\"\"\n        self._data[\"problem\"] = problem\n\n    async def save(self, search_type):\n        user_id = self._data[\"user_id\"]\n        group_id = self._data[\"group_id\"]\n        problem = self._data[\"problem\"]\n        answer = self._data[\"answer\"]\n        placeholder = self._data.get(\"placeholder\")\n        return await WordBank.add_problem_answer(user_id, group_id, search_type, problem, answer, placeholder)\n\n    async def update(self, index):\n        user_id = self._data[\"user_id\"]\n        group_id = self._data[\"group_id\"]\n        problem = self._data[\"problem\"]\n        answer = self._data[\"answer\"]\n        placeholder = self._data.get(\"placeholder\")\n        return await WordBank.update_problem_answer(user_id, group_id, problem, answer, index, placeholder)\n\n    def __str__(self):\n        return str(self._data)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/word_bank/_data_source.py b/plugins/word_bank/_data_source.py
--- a/plugins/word_bank/_data_source.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/word_bank/_data_source.py	(date 1663665690887)
@@ -1,54 +1,235 @@
-from .model import WordBank
-from typing import Union
+import random
+import time
+from pathlib import Path
+
+from nonebot.adapters.onebot.v11 import Message, MessageSegment
+
+from services import logger
+from utils.image_utils import text2image
+from utils.message_builder import image
+from ._model import WordBank
+from typing import Optional, Tuple, Union, List, Any
+from utils.utils import is_number
+import nonebot
+
+driver = nonebot.get_driver()
 
 
-class WordBankBuilder:
+async def get_problem_str(
+    id_: Union[str, int], group_id: Optional[int] = None, word_scope: int = 1
+) -> Tuple[str, int]:
+    """
+    说明:
+        通过id获取问题字符串
+    参数:
+        :param id_: 下标
+        :param group_id: 群号
+        :param word_scope: 获取类型
+    """
+    if word_scope in [0, 2]:
+        all_problem = await WordBank.get_problem_by_scope(word_scope)
+    else:
+        all_problem = await WordBank.get_group_all_problem(group_id)
+    if id_.startswith("id:"):
+        id_ = id_.split(":")[-1]
+    if not is_number(id_) or int(id_) < 0 or int(id_) > len(all_problem):
+        return "id必须为数字且在范围内", 999
+    return all_problem[int(id_)][0], 200
 
-    def __init__(self, user_id: int, group_id: int, problem: str):
-        self._data = {
-            "user_id": user_id,
-            "group_id": group_id}
-        self.problem = problem
 
-    def set_placeholder(self, id_: int, placeholder: Union[str, int]):
-        """
-        设置占位符
-        :param id_: 站位id
-        :param placeholder: 占位符内容
-        """
-        if self._data.get("placeholder") is None:
-            self._data["placeholder"] = []
-        self._data["placeholder"].append((id_, placeholder))
+async def update_word(params: str, group_id: Optional[int] = None, word_scope: int = 1) -> str:
+    """
+    说明:
+        修改群词条
+    参数:
+        :param params: 参数
+        :param group_id: 群号
+        :param word_scope: 词条范围
+    """
+    return await word_handle(params, group_id, "update", word_scope)
+
 
-    def set_answer(self, answer: str):
-        """
-        设置回答
-        :param answer: 回答
-        """
-        self._data["answer"] = answer
+async def delete_word(params: str, group_id: Optional[int] = None, word_scope: int = 1) -> str:
+    """
+    说明:
+        删除群词条
+    参数:
+        :param params: 参数
+        :param group_id: 群号
+        :param word_scope: 词条范围
+    """
+    return await word_handle(params, group_id, "delete", word_scope)
+
 
-    def set_problem(self, problem: str):
-        """
-        设置问题
-        :param problem: 问题
-        """
-        self._data["problem"] = problem
+async def word_handle(params: str, group_id: Optional[int], type_: str, word_scope: int = 0) -> str:
+    """
+    说明:
+        词条操作
+    参数:
+        :param params: 参数
+        :param group_id: 群号
+        :param type_: 类型
+        :param word_scope: 词条范围
+    """
+    params = params.split()
+    problem = params[0]
+    if problem.startswith("id:"):
+        problem, code = await get_problem_str(problem, group_id, word_scope)
+        if code != 200:
+            return problem
+    if type_ == "delete":
+        index = params[1] if len(params) > 1 else None
+        if index:
+            answer_num = len(await WordBank.get_problem_all_answer(problem, group_id))
+            if not is_number(index) or int(index) < 0 or int(index) > answer_num:
+                return "指定回答下标id必须为数字且在范围内"
+            index = int(index)
+        await WordBank.delete_group_problem(problem, group_id, index, word_scope)
+        return "删除词条成功"
+    if type_ == "update":
+        replace_str = params[1]
+        await WordBank.update_group_problem(problem, replace_str, group_id, word_scope=word_scope)
+        return "修改词条成功"
 
-    async def save(self, search_type):
-        user_id = self._data["user_id"]
-        group_id = self._data["group_id"]
-        problem = self._data["problem"]
-        answer = self._data["answer"]
-        placeholder = self._data.get("placeholder")
-        return await WordBank.add_problem_answer(user_id, group_id, search_type, problem, answer, placeholder)
 
-    async def update(self, index):
-        user_id = self._data["user_id"]
-        group_id = self._data["group_id"]
-        problem = self._data["problem"]
-        answer = self._data["answer"]
-        placeholder = self._data.get("placeholder")
-        return await WordBank.update_problem_answer(user_id, group_id, problem, answer, index, placeholder)
+async def show_word(
+    problem: str,
+    id_: Optional[int],
+    gid: Optional[int],
+    group_id: Optional[int] = None,
+    word_scope: Optional[int] = None,
+) -> Union[str, List[Union[str, Message]]]:
+    if problem:
+        msg_list = []
+        if word_scope is not None:
+            problem = (await WordBank.get_problem_by_scope(word_scope))[id_][0]
+            id_ = None
+        _problem_list = await WordBank.get_problem_all_answer(
+            problem, id_ if id_ is not None else gid, group_id if gid is None else None, word_scope
+        )
+        for index, msg in enumerate(_problem_list):
+            if isinstance(msg, Message):
+                temp = ""
+                for seg in msg:
+                    if seg.type == "text":
+                        temp += seg
+                    elif seg.type == "face":
+                        temp += f"[face:{seg.data.id}]"
+                    elif seg.type == "at":
+                        temp += f'[at:{seg.data["qq"]}]'
+                    elif seg.type == "image":
+                        temp += f"[image]"
+                msg += temp
+            msg_list.append(f"{index}." + msg if isinstance(msg, str) else msg[1])
+        msg_list = [
+            f'词条：{problem or (f"id: {id_}" if id_ is not None else f"gid: {gid}")} 的回答'
+        ] + msg_list
+        return msg_list
+    else:
+        if group_id:
+            _problem_list = await WordBank.get_group_all_problem(group_id)
+        else:
+            _problem_list = await WordBank.get_problem_by_scope(word_scope)
+        global_problem_list = await WordBank.get_problem_by_scope(0)
+        if not _problem_list and not global_problem_list:
+            return "未收录任何词条.."
+        msg_list = await build_message(_problem_list)
+        global_msg_list = await build_message(global_problem_list)
+        if global_msg_list:
+            msg_list.append("###以下为全局词条###")
+            msg_list = msg_list + global_msg_list
+        return msg_list
 
-    def __str__(self):
-        return str(self._data)
+
+async def build_message(_problem_list: List[Tuple[Any, Union[MessageSegment, str]]]):
+    index = 0
+    str_temp_list = []
+    msg_list = []
+    temp_str = ""
+    for _, problem in _problem_list:
+        if len(temp_str.split("\n")) > 50:
+            img = await text2image(
+                temp_str,
+                padding=10,
+                color="#f9f6f2",
+            )
+            msg_list.append(image(b64=img.pic2bs4()))
+            temp_str = ""
+        if isinstance(problem, str):
+            if problem not in str_temp_list:
+                str_temp_list.append(problem)
+                temp_str += f"{index}. {problem}\n"
+        else:
+            if temp_str:
+                img = await text2image(
+                    temp_str,
+                    padding=10,
+                    color="#f9f6f2",
+                )
+                msg_list.append(image(b64=img.pic2bs4()))
+                temp_str = ""
+            msg_list.append(f"{index}." + problem)
+        index += 1
+    if temp_str:
+        img = await text2image(
+            temp_str,
+            padding=10,
+            color="#f9f6f2",
+        )
+        msg_list.append(image(b64=img.pic2bs4()))
+    return msg_list
+
+
+@driver.on_startup
+async def _():
+    try:
+        from ._old_model import WordBank as OldWordBank
+    except ModuleNotFoundError:
+        return
+    if await WordBank.get_group_all_problem(0):
+        return
+    logger.info('开始迁移词条 纯文本 数据')
+    try:
+        word_list = await OldWordBank.get_all()
+        new_answer_path = Path() / 'data' / 'word_bank' / 'answer'
+        new_problem_path = Path() / 'data' / 'word_bank' / 'problem'
+        new_answer_path.mkdir(exist_ok=True, parents=True)
+        for word in word_list:
+            problem: str = word.problem
+            user_id = word.user_qq
+            group_id = word.group_id
+            format_ = word.format
+            answer = word.answer
+            # 仅对纯文本做处理
+            if '[CQ' not in problem and '[CQ' not in answer and '[_to_me' not in problem:
+                if not format_:
+                    await WordBank.add_problem_answer(user_id, group_id, 1, 0, problem, answer)
+                else:
+                    placeholder = []
+                    for m in format_.split('<format>'):
+                        x = m.split('<_s>')
+                        if x[0]:
+                            idx, file_name = x[0], x[1]
+                            if 'jpg' in file_name:
+                                answer = answer.replace(f'[__placeholder_{idx}]', f'[image:placeholder_{idx}]')
+                                file = Path() / 'data' / 'word_bank' / f'{group_id}' / file_name
+                                rand = int(time.time()) + random.randint(1, 100000)
+                                if file.exists():
+                                    new_file = new_answer_path / f'{group_id}' / f'{user_id}_{rand}.jpg'
+                                    new_file.parent.mkdir(exist_ok=True, parents=True)
+                                    with open(file, 'rb') as rb:
+                                        with open(new_file, 'wb') as wb:
+                                            wb.write(rb.read())
+                                    # file.rename(new_file)
+                                    placeholder.append(f'answer/{group_id}/{user_id}_{rand}.jpg')
+                                    await WordBank._move(user_id, group_id, problem, answer, ",".join(placeholder))
+        await WordBank.add_problem_answer(0, 0, 999, 0, '_[OK', '_[OK')
+        logger.info('词条 纯文本 数据迁移完成')
+        (Path() / 'plugins' / 'word_bank' / '_old_model.py').unlink()
+    except Exception as e:
+        logger.warning(f'迁移词条发生错误，如果为首次安装请无视 {type(e)}：{e}')
+
+
+
+
+
Index: plugins/genshin/query_user/genshin_sign/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/genshin_sign/__init__.py b/plugins/genshin/query_user/genshin_sign/__init__.py
new file mode 100644
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_user/genshin_sign/__init__.py	(date 1663666724604)
@@ -0,0 +1,112 @@
+from .data_source import get_sign_reward_list, genshin_sign
+from ..mihoyobbs_sign import mihoyobbs_sign
+from nonebot.adapters.onebot.v11 import MessageEvent, GroupMessageEvent
+from nonebot import on_command
+from services.log import logger
+from .init_task import add_job, scheduler, _sign
+from apscheduler.jobstores.base import JobLookupError
+from .._models import Genshin
+from nonebot.params import Command
+from typing import Tuple
+
+
+__zx_plugin_name__ = "原神自动签到"
+__plugin_usage__ = """
+usage：
+    米游社原神签到，需要uid以及cookie
+    且在第二天自动排序签到时间
+    # 不听，就要手动签到！（使用命令 “原神我硬签
+    指令：
+        开/关原神自动签到
+        原神我硬签
+""".strip()
+__plugin_des__ = "原神懒人签到"
+__plugin_cmd__ = ["开启/关闭原神自动签到", "原神我硬签", "查看我的cookie"]
+__plugin_type__ = ("原神相关",)
+__plugin_version__ = 0.2
+__plugin_author__ = "HibiKier"
+__plugin_settings__ = {
+    "level": 5,
+    "default_status": True,
+    "limit_superuser": False,
+    "cmd": ["原神签到"],
+}
+
+
+genshin_matcher = on_command(
+    "开原神自动签到", aliases={"关原神自动签到", "原神我硬签", "查看我的cookie"}, priority=5, block=True
+)
+
+
+@genshin_matcher.handle()
+async def _(event: MessageEvent, cmd: Tuple[str, ...] = Command()):
+    cmd = cmd[0]
+    uid = await Genshin.get_user_uid(event.user_id)
+    if cmd == "查看我的cookie":
+        my_cookie = await Genshin.get_user_cookie(uid, True)
+        if isinstance(event, GroupMessageEvent):
+            await genshin_matcher.finish("请私聊查看您的cookie！")
+        await genshin_matcher.finish("您的cookie为" + my_cookie)
+    if not uid or not await Genshin.get_user_cookie(uid, True):
+        await genshin_matcher.finish("请先绑定uid和cookie！")
+    # if "account_id" not in await Genshin.get_user_cookie(uid, True):
+    #     await genshin_matcher.finish("请更新cookie！")
+    if cmd == "原神我硬签":
+        try:
+            await genshin_matcher.send("正在进行签到...", at_sender=True)
+            msg = await genshin_sign(uid)
+            return_data = await mihoyobbs_sign(event.user_id)
+            logger.info(
+                f"(USER {event.user_id}, "
+                f"GROUP {event.group_id if isinstance(event, GroupMessageEvent) else 'private'}) UID：{uid} 原神签到"
+            )
+            logger.info(msg)
+            # 硬签，移除定时任务
+            try:
+                for i in range(3):
+                    scheduler.remove_job(f"genshin_auto_sign_{uid}_{event.user_id}_{i}",)
+            except JobLookupError:
+                pass
+            u = await Genshin.get_user_by_uid(uid)
+            if u and u.auto_sign:
+                await u.clear_sign_time(uid)
+                next_date = await Genshin.random_sign_time(uid)
+                add_job(event.user_id, uid, next_date)
+                msg += f"\n{return_data}\n因开启自动签到\n下一次签到时间为：{next_date.replace(microsecond=0)}"
+        except Exception as e:
+            msg = "原神签到失败..请尝试检查cookie或报告至管理员！"
+            logger.info(
+                f"(USER {event.user_id}, "
+                f"GROUP {event.group_id if isinstance(event, GroupMessageEvent) else 'private'}) UID：{uid} 原神签到发生错误 "
+                f"{type(e)}：{e}"
+            )
+        msg = msg or "请检查cookie是否更新！"
+        await genshin_matcher.send(msg, at_sender=True)
+    else:
+        for i in range(3):
+            try:
+                scheduler.remove_job(f"genshin_auto_sign_{uid}_{event.user_id}_{i}")
+            except JobLookupError:
+                pass
+        if cmd[0] == "开":
+            await Genshin.set_auto_sign(uid, True)
+            next_date = await Genshin.random_sign_time(uid)
+            add_job(event.user_id, uid, next_date)
+            await genshin_matcher.send(
+                f"已开启原神自动签到！\n下一次签到时间为：{next_date.replace(microsecond=0)}",
+                at_sender=True,
+            )
+            logger.info(
+                f"(USER {event.user_id}, GROUP "
+                f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+                f" 开启原神自动签到"
+            )
+        else:
+            await Genshin.set_auto_sign(uid, False)
+            await Genshin.clear_sign_time(uid)
+            await genshin_matcher.send(f"已关闭原神自动签到！", at_sender=True)
+            logger.info(
+                f"(USER {event.user_id}, GROUP "
+                f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+                f" 关闭原神自动签到"
+            )
Index: utils/manager/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Optional\r\nfrom .group_manager import GroupManager\r\nfrom .data_class import StaticData\r\nfrom .withdraw_message_manager import WithdrawMessageManager\r\nfrom .plugins2cd_manager import Plugins2cdManager\r\nfrom .plugins2block_manager import Plugins2blockManager\r\nfrom .plugins2count_manager import Plugins2countManager\r\nfrom .plugins2settings_manager import Plugins2settingsManager\r\nfrom .plugins_manager import PluginsManager\r\nfrom .resources_manager import ResourcesManager\r\nfrom .admin_manager import AdminManager\r\nfrom .none_plugin_count_manager import NonePluginCountManager\r\nfrom .requests_manager import RequestManager\r\nfrom configs.path_config import DATA_PATH\r\n\r\n\r\n# 群功能开关 | 群被动技能 | 群权限  管理\r\ngroup_manager: Optional[GroupManager] = GroupManager(\r\n    DATA_PATH / \"manager\" / \"group_manager.json\"\r\n)\r\n\r\n# 撤回消息管理\r\nwithdraw_message_manager: Optional[WithdrawMessageManager] = WithdrawMessageManager()\r\n\r\n# 插件管理\r\nplugins_manager: Optional[PluginsManager] = PluginsManager(\r\n    DATA_PATH / \"manager\" / \"plugins_manager.json\"\r\n)\r\n\r\n# 插件基本设置管理\r\nplugins2settings_manager: Optional[Plugins2settingsManager] = Plugins2settingsManager(\r\n    DATA_PATH / \"configs\" / \"plugins2settings.yaml\"\r\n)\r\n\r\n# 插件命令 cd 管理\r\nplugins2cd_manager: Optional[Plugins2cdManager] = Plugins2cdManager(\r\n    DATA_PATH / \"configs\" / \"plugins2cd.yaml\"\r\n)\r\n\r\n# 插件命令 阻塞 管理\r\nplugins2block_manager: Optional[Plugins2blockManager] = Plugins2blockManager(\r\n    DATA_PATH / \"configs\" / \"plugins2block.yaml\"\r\n)\r\n\r\n# 插件命令 每次次数限制 管理\r\nplugins2count_manager: Optional[Plugins2countManager] = Plugins2countManager(\r\n    DATA_PATH / \"configs\" / \"plugins2count.yaml\"\r\n)\r\n\r\n# 资源管理\r\nresources_manager: Optional[ResourcesManager] = ResourcesManager(\r\n    DATA_PATH / \"manager\" / \"resources_manager.json\"\r\n)\r\n\r\n# 插件加载容忍管理\r\nnone_plugin_count_manager: Optional[NonePluginCountManager] = NonePluginCountManager(\r\n    DATA_PATH / \"manager\" / \"none_plugin_count_manager.json\"\r\n)\r\n\r\n# 好友请求/群聊邀请 管理\r\nrequests_manager: Optional[RequestManager] = RequestManager(\r\n    DATA_PATH / \"manager\" / \"requests_manager.json\"\r\n)\r\n\r\n# 管理员命令管理器\r\nadmin_manager = AdminManager()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/manager/__init__.py b/utils/manager/__init__.py
--- a/utils/manager/__init__.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/utils/manager/__init__.py	(date 1663665690887)
@@ -14,6 +14,11 @@
 from configs.path_config import DATA_PATH
 
 
+# 全局字典
+GDict = {
+    "run_sql": []           # 需要启动前运行的sql语句
+}
+
 # 群功能开关 | 群被动技能 | 群权限  管理
 group_manager: Optional[GroupManager] = GroupManager(
     DATA_PATH / "manager" / "group_manager.json"
Index: basic_plugins/init_plugin_config/init_plugins_settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pathlib import Path\r\nfrom ruamel.yaml import round_trip_load, round_trip_dump, YAML\r\nfrom utils.manager import plugins2settings_manager, admin_manager\r\nfrom services.log import logger\r\nfrom utils.utils import get_matchers\r\nfrom ruamel import yaml\r\nimport nonebot\r\n\r\n\r\n_yaml = YAML(typ=\"safe\")\r\n\r\n\r\ndef init_plugins_settings(data_path: str):\r\n    \"\"\"\r\n    初始化插件设置，从插件中获取 __zx_plugin_name__，__plugin_cmd__，__plugin_settings__\r\n    \"\"\"\r\n    plugins2settings_file = data_path / \"configs\" / \"plugins2settings.yaml\"\r\n    plugins2settings_file.parent.mkdir(exist_ok=True, parents=True)\r\n    _matchers = get_matchers(True)\r\n    _tmp_module = {}\r\n    _tmp = []\r\n    for x in plugins2settings_manager.keys():\r\n        try:\r\n            _plugin = nonebot.plugin.get_plugin(x)\r\n            _module = _plugin.module\r\n            metadata = _plugin.metadata\r\n            plugin_name = metadata.name if metadata else _module.__getattribute__(\"__zx_plugin_name__\")\r\n            _tmp_module[x] = plugin_name\r\n        except (KeyError, AttributeError) as e:\r\n            logger.warning(f\"配置文件 模块：{x} 获取 plugin_name 失败...{e}\")\r\n            _tmp_module[x] = \"\"\r\n    for matcher in _matchers:\r\n        if matcher.plugin_name not in plugins2settings_manager.keys():\r\n            _plugin = matcher.plugin\r\n            metadata = _plugin.metadata\r\n            try:\r\n                _module = _plugin.module\r\n            except AttributeError:\r\n                logger.warning(f\"插件 {matcher.plugin_name} 加载失败...，插件控制未加载.\")\r\n            else:\r\n                try:\r\n                    if metadata:\r\n                        plugin_name = metadata.name\r\n                    else:\r\n                        plugin_name = _module.__getattribute__(\"__zx_plugin_name__\")\r\n                    if \"[admin]\" in plugin_name.lower():\r\n                        try:\r\n                            admin_settings = _module.__getattribute__(\r\n                                \"__plugin_settings__\"\r\n                            )\r\n                            level = admin_settings[\"admin_level\"]\r\n                            cmd = admin_settings.get(\"cmd\")\r\n                        except (AttributeError, KeyError):\r\n                            level = 5\r\n                            cmd = None\r\n                        if level is None:\r\n                            level = 5\r\n                        admin_manager.add_admin_plugin_settings(\r\n                            matcher.plugin_name, cmd, level\r\n                        )\r\n                    if (\r\n                        \"[hidden]\" in plugin_name.lower()\r\n                        or \"[admin]\" in plugin_name.lower()\r\n                        or \"[superuser]\" in plugin_name.lower()\r\n                        or matcher.plugin_name in plugins2settings_manager.keys()\r\n                    ):\r\n                        continue\r\n                except AttributeError:\r\n                    if matcher.plugin_name not in _tmp:\r\n                        logger.warning(\r\n                            f\"获取插件 {matcher.plugin_name} __zx_plugin_name__ 失败...，插件控制未加载.\"\r\n                        )\r\n                else:\r\n                    _tmp_module[matcher.plugin_name] = plugin_name\r\n                    try:\r\n                        plugin_settings = _module.__getattribute__(\r\n                            \"__plugin_settings__\"\r\n                        )\r\n                    except AttributeError:\r\n                        plugin_settings = {\r\n                            \"cmd\": [matcher.plugin_name, plugin_name]\r\n                        }\r\n                    if not plugin_settings.get('cost_gold'):\r\n                        plugin_settings['cost_gold'] = 0\r\n                    if (\r\n                        plugin_settings.get(\"cmd\") is not None\r\n                        and plugin_name not in plugin_settings[\"cmd\"]\r\n                    ):\r\n                        plugin_settings[\"cmd\"].append(plugin_name)\r\n                    if plugins2settings_manager.get(\r\n                        matcher.plugin_name\r\n                    ) and plugins2settings_manager[matcher.plugin_name].get(\r\n                        \"plugin_type\"\r\n                    ):\r\n                        plugin_type = tuple(\r\n                            plugins2settings_manager.get_plugin_data(\r\n                                matcher.plugin_name\r\n                            )[\"plugin_type\"]\r\n                        )\r\n                    else:\r\n                        try:\r\n                            plugin_type = _module.__getattribute__(\r\n                                \"__plugin_type__\"\r\n                            )\r\n                        except AttributeError:\r\n                            plugin_type = (\"normal\",)\r\n                    if plugin_settings and matcher.plugin_name:\r\n                        plugins2settings_manager.add_plugin_settings(\r\n                            matcher.plugin_name,\r\n                            plugin_type=plugin_type,\r\n                            **plugin_settings,\r\n                        )\r\n        _tmp.append(matcher.plugin_name)\r\n    _tmp_data = {\"PluginSettings\": plugins2settings_manager.get_data()}\r\n    with open(plugins2settings_file, \"w\", encoding=\"utf8\") as wf:\r\n        yaml.dump(_tmp_data, wf, Dumper=yaml.RoundTripDumper, allow_unicode=True)\r\n    _data = round_trip_load(open(plugins2settings_file, encoding=\"utf8\"))\r\n    _data[\"PluginSettings\"].yaml_set_start_comment(\r\n        \"\"\"# 模块与对应命令和对应群权限\r\n# 用于生成帮助图片 和 开关功能\r\n# key：模块名称\r\n# level：需要的群等级\r\n# default_status：加入群时功能的默认开关状态\r\n# limit_superuser: 功能状态是否限制超级用户\r\n# cmd: 关闭[cmd] 都会触发命令 关闭对应功能，cmd列表第一个词为统计的功能名称\r\n# plugin_type: 帮助类别 示例：('原神相关',) 或 ('原神相关', 1)，1代表帮助命令列向排列，否则为横向排列\"\"\",\r\n        indent=2,\r\n    )\r\n    for plugin in _data[\"PluginSettings\"].keys():\r\n        _data[\"PluginSettings\"][plugin].yaml_set_start_comment(\r\n            f\"{plugin}：{_tmp_module[plugin]}\", indent=2\r\n        )\r\n    with open(plugins2settings_file, \"w\", encoding=\"utf8\") as wf:\r\n        round_trip_dump(_data, wf, Dumper=yaml.RoundTripDumper, allow_unicode=True)\r\n    logger.info(f\"已成功加载 {len(plugins2settings_manager.get_data())} 个非限制插件.\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic_plugins/init_plugin_config/init_plugins_settings.py b/basic_plugins/init_plugin_config/init_plugins_settings.py
--- a/basic_plugins/init_plugin_config/init_plugins_settings.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/basic_plugins/init_plugin_config/init_plugins_settings.py	(date 1663665690883)
@@ -24,92 +24,97 @@
             _plugin = nonebot.plugin.get_plugin(x)
             _module = _plugin.module
             metadata = _plugin.metadata
-            plugin_name = metadata.name if metadata else _module.__getattribute__("__zx_plugin_name__")
+            plugin_name = (
+                metadata.name
+                if metadata
+                else _module.__getattribute__("__zx_plugin_name__")
+            )
             _tmp_module[x] = plugin_name
         except (KeyError, AttributeError) as e:
             logger.warning(f"配置文件 模块：{x} 获取 plugin_name 失败...{e}")
             _tmp_module[x] = ""
     for matcher in _matchers:
-        if matcher.plugin_name not in plugins2settings_manager.keys():
-            _plugin = matcher.plugin
-            metadata = _plugin.metadata
-            try:
-                _module = _plugin.module
-            except AttributeError:
-                logger.warning(f"插件 {matcher.plugin_name} 加载失败...，插件控制未加载.")
-            else:
-                try:
-                    if metadata:
-                        plugin_name = metadata.name
-                    else:
-                        plugin_name = _module.__getattribute__("__zx_plugin_name__")
-                    if "[admin]" in plugin_name.lower():
-                        try:
-                            admin_settings = _module.__getattribute__(
-                                "__plugin_settings__"
-                            )
-                            level = admin_settings["admin_level"]
-                            cmd = admin_settings.get("cmd")
-                        except (AttributeError, KeyError):
-                            level = 5
-                            cmd = None
-                        if level is None:
-                            level = 5
-                        admin_manager.add_admin_plugin_settings(
-                            matcher.plugin_name, cmd, level
-                        )
-                    if (
-                        "[hidden]" in plugin_name.lower()
-                        or "[admin]" in plugin_name.lower()
-                        or "[superuser]" in plugin_name.lower()
-                        or matcher.plugin_name in plugins2settings_manager.keys()
-                    ):
-                        continue
-                except AttributeError:
-                    if matcher.plugin_name not in _tmp:
-                        logger.warning(
-                            f"获取插件 {matcher.plugin_name} __zx_plugin_name__ 失败...，插件控制未加载."
-                        )
-                else:
-                    _tmp_module[matcher.plugin_name] = plugin_name
-                    try:
-                        plugin_settings = _module.__getattribute__(
-                            "__plugin_settings__"
-                        )
-                    except AttributeError:
-                        plugin_settings = {
-                            "cmd": [matcher.plugin_name, plugin_name]
-                        }
-                    if not plugin_settings.get('cost_gold'):
-                        plugin_settings['cost_gold'] = 0
-                    if (
-                        plugin_settings.get("cmd") is not None
-                        and plugin_name not in plugin_settings["cmd"]
-                    ):
-                        plugin_settings["cmd"].append(plugin_name)
-                    if plugins2settings_manager.get(
-                        matcher.plugin_name
-                    ) and plugins2settings_manager[matcher.plugin_name].get(
-                        "plugin_type"
-                    ):
-                        plugin_type = tuple(
-                            plugins2settings_manager.get_plugin_data(
-                                matcher.plugin_name
-                            )["plugin_type"]
-                        )
-                    else:
-                        try:
-                            plugin_type = _module.__getattribute__(
-                                "__plugin_type__"
-                            )
-                        except AttributeError:
-                            plugin_type = ("normal",)
-                    if plugin_settings and matcher.plugin_name:
-                        plugins2settings_manager.add_plugin_settings(
-                            matcher.plugin_name,
-                            plugin_type=plugin_type,
-                            **plugin_settings,
-                        )
+        try:
+            if matcher.plugin_name not in plugins2settings_manager.keys():
+                _plugin = matcher.plugin
+                if not _plugin:
+                    continue
+                metadata = _plugin.metadata
+                try:
+                    _module = _plugin.module
+                except AttributeError:
+                    logger.warning(f"插件 {matcher.plugin_name} 加载失败...，插件控制未加载.")
+                else:
+                    try:
+                        if metadata:
+                            plugin_name = metadata.name
+                        else:
+                            plugin_name = _module.__getattribute__("__zx_plugin_name__")
+                        if "[admin]" in plugin_name.lower():
+                            try:
+                                admin_settings = _module.__getattribute__(
+                                    "__plugin_settings__"
+                                )
+                                level = admin_settings["admin_level"]
+                                cmd = admin_settings.get("cmd")
+                            except (AttributeError, KeyError):
+                                level = 5
+                                cmd = None
+                            if level is None:
+                                level = 5
+                            admin_manager.add_admin_plugin_settings(
+                                matcher.plugin_name, cmd, level
+                            )
+                        if (
+                            "[hidden]" in plugin_name.lower()
+                            or "[admin]" in plugin_name.lower()
+                            or "[superuser]" in plugin_name.lower()
+                            or matcher.plugin_name in plugins2settings_manager.keys()
+                        ):
+                            continue
+                    except AttributeError:
+                        if matcher.plugin_name not in _tmp:
+                            logger.warning(
+                                f"获取插件 {matcher.plugin_name} __zx_plugin_name__ 失败...，插件控制未加载."
+                            )
+                    else:
+                        _tmp_module[matcher.plugin_name] = plugin_name
+                        try:
+                            plugin_settings = _module.__getattribute__(
+                                "__plugin_settings__"
+                            )
+                        except AttributeError:
+                            plugin_settings = {"cmd": [matcher.plugin_name, plugin_name]}
+                        if not plugin_settings.get("cost_gold"):
+                            plugin_settings["cost_gold"] = 0
+                        if (
+                            plugin_settings.get("cmd") is not None
+                            and plugin_name not in plugin_settings["cmd"]
+                        ):
+                            plugin_settings["cmd"].append(plugin_name)
+                        if plugins2settings_manager.get(
+                            matcher.plugin_name
+                        ) and plugins2settings_manager[matcher.plugin_name].get(
+                            "plugin_type"
+                        ):
+                            plugin_type = tuple(
+                                plugins2settings_manager.get_plugin_data(
+                                    matcher.plugin_name
+                                )["plugin_type"]
+                            )
+                        else:
+                            try:
+                                plugin_type = _module.__getattribute__("__plugin_type__")
+                            except AttributeError:
+                                plugin_type = ("normal",)
+                        if plugin_settings and matcher.plugin_name:
+                            plugins2settings_manager.add_plugin_settings(
+                                matcher.plugin_name,
+                                plugin_type=plugin_type,
+                                **plugin_settings,
+                            )
+        except Exception as e:
+            logger.error(f'{matcher.plugin_name} 初始化 plugin_settings 发生错误 {type(e)}：{e}')
         _tmp.append(matcher.plugin_name)
     _tmp_data = {"PluginSettings": plugins2settings_manager.get_data()}
     with open(plugins2settings_file, "w", encoding="utf8") as wf:
Index: plugins/word_bank/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from configs.config import Config\nimport nonebot\n\nConfig.add_plugin_config(\n    \"word_bank\",\n    \"WORD_BANK_LEVEL [LEVEL]\",\n    5,\n    name=\"词库问答\",\n    help_=\"设置增删词库的权限等级\",\n    default_value=5\n)\n\nConfig.add_plugin_config(\n    \"word_bank\",\n    \"WORD_BANK_FUZZY\",\n    False,\n    help_=\"模糊匹配\",\n    default_value=False\n)\nConfig.add_plugin_config(\n    \"word_bank\",\n    \"WORD_BANK_KEY\",\n    True,\n    help_=\"关键字匹配\",\n    default_value=True\n)\nConfig.add_plugin_config(\n    \"word_bank\",\n    \"WORD_BANK_MIX\",\n    25,\n    help_=\"查看词条时图片内最多显示条数\",\n    default_value=25\n)\nnonebot.load_plugins(\"plugins/word_bank\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/word_bank/__init__.py b/plugins/word_bank/__init__.py
--- a/plugins/word_bank/__init__.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/word_bank/__init__.py	(date 1663665690887)
@@ -10,25 +10,4 @@
     default_value=5
 )
 
-Config.add_plugin_config(
-    "word_bank",
-    "WORD_BANK_FUZZY",
-    False,
-    help_="模糊匹配",
-    default_value=False
-)
-Config.add_plugin_config(
-    "word_bank",
-    "WORD_BANK_KEY",
-    True,
-    help_="关键字匹配",
-    default_value=True
-)
-Config.add_plugin_config(
-    "word_bank",
-    "WORD_BANK_MIX",
-    25,
-    help_="查看词条时图片内最多显示条数",
-    default_value=25
-)
 nonebot.load_plugins("plugins/word_bank")
Index: plugins/genshin/query_resource_points/query_resource.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_resource_points/query_resource.py b/plugins/genshin/query_resource_points/query_resource.py
new file mode 100755
--- /dev/null	(date 1663666668262)
+++ b/plugins/genshin/query_resource_points/query_resource.py	(date 1663666668262)
@@ -0,0 +1,272 @@
+from pathlib import Path
+from typing import Tuple, Optional, List
+from configs.path_config import IMAGE_PATH, TEXT_PATH
+from utils.message_builder import image
+from services.log import logger
+from utils.image_utils import BuildImage
+from asyncio.exceptions import TimeoutError
+from asyncio import Semaphore
+from utils.image_utils import is_valid
+from utils.http_utils import AsyncHttpx
+from httpx import ConnectTimeout
+from .map import Map
+import asyncio
+import nonebot
+import os
+
+try:
+    import ujson as json
+except ModuleNotFoundError:
+    import json
+
+driver: nonebot.Driver = nonebot.get_driver()
+
+LABEL_URL = "https://api-static.mihoyo.com/common/blackboard/ys_obc/v1/map/label/tree?app_sn=ys_obc"
+POINT_LIST_URL = "https://api-static.mihoyo.com/common/blackboard/ys_obc/v1/map/point/list?map_id=2&app_sn=ys_obc"
+MAP_URL = "https://api-static.mihoyo.com/common/map_user/ys_obc/v1/map/info?map_id=2&app_sn=ys_obc&lang=zh-cn"
+
+icon_path = IMAGE_PATH / "genshin" / "genshin_icon"
+map_path = IMAGE_PATH / "genshin" / "map"
+resource_label_file = TEXT_PATH / "genshin" / "resource_label_file.json"
+resource_point_file = TEXT_PATH / "genshin" / "resource_point_file.json"
+resource_type_file = TEXT_PATH / "genshin" / "resource_type_file.json"
+
+# 地图中心坐标
+CENTER_POINT: Optional[Tuple[int, int]] = None
+
+resource_name_list: List[str] = []
+
+MAP_RATIO = 0.5
+
+
+# 查找资源
+async def query_resource(resource_name: str) -> str:
+    global CENTER_POINT
+    planning_route: bool = False
+    if resource_name and resource_name[-2:] in ["路径", "路线"]:
+        resource_name = resource_name[:-2].strip()
+        planning_route = True
+    if not resource_name or resource_name not in resource_name_list:
+        # return f"未查找到 {resource_name} 资源，可通过 “原神资源列表” 获取全部资源名称.."
+        return ""
+    map_ = Map(
+        resource_name, CENTER_POINT, planning_route=planning_route, ratio=MAP_RATIO
+    )
+    count = map_.get_resource_count()
+    rand = await asyncio.get_event_loop().run_in_executor(
+        None, map_.generate_resource_icon_in_map
+    )
+    return (
+        f"{image(f'genshin_map_{rand}.png', 'temp')}"
+        f"\n\n※ {resource_name} 一共找到 {count} 个位置点\n※ 数据来源于米游社wiki"
+    )
+
+
+# 原神资源列表
+def get_resource_type_list():
+    with open(resource_type_file, "r", encoding="utf8") as f:
+        data = json.load(f)
+    temp = {}
+    for id_ in data.keys():
+        temp[data[id_]["name"]] = []
+        for x in data[id_]["children"]:
+            temp[data[id_]["name"]].append(x["name"])
+
+    mes = "当前资源列表如下：\n"
+
+    for resource_type in temp.keys():
+        mes += f"{resource_type}：{'，'.join(temp[resource_type])}\n"
+    return mes
+
+
+def check_resource_exists(resource: str) -> bool:
+    """
+    检查资源是否存在
+    :param resource: 资源名称
+    """
+    resource = resource.replace("路径", "").replace("路线", "")
+    return resource in resource_name_list
+
+
+@driver.on_startup
+async def init(flag: bool = False):
+    global CENTER_POINT, resource_name_list
+    try:
+        semaphore = asyncio.Semaphore(10)
+        await download_map_init(semaphore, flag)
+        await download_resource_data(semaphore)
+        await download_resource_type()
+        if not CENTER_POINT:
+            if resource_label_file.exists():
+                CENTER_POINT = json.load(
+                    open(resource_label_file, "r", encoding="utf8")
+                )["CENTER_POINT"]
+        if resource_label_file.exists():
+            with open(resource_type_file, "r", encoding="utf8") as f:
+                data = json.load(f)
+            for id_ in data:
+                for x in data[id_]["children"]:
+                    resource_name_list.append(x["name"])
+    except TimeoutError:
+        logger.warning("原神资源查询信息初始化超时....")
+
+
+# 图标及位置资源
+async def download_resource_data(semaphore: Semaphore):
+    icon_path.mkdir(parents=True, exist_ok=True)
+    resource_label_file.parent.mkdir(parents=True, exist_ok=True)
+    try:
+        response = await AsyncHttpx.get(POINT_LIST_URL, timeout=10)
+        if response.status_code == 200:
+            data = response.json()
+            if data["message"] == "OK":
+                data = data["data"]
+                for lst in ["label_list", "point_list"]:
+                    resource_data = {"CENTER_POINT": CENTER_POINT}
+                    tasks = []
+                    file = (
+                        resource_label_file
+                        if lst == "label_list"
+                        else resource_point_file
+                    )
+                    for x in data[lst]:
+                        id_ = x["id"]
+                        if lst == "label_list":
+                            img_url = x["icon"]
+                            tasks.append(
+                                asyncio.ensure_future(
+                                    download_image(
+                                        img_url,
+                                        icon_path / f"{id_}.png",
+                                        semaphore,
+                                        True,
+                                    )
+                                )
+                            )
+                        resource_data[id_] = x
+                    await asyncio.gather(*tasks)
+                    with open(file, "w", encoding="utf8") as f:
+                        json.dump(resource_data, f, ensure_ascii=False, indent=4)
+            else:
+                logger.warning(f'获取原神资源失败 msg: {data["message"]}')
+        else:
+            logger.warning(f"获取原神资源失败 code：{response.status_code}")
+    except (TimeoutError, ConnectTimeout):
+        logger.warning("获取原神资源数据超时...已再次尝试...")
+        await download_resource_data(semaphore)
+    except Exception as e:
+        logger.error(f"获取原神资源数据未知错误 {type(e)}：{e}")
+
+
+# 下载原神地图并拼图
+async def download_map_init(semaphore: Semaphore, flag: bool = False):
+    global CENTER_POINT, MAP_RATIO
+    map_path.mkdir(exist_ok=True, parents=True)
+    _map = map_path / "map.png"
+    if _map.exists() and os.path.getsize(_map) > 1024 * 1024 * 30:
+        _map.unlink()
+    try:
+        response = await AsyncHttpx.get(MAP_URL, timeout=10)
+        if response.status_code == 200:
+            data = response.json()
+            if data["message"] == "OK":
+                data = json.loads(data["data"]["info"]["detail"])
+                CENTER_POINT = (data["origin"][0], data["origin"][1])
+                if not _map.exists() or flag:
+                    data = data["slices"]
+                    idx = 0
+                    w_len = len(data[0])
+                    h_len = len(data)
+                    for _map_data in data:
+                        for _map in _map_data:
+                            map_url = _map["url"]
+                            await download_image(
+                                map_url,
+                                map_path / f"{idx}.png",
+                                semaphore,
+                                force_flag=flag,
+                            )
+                            BuildImage(
+                                0, 0, background=f"{map_path}/{idx}.png", ratio=MAP_RATIO
+                            ).save()
+                            idx += 1
+                    w, h = BuildImage(0, 0, background=f"{map_path}/0.png").size
+                    map_file = BuildImage(w * w_len, h * h_len, w, h, ratio=MAP_RATIO)
+                    for i in range(idx):
+                        img = BuildImage(0, 0, background=f"{map_path}/{i}.png")
+                        await map_file.apaste(img)
+                    map_file.save(f"{map_path}/map.png")
+            else:
+                logger.warning(f'获取原神地图失败 msg: {data["message"]}')
+        else:
+            logger.warning(f"获取原神地图失败 code：{response.status_code}")
+    except (TimeoutError, ConnectTimeout):
+        logger.warning("下载原神地图数据超时....")
+    except Exception as e:
+        logger.error(f"下载原神地图数据失败 {type(e)}：{e}")
+
+
+# 下载资源类型数据
+async def download_resource_type():
+    resource_type_file.parent.mkdir(parents=True, exist_ok=True)
+    try:
+        response = await AsyncHttpx.get(LABEL_URL, timeout=10)
+        if response.status_code == 200:
+            data = response.json()
+            if data["message"] == "OK":
+                data = data["data"]["tree"]
+                resource_data = {}
+                for x in data:
+                    id_ = x["id"]
+                    resource_data[id_] = x
+                with open(resource_type_file, "w", encoding="utf8") as f:
+                    json.dump(resource_data, f, ensure_ascii=False, indent=4)
+                logger.info(f"更新原神资源类型成功...")
+            else:
+                logger.warning(f'获取原神资源类型失败 msg: {data["message"]}')
+        else:
+            logger.warning(f"获取原神资源类型失败 code：{response.status_code}")
+    except (TimeoutError, ConnectTimeout):
+        logger.warning("下载原神资源类型数据超时....")
+    except Exception as e:
+        logger.error(f"载原神资源类型数据错误 {type(e)}：{e}")
+
+
+# 初始化资源图标
+def gen_icon(icon: Path):
+    A = BuildImage(0, 0, background=f"{icon_path}/box.png")
+    B = BuildImage(0, 0, background=f"{icon_path}/box_alpha.png")
+    icon_img = BuildImage(115, 115, background=icon)
+    icon_img.circle()
+    B.paste(icon_img, (17, 10), True)
+    B.paste(A, alpha=True)
+    B.save(icon)
+    logger.info(f"生成图片成功 file：{str(icon)}")
+
+
+# 下载图片
+async def download_image(
+    img_url: str,
+    path: Path,
+    semaphore: Semaphore,
+    gen_flag: bool = False,
+    force_flag: bool = False,
+):
+    async with semaphore:
+        try:
+            if not path.exists() or not is_valid(path) or force_flag:
+                if await AsyncHttpx.download_file(img_url, path, timeout=10):
+                    logger.info(f"下载原神资源图标：{img_url}")
+                    if gen_flag:
+                        gen_icon(path)
+                else:
+                    logger.info(f"下载原神资源图标：{img_url} 失败，等待下次更新...")
+        except Exception as e:
+            logger.warning(f"原神图片错误..已删除，等待下次更新... file: {path} {type(e)}：{e}")
+            if os.path.exists(path):
+                os.remove(path)
+
+
+#
+# def _get_point_ratio():
+#
Index: basic_plugins/apscheduler/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from utils.message_builder import image\r\nfrom utils.utils import scheduler, get_bot\r\nfrom nonebot import on_message\r\nfrom services.log import logger\r\nfrom models.group_info import GroupInfo\r\nfrom models.friend_user import FriendUser\r\nfrom nonebot.adapters.onebot.v11 import ActionFailed\r\nfrom configs.config import NICKNAME, Config\r\nfrom pathlib import Path\r\nimport shutil\r\n\r\n__zx_plugin_name__ = \"定时任务相关 [Hidden]\"\r\n__plugin_version__ = 0.1\r\n__plugin_author__ = \"HibiKier\"\r\n__plugin_task__ = {'zwa': '早晚安'}\r\n\r\n\r\nConfig.add_plugin_config(\r\n    \"_task\",\r\n    \"DEFAULT_ZWA\",\r\n    True,\r\n    help_=\"被动 早晚安 进群默认开关状态\",\r\n    default_value=True,\r\n)\r\n\r\nConfig.add_plugin_config(\r\n    \"_backup\",\r\n    \"BACKUP_FLAG\",\r\n    True,\r\n    help_=\"是否开启文件备份\",\r\n    default_value=True\r\n)\r\n\r\nConfig.add_plugin_config(\r\n    \"_backup\",\r\n    \"BACKUP_DIR_OR_FILE\",\r\n    ['data/black_word', 'data/configs', 'data/statistics', 'data/word_bank', 'data/manager', 'configs'],\r\n    name=\"文件备份\",\r\n    help_=\"备份的文件夹或文件\",\r\n    default_value=[]\r\n)\r\n\r\n\r\ncx = on_message(priority=9999, block=False, rule=lambda: False)\r\n\r\n\r\n# 早上好\r\n@scheduler.scheduled_job(\r\n    \"cron\",\r\n    hour=6,\r\n    minute=1,\r\n)\r\nasync def _():\r\n    try:\r\n        bot = get_bot()\r\n        gl = await bot.get_group_list()\r\n        gl = [g[\"group_id\"] for g in gl]\r\n        for g in gl:\r\n            result = image(\"zao.jpg\", \"zhenxun\")\r\n            try:\r\n                await bot.send_group_msg(group_id=g, message=\"[[_task|zwa]]早上好\" + result)\r\n            except ActionFailed:\r\n                logger.warning(f\"{g} 群被禁言中，无法发送早安\")\r\n    except Exception as e:\r\n        logger.error(f\"早晚安错误 e:{e}\")\r\n\r\n\r\n# 睡觉了\r\n@scheduler.scheduled_job(\r\n    \"cron\",\r\n    hour=23,\r\n    minute=59,\r\n)\r\nasync def _():\r\n    try:\r\n        bot = get_bot()\r\n        gl = await bot.get_group_list()\r\n        gl = [g[\"group_id\"] for g in gl]\r\n        for g in gl:\r\n            result = image(\"sleep.jpg\", \"zhenxun\")\r\n            try:\r\n                await bot.send_group_msg(\r\n                    group_id=g, message=f\"[[_task|zwa]]{NICKNAME}要睡觉了，你们也要早点睡呀\" + result\r\n                )\r\n            except ActionFailed:\r\n                logger.warning(f\"{g} 群被禁言中，无法发送晚安\")\r\n    except Exception as e:\r\n        logger.error(f\"早晚安错误 e:{e}\")\r\n\r\n\r\n# 自动更新群组信息\r\n@scheduler.scheduled_job(\r\n    \"cron\",\r\n    hour=3,\r\n    minute=1,\r\n)\r\nasync def _():\r\n    try:\r\n        bot = get_bot()\r\n        gl = await bot.get_group_list()\r\n        gl = [g[\"group_id\"] for g in gl]\r\n        for g in gl:\r\n            group_info = await bot.get_group_info(group_id=g)\r\n            await GroupInfo.add_group_info(\r\n                group_info[\"group_id\"],\r\n                group_info[\"group_name\"],\r\n                group_info[\"max_member_count\"],\r\n                group_info[\"member_count\"],\r\n                1\r\n            )\r\n            logger.info(f\"自动更新群组 {g} 信息成功\")\r\n    except Exception as e:\r\n        logger.error(f\"自动更新群组信息错误 e:{e}\")\r\n\r\n\r\n# 自动更新好友信息\r\n@scheduler.scheduled_job(\r\n    \"cron\",\r\n    hour=3,\r\n    minute=1,\r\n)\r\nasync def _():\r\n    try:\r\n        bot = get_bot()\r\n        fl = await bot.get_friend_list()\r\n        for f in fl:\r\n            if await FriendUser.add_friend_info(f[\"user_id\"], f[\"nickname\"]):\r\n                logger.info(f'自动更新好友 {f[\"user_id\"]} 信息成功')\r\n            else:\r\n                logger.warning(f'自动更新好友 {f[\"user_id\"]} 信息失败')\r\n    except Exception as e:\r\n        logger.error(f\"自动更新群组信息错误 e:{e}\")\r\n\r\n\r\n# 自动备份\r\n@scheduler.scheduled_job(\r\n    \"cron\",\r\n    hour=3,\r\n    minute=25,\r\n)\r\nasync def _():\r\n    if Config.get_config(\"_backup\", \"BACKUP_FLAG\"):\r\n        _backup_path = Path() / 'backup'\r\n        _backup_path.mkdir(exist_ok=True, parents=True)\r\n        for x in Config.get_config(\"_backup\", \"BACKUP_DIR_OR_FILE\"):\r\n            try:\r\n                path = Path(x)\r\n                _p = _backup_path / x\r\n                if path.exists():\r\n                    if path.is_dir():\r\n                        if _p.exists():\r\n                            shutil.rmtree(_p, ignore_errors=True)\r\n                        shutil.copytree(x, _p)\r\n                    else:\r\n                        if _p.exists():\r\n                            _p.unlink()\r\n                        shutil.copy(x, _p)\r\n                    logger.info(f'已完成自动备份：{x}')\r\n            except Exception as e:\r\n                logger.error(f\"自动备份文件 {x} 发生错误 {type(e)}:{e}\")\r\n\r\n\r\n    #  一次性任务\r\n# 固定时间触发，仅触发一次：\r\n#\r\n# from datetime import datetime\r\n#\r\n# @nonebot.scheduler.scheduled_job(\r\n#     'date',\r\n#     run_date=datetime(2021, 1, 1, 0, 0),\r\n#     # timezone=None,\r\n# )\r\n# async def _():\r\n#     await bot.send_group_msg(group_id=123456,\r\n#                              message=\"2021，新年快乐！\")\r\n\r\n#  定期任务\r\n#  从 start_date 开始到 end_date 结束，根据类似 Cron\r\n#\r\n# 的规则触发任务：\r\n#\r\n# @nonebot.scheduler.scheduled_job(\r\n#     'cron',\r\n#     # year=None,\r\n#     # month=None,\r\n#     # day=None,\r\n#     # week=None,\r\n#     day_of_week=\"mon,tue,wed,thu,fri\",\r\n#     hour=7,\r\n#     # minute=None,\r\n#     # second=None,\r\n#     # start_date=None,\r\n#     # end_date=None,\r\n#     # timezone=None,\r\n# )\r\n# async def _():\r\n#     await bot.send_group_msg(group_id=123456,\r\n#                              message=\"起床啦！\")\r\n\r\n#  间隔任务\r\n#\r\n# interval 触发器\r\n#\r\n# 从 start_date 开始，每间隔一段时间触发，到 end_date 结束：\r\n#\r\n# @nonebot.scheduler.scheduled_job(\r\n#     'interval',\r\n#     # weeks=0,\r\n#     # days=0,\r\n#     # hours=0,\r\n#     minutes=5,\r\n#     # seconds=0,\r\n#     # start_date=time.now(),\r\n#     # end_date=None,\r\n# )\r\n# async def _():\r\n#     has_new_item = check_new_item()\r\n#     if has_new_item:\r\n#         await bot.send_group_msg(group_id=123456,\r\n#                                  message=\"XX有更新啦！\")\r\n\r\n\r\n# 动态的计划任务\r\n# import datetime\r\n#\r\n# from apscheduler.triggers.date import DateTrigger # 一次性触发器\r\n# # from apscheduler.triggers.cron import CronTrigger # 定期触发器\r\n# # from apscheduler.triggers.interval import IntervalTrigger # 间隔触发器\r\n# from nonebot import on_command, scheduler\r\n#\r\n# @on_command('赖床')\r\n# async def _(session: CommandSession):\r\n#     await session.send('我会在5分钟后再喊你')\r\n#\r\n#     # 制作一个“5分钟后”触发器\r\n#     delta = datetime.timedelta(minutes=5)\r\n#     trigger = DateTrigger(\r\n#         run_date=datetime.datetime.now() + delta\r\n#     )\r\n#\r\n#     # 添加任务\r\n#     scheduler.add_job(\r\n#         func=session.send,  # 要添加任务的函数，不要带参数\r\n#         trigger=trigger,  # 触发器\r\n#         args=('不要再赖床啦！',),  # 函数的参数列表，注意：只有一个值时，不能省略末尾的逗号\r\n#         # kwargs=None,\r\n#         misfire_grace_time=60,  # 允许的误差时间，建议不要省略\r\n#         # jobstore='default',  # 任务储存库，在下一小节中说明\r\n#     )\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic_plugins/apscheduler/__init__.py b/basic_plugins/apscheduler/__init__.py
--- a/basic_plugins/apscheduler/__init__.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/basic_plugins/apscheduler/__init__.py	(date 1663665690883)
@@ -60,7 +60,7 @@
             try:
                 await bot.send_group_msg(group_id=g, message="[[_task|zwa]]早上好" + result)
             except ActionFailed:
-                logger.warning(f"{g} 群被禁言中，无法发送早安")
+                logger.warning(f"{g} 发送早安失败")
     except Exception as e:
         logger.error(f"早晚安错误 e:{e}")
 
@@ -83,7 +83,7 @@
                     group_id=g, message=f"[[_task|zwa]]{NICKNAME}要睡觉了，你们也要早点睡呀" + result
                 )
             except ActionFailed:
-                logger.warning(f"{g} 群被禁言中，无法发送晚安")
+                logger.warning(f"{g} 发送晚安失败")
     except Exception as e:
         logger.error(f"早晚安错误 e:{e}")
 
Index: basic_plugins/init_plugin_config/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from .init_group_manager import init_group_manager, group_manager\nfrom .init_plugins_config import init_plugins_config\nfrom .init_plugins_data import init_plugins_data, plugins_manager\nfrom .init_none_plugin_count_manager import init_none_plugin_count_manager\nfrom .init_plugins_resources import init_plugins_resources\nfrom .init_plugins_settings import init_plugins_settings\nfrom .init_plugins_limit import (\n    init_plugins_block_limit,\n    init_plugins_count_limit,\n    init_plugins_cd_limit,\n)\nfrom .init import init\nfrom .check_plugin_status import check_plugin_status\nfrom nonebot.adapters.onebot.v11 import Bot\nfrom configs.path_config import DATA_PATH\nfrom services.log import logger\nfrom pathlib import Path\nfrom nonebot import Driver\nimport nonebot\n\n\n__zx_plugin_name__ = \"初始化插件数据 [Hidden]\"\n__plugin_version__ = 0.1\n__plugin_author__ = \"HibiKier\"\n\n\ndriver: Driver = nonebot.get_driver()\n\n\n@driver.on_startup\ndef _():\n    \"\"\"\n    初始化数据\n    \"\"\"\n    _flag = False\n    config_file = DATA_PATH / \"configs\" / \"plugins2config.yaml\"\n    if not config_file.exists():\n        _flag = True\n    init()\n    init_plugins_settings(DATA_PATH)\n    init_plugins_cd_limit(DATA_PATH)\n    init_plugins_block_limit(DATA_PATH)\n    init_plugins_count_limit(DATA_PATH)\n    init_plugins_data(DATA_PATH)\n    init_plugins_config(DATA_PATH)\n    init_plugins_resources()\n    init_none_plugin_count_manager()\n    x = group_manager.get_super_old_data()\n    if x:\n        for key in x.keys():\n            plugins_manager.block_plugin(key, block_type=x[key])\n    if _flag:\n        raise Exception(\"首次运行，已在configs目录下生成配置文件config.yaml，修改后重启即可...\")\n    logger.info(\"初始化数据完成...\")\n\n\n@driver.on_bot_connect\nasync def _(bot: Bot):\n    await init_group_manager()\n    await check_plugin_status(bot)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic_plugins/init_plugin_config/__init__.py b/basic_plugins/init_plugin_config/__init__.py
--- a/basic_plugins/init_plugin_config/__init__.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/basic_plugins/init_plugin_config/__init__.py	(date 1663665690883)
@@ -14,7 +14,6 @@
 from nonebot.adapters.onebot.v11 import Bot
 from configs.path_config import DATA_PATH
 from services.log import logger
-from pathlib import Path
 from nonebot import Driver
 import nonebot
 
@@ -28,7 +27,7 @@
 
 
 @driver.on_startup
-def _():
+async def _():
     """
     初始化数据
     """
Index: plugins/bilibili_sub/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/bilibili_sub/utils.py b/plugins/bilibili_sub/utils.py
new file mode 100755
--- /dev/null	(date 1663666706071)
+++ b/plugins/bilibili_sub/utils.py	(date 1663666706071)
@@ -0,0 +1,115 @@
+from utils.image_utils import BuildImage
+from configs.path_config import IMAGE_PATH
+from utils.http_utils import AsyncHttpx, get_user_agent
+# from bilibili_api import user
+from bilireq.user import get_user_info
+from httpx import AsyncClient
+from io import BytesIO
+
+
+BORDER_PATH = IMAGE_PATH / "border"
+BORDER_PATH.mkdir(parents=True, exist_ok=True)
+BASE_URL = "https://api.bilibili.com"
+
+async def get_pic(url: str) -> bytes:
+    """
+    获取图像
+    :param url: 图像链接
+    :return: 图像二进制
+    """
+    return (await AsyncHttpx.get(url, timeout=10)).content
+
+
+async def create_live_des_image(uid: int, title: str, cover: str, tags: str, des: str):
+    """
+    生成主播简介图片
+    :param uid: 主播 uid
+    :param title: 直播间标题
+    :param cover: 直播封面
+    :param tags: 直播标签
+    :param des: 直播简介
+    :return:
+    """
+
+    user_info = await get_user_info(uid)
+    name = user_info["name"]
+    sex = user_info["sex"]
+    face = user_info["face"]
+    sign = user_info["sign"]
+    ava = BuildImage(100, 100, background=BytesIO(await get_pic(face)))
+    ava.circle()
+    cover = BuildImage(470, 265, background=BytesIO(await get_pic(cover)))
+
+
+def _create_live_des_image(
+    title: str,
+    cover: BuildImage,
+    tags: str,
+    des: str,
+    user_name: str,
+    sex: str,
+    sign: str,
+    ava: BuildImage,
+):
+    """
+    生成主播简介图片
+    :param title: 直播间标题
+    :param cover: 直播封面
+    :param tags: 直播标签
+    :param des: 直播简介
+    :param user_name: 主播名称
+    :param sex: 主播性别
+    :param sign: 主播签名
+    :param ava: 主播头像
+    :return:
+    """
+    border = BORDER_PATH / "0.png"
+    border_img = None
+    if border.exists():
+        border_img = BuildImage(1772, 2657, background=border)
+    bk = BuildImage(1772, 2657, font_size=30)
+    bk.paste(cover, (0, 100), center_type="by_width")
+
+
+async def get_meta(media_id: int, auth=None, reqtype="both", **kwargs):
+    """
+    根据番剧 ID 获取番剧元数据信息，
+    作为bilibili_api和bilireq的替代品。
+    如果bilireq.bangumi更新了，可以转为调用bilireq.bangumi的get_meta方法，两者完全一致。
+    """
+    from bilireq.utils import get
+
+    BASE_URL = "https://api.bilibili.com"
+    url = f"{BASE_URL}/pgc/review/user"
+    params = {"media_id": media_id}
+    raw_json = await get(url, raw=True, params=params, auth=auth, reqtype=reqtype, **kwargs)
+    return raw_json['result']
+
+
+async def get_videos(
+        uid: int, tid: int = 0, pn: int = 1, keyword: str = "", order: str = "pubdate",
+        *, auth=None, reqtype="both", **kwargs
+):
+    """
+    获取用户投该视频信息
+    作为bilibili_api和bilireq的替代品。
+    如果bilireq.user更新了，可以转为调用bilireq.user的get_videos方法，两者完全一致。
+
+    :param uid: 用户 UID
+    :param tid: 分区 ID
+    :param pn: 页码
+    :param keyword: 搜索关键词
+    :param order: 排序方式，可以为 “pubdate(上传日期从新到旧), stow(收藏从多到少), click(播放量从多到少)”
+    """
+    from bilireq.utils import get
+    BASE_URL = "https://api.bilibili.com"
+    url = f"{BASE_URL}/x/space/arc/search"
+    params = {
+        "mid": uid,
+        "ps": 30,
+        "tid": tid,
+        "pn": pn,
+        "keyword": keyword,
+        "order": order
+    }
+    return await get(url, params=params, auth=auth, reqtype=reqtype, **kwargs)
\ No newline at end of file
Index: plugins/quotations.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from nonebot import on_command\r\nfrom services.log import logger\r\nfrom nonebot.adapters.onebot.v11 import Bot, MessageEvent, GroupMessageEvent\r\nfrom nonebot.typing import T_State\r\nfrom utils.http_utils import AsyncHttpx\r\n\r\n\r\n__zx_plugin_name__ = \"一言二次元语录\"\r\n__plugin_usage__ = \"\"\"\r\nusage：\r\n    一言二次元语录\r\n    指令：\r\n        语录/二次元\r\n\"\"\".strip()\r\n__plugin_des__ = \"二次元语录给你力量\"\r\n__plugin_cmd__ = [\"语录/二次元\"]\r\n__plugin_version__ = 0.1\r\n__plugin_author__ = \"HibiKier\"\r\n__plugin_settings__ = {\r\n    \"level\": 5,\r\n    \"default_status\": True,\r\n    \"limit_superuser\": False,\r\n    \"cmd\": [\"语录\", \"二次元\"],\r\n}\r\n\r\n\r\nquotations = on_command(\"语录\", aliases={\"二次元\", \"二次元语录\"}, priority=5, block=True)\r\n\r\nurl = \"https://international.v1.hitokoto.cn/?c=a\"\r\n\r\n\r\n@quotations.handle()\r\nasync def _(bot: Bot, event: MessageEvent, state: T_State):\r\n    data = (await AsyncHttpx.get(url, timeout=5)).json()\r\n    result = f'{data[\"hitokoto\"]}\\t——{data[\"from\"]}'\r\n    await quotations.send(result)\r\n    logger.info(\r\n        f\"(USER {event.user_id}, GROUP {event.group_id if isinstance(event, GroupMessageEvent) else 'private'}) 发送语录:\"\r\n        + result\r\n    )\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/quotations.py b/plugins/quotations.py
--- a/plugins/quotations.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/quotations.py	(date 1663665690883)
@@ -1,4 +1,4 @@
-from nonebot import on_command
+from nonebot import on_regex
 from services.log import logger
 from nonebot.adapters.onebot.v11 import Bot, MessageEvent, GroupMessageEvent
 from nonebot.typing import T_State
@@ -24,7 +24,7 @@
 }
 
 
-quotations = on_command("语录", aliases={"二次元", "二次元语录"}, priority=5, block=True)
+quotations = on_regex("^(语录|二次元)$", priority=5, block=True)
 
 url = "https://international.v1.hitokoto.cn/?c=a"
 
Index: plugins/genshin/query_user/genshin_sign/data_source.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/genshin_sign/data_source.py b/plugins/genshin/query_user/genshin_sign/data_source.py
new file mode 100644
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_user/genshin_sign/data_source.py	(date 1663666724604)
@@ -0,0 +1,145 @@
+from utils.http_utils import AsyncHttpx
+from configs.config import Config
+from services.log import logger
+from ..mihoyobbs_sign.setting import *
+from .._models import Genshin
+from typing import Optional, Dict
+import hashlib
+import random
+import string
+import uuid
+import time
+
+
+async def genshin_sign(uid: int) -> Optional[str]:
+    """
+    原神签到信息
+    :param uid: uid
+    """
+    data = await _sign(uid)
+    if not data:
+        return "签到失败..."
+    status = data["message"]
+    if status == "OK":
+        try:
+            sign_info = await _get_sign_info(uid)
+            if sign_info:
+                sign_info = sign_info["data"]
+                sign_list = await get_sign_reward_list()
+                get_reward = sign_list["data"]["awards"][
+                    int(sign_info["total_sign_day"]) - 1
+                    ]["name"]
+                reward_num = sign_list["data"]["awards"][
+                    int(sign_info["total_sign_day"]) - 1
+                    ]["cnt"]
+                get_im = f"本次签到获得：{get_reward}x{reward_num}"
+                logger.info("get_im:" + get_im + "\nsign_info:" + str(sign_info))
+                if status == "OK" and sign_info["is_sign"]:
+                    return f"原神签到成功！\n{get_im}\n本月漏签次数：{sign_info['sign_cnt_missed']}"
+        except Exception as e:
+            logger.error(f"原神签到发生错误 UID：{str(data)}")
+            return f"原神签到发生错误: {str(data)}"
+    else:
+        return status
+    if data["data"]["risk_code"] == 375:
+        return "原神签到失败\n账号可能被风控，请前往米游社手动签到！"
+    return str(data)
+
+
+# 获取请求Header里的DS 当web为true则生成网页端的DS
+def get_ds(web: bool) -> str:
+    if web:
+        n = mihoyobbs_Salt_web
+    else:
+        n = mihoyobbs_Salt
+    i = str(timestamp())
+    r = random_text(6)
+    c = md5("salt=" + n + "&t=" + i + "&r=" + r)
+    return f"{i},{r},{c}"
+
+
+# 时间戳
+def timestamp() -> int:
+    return int(time.time())
+
+
+def random_text(num: int) -> str:
+    return ''.join(random.sample(string.ascii_lowercase + string.digits, num))
+
+
+def md5(text: str) -> str:
+    md5 = hashlib.md5()
+    md5.update(text.encode())
+    return md5.hexdigest()
+
+
+# 生成一个device id
+def get_device_id(cookie) -> str:
+    return str(uuid.uuid3(uuid.NAMESPACE_URL, cookie)).replace(
+        '-', '').upper()
+
+
+async def _sign(uid: int, server_id: str = "cn_gf01") -> Optional[Dict[str, str]]:
+    """
+    米游社签到
+    :param uid: uid
+    :param server_id: 服务器id
+    """
+    if str(uid)[0] == "5":
+        server_id = "cn_qd01"
+    try:
+        cookie = await Genshin.get_user_cookie(uid, True)
+        headers['DS'] = get_ds(web=True)
+        headers['Referer'] = 'https://webstatic.mihoyo.com/bbs/event/signin-ys/index.html?bbs_auth_required=true' \
+                             f'&act_id={genshin_Act_id}&utm_source=bbs&utm_medium=mys&utm_campaign=icon'
+        headers['Cookie'] = cookie
+        headers['x-rpc-device_id'] = get_device_id(cookie)
+        req = await AsyncHttpx.post(
+            url=genshin_Signurl,
+            headers=headers,
+            json={"act_id": genshin_Act_id, "uid": uid, "region": server_id},
+        )
+        return req.json()
+    except Exception as e:
+        logger.error(f"米游社签到发生错误 UID：{uid} {type(e)}：{e}")
+    return None
+
+
+async def get_sign_reward_list():
+    """
+    获取签到奖励列表
+    """
+    try:
+        req = await AsyncHttpx.get(
+            url="https://api-takumi.mihoyo.com/event/bbs_sign_reward/home?act_id=e202009291139501",
+            headers={
+                "x-rpc-app_version": str(Config.get_config("genshin", "mhyVersion")),
+                "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) miHoYoBBS/2.11.1",
+                "x-rpc-client_type": str(Config.get_config("genshin", "client_type")),
+                "Referer": "https://webstatic.mihoyo.com/",
+            },
+        )
+        return req.json()
+    except Exception as e:
+        logger.error(f"获取签到奖励列表发生错误 {type(e)}：{e}")
+    return None
+
+
+async def _get_sign_info(uid: int, server_id: str = "cn_gf01"):
+    if str(uid)[0] == "5":
+        server_id = "cn_qd01"
+    try:
+        req = await AsyncHttpx.get(
+            url=f"https://api-takumi.mihoyo.com/event/bbs_sign_reward/info?act_id=e202009291139501&region={server_id}&uid={uid}",
+            headers={
+                "x-rpc-app_version": str(Config.get_config("genshin", "mhyVersion")),
+                "Cookie": await Genshin.get_user_cookie(int(uid), True),
+                "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) miHoYoBBS/2.11.1",
+                "x-rpc-client_type": str(Config.get_config("genshin", "client_type")),
+                "Referer": "https://webstatic.mihoyo.com/",
+            },
+        )
+        return req.json()
+    except Exception as e:
+        logger.error(f"获取签到信息发生错误 UID：{uid} {type(e)}：{e}")
+    return None
Index: plugins/open_cases/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/open_cases/__init__.py b/plugins/open_cases/__init__.py
new file mode 100755
--- /dev/null	(date 1663666721988)
+++ b/plugins/open_cases/__init__.py	(date 1663666721988)
@@ -0,0 +1,241 @@
+from typing import Type, Tuple, Any
+from nonebot import on_command
+from nonebot.matcher import Matcher
+from utils.utils import scheduler, is_number
+from nonebot.adapters.onebot.v11.permission import GROUP
+from nonebot.typing import T_State
+from nonebot.adapters.onebot.v11 import GroupMessageEvent, MessageEvent, Message
+from nonebot.permission import SUPERUSER
+import random
+from nonebot.plugin import MatcherGroup
+from configs.path_config import IMAGE_PATH
+from nonebot.params import CommandArg, RegexGroup
+from .open_cases_c import (
+    open_case,
+    total_open_statistics,
+    group_statistics,
+    my_knifes_name,
+    open_shilian_case,
+)
+from .utils import util_get_buff_price, util_get_buff_img, update_count_daily
+from configs.config import Config
+
+__zx_plugin_name__ = "开箱"
+__plugin_usage__ = """
+usage：
+    看看你的人品罢了
+    模拟开箱，完美公布的真实概率，只想看看替你省了多少钱
+    指令：
+        开箱 ?[武器箱]
+        [1-30]连开箱 ?[武器箱]
+        我的开箱
+        我的金色
+        群开箱统计
+        * 不包含[武器箱]时随机开箱 *
+    目前支持的武器箱：
+        1.狂牙大行动武器箱
+        2.突围大行动武器箱
+        3.命悬一线武器箱
+        4.裂空武器箱
+        5.光谱武器箱
+    示例：开箱 命悬一线
+""".strip()
+__plugin_superuser_usage__ = """
+usage：
+    更新皮肤指令
+    重置开箱： 重置今日开箱所有次数
+    指令：
+        更新开箱图片 ?[武器箱]
+        更新开箱价格 ?[武器箱]
+    * 不指定武器箱时则全部更新 *
+    * 过多的爬取会导致账号API被封 *
+""".strip()
+__plugin_des__ = "csgo模拟开箱[戒赌]"
+__plugin_cmd__ = [
+    "开箱 ?[武器箱]",
+    "[1-30]连开箱 ?[武器箱]",
+    "我的开箱",
+    "我的金色",
+    "群开箱统计",
+    "更新开箱图片 ?[武器箱] [_superuser]",
+    "更新开箱价格 ?[武器箱] [_superuser]",
+]
+__plugin_type__ = ("抽卡相关", 1)
+__plugin_version__ = 0.1
+__plugin_author__ = "HibiKier"
+__plugin_settings__ = {
+    "level": 5,
+    "default_status": True,
+    "limit_superuser": False,
+    "cmd": ["csgo开箱", "开箱"],
+}
+__plugin_task__ = {"open_case_reset_remind": "每日开箱重置提醒"}
+__plugin_cd_limit__ = {"rst": "着什么急啊，慢慢来！"}
+__plugin_resources__ = {f"cases": IMAGE_PATH}
+__plugin_configs__ = {
+    "INITIAL_OPEN_CASE_COUNT": {"value": 20, "help": "初始每日开箱次数", "default_value": 20},
+    "EACH_IMPRESSION_ADD_COUNT": {
+        "value": 3,
+        "help": "每 * 点好感度额外增加开箱次数",
+        "default_value": 3,
+    },
+    "COOKIE": {
+        "value": None,
+        "help": "BUFF的cookie",
+    },
+    "BUFF_PROXY": {"value": None, "help": "使用代理访问BUFF"},
+}
+
+Config.add_plugin_config(
+    "_task",
+    "DEFAULT_OPEN_CASE_RESET_REMIND",
+    True,
+    help_="被动 每日开箱重置提醒 进群默认开关状态",
+    default_value=True,
+)
+
+cases_name = ["狂牙大行动", "突围大行动", "命悬一线", "裂空", "光谱"]
+
+cases_matcher_group = MatcherGroup(priority=5, permission=GROUP, block=True)
+
+
+k_open_case = cases_matcher_group.on_command("开箱")
+
+reload_count = cases_matcher_group.on_command("重置开箱")
+
+
+@reload_count.handle()
+async def _(event: GroupMessageEvent):
+    await update_count_daily()
+
+
+@k_open_case.handle()
+async def _(event: GroupMessageEvent, arg: Message = CommandArg()):
+    case_name = arg.extract_plain_text().strip()
+    case_name = case_name.replace("武器箱", "").strip()
+    if case_name:
+        result = await open_case(event.user_id, event.group_id, case_name)
+    else:
+        result = await open_case(
+            event.user_id, event.group_id, random.choice(cases_name)
+        )
+    await k_open_case.finish(result, at_sender=True)
+
+
+total_case_data = cases_matcher_group.on_command(
+    "我的开箱", aliases={"开箱统计", "开箱查询", "查询开箱"}
+)
+
+
+@total_case_data.handle()
+async def _(event: GroupMessageEvent):
+    await total_case_data.finish(
+        await total_open_statistics(event.user_id, event.group_id),
+        at_sender=True,
+    )
+
+
+group_open_case_statistics = cases_matcher_group.on_command("群开箱统计")
+
+
+@group_open_case_statistics.handle()
+async def _(event: GroupMessageEvent):
+    await group_open_case_statistics.finish(await group_statistics(event.group_id))
+
+
+my_kinfes = on_command("我的金色", priority=1, permission=GROUP, block=True)
+
+
+@my_kinfes.handle()
+async def _(event: GroupMessageEvent):
+    await my_kinfes.finish(
+        await my_knifes_name(event.user_id, event.group_id), at_sender=True
+    )
+
+
+open_shilian: Type[Matcher] = cases_matcher_group.on_regex("(.*)连开箱(.*)?")
+
+
+@open_shilian.handle()
+async def _(event: GroupMessageEvent, state: T_State, reg_group: Tuple[Any, ...] = RegexGroup()):
+    num, case_name = reg_group
+    if is_number(num) or num_dict.get(num):
+        try:
+            num = num_dict[num]
+        except KeyError:
+            num = int(num)
+        if num > 30:
+            await open_shilian.finish("开箱次数不要超过30啊笨蛋！", at_sender=True)
+        if num < 0:
+            await open_shilian.finish("再负开箱就扣你明天开箱数了！", at_sender=True)
+    else:
+        await open_shilian.finish("必须要是数字切不要超过30啊笨蛋！中文也可！", at_sender=True)
+    case_name = case_name.replace("武器箱", "").strip()
+    if not case_name:
+        case_name = random.choice(cases_name)
+    elif case_name not in cases_name:
+        await open_shilian.finish("武器箱未收录！", at_sender=True)
+    await open_shilian.finish(
+        await open_shilian_case(event.user_id, event.group_id, case_name, num),
+        at_sender=True,
+    )
+
+
+num_dict = {
+    "一": 1,
+    "二": 2,
+    "三": 3,
+    "四": 4,
+    "五": 5,
+    "六": 6,
+    "七": 7,
+    "八": 8,
+    "九": 9,
+    "十": 10,
+    "十一": 11,
+    "十二": 12,
+    "十三": 13,
+    "十四": 14,
+    "十五": 15,
+    "十六": 16,
+    "十七": 17,
+    "十八": 18,
+    "十九": 19,
+    "二十": 20,
+    "二十一": 21,
+    "二十二": 22,
+    "二十三": 23,
+    "二十四": 24,
+    "二十五": 25,
+    "二十六": 26,
+    "二十七": 27,
+    "二十八": 28,
+    "二十九": 29,
+    "三十": 30,
+}
+
+
+update_price = on_command("更新开箱价格", priority=1, permission=SUPERUSER, block=True)
+
+
+@update_price.handle()
+async def _(event: MessageEvent, arg: Message = CommandArg()):
+    await update_price.send(await util_get_buff_price(arg.extract_plain_text().strip() or "狂牙大行动"))
+
+
+update_img = on_command("更新开箱图片", priority=1, permission=SUPERUSER, block=True)
+
+
+@update_img.handle()
+async def _(event: MessageEvent, arg: Message = CommandArg()):
+    await update_img.send(await util_get_buff_img(arg.extract_plain_text().strip() or "狂牙大行动"))
+
+
+# 重置开箱
+@scheduler.scheduled_job(
+    "cron",
+    hour=0,
+    minute=1,
+)
+async def _():
+    await update_count_daily()
Index: plugins/sign_in/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from .config import (\r\n    SIGN_RESOURCE_PATH,\r\n    SIGN_TODAY_CARD_PATH,\r\n    SIGN_BORDER_PATH,\r\n    SIGN_BACKGROUND_PATH,\r\n    lik2level,\r\n    lik2relation,\r\n    level2attitude,\r\n    weekdays,\r\n)\r\nfrom models.sign_group_user import SignGroupUser\r\nfrom models.group_member_info import GroupInfoUser\r\nfrom nonebot.adapters.onebot.v11 import MessageSegment\r\nfrom configs.config import Config\r\nfrom utils.utils import get_user_avatar\r\nfrom utils.image_utils import BuildImage\r\nfrom utils.message_builder import image\r\nfrom configs.config import NICKNAME\r\nfrom pathlib import Path\r\nfrom datetime import datetime\r\nfrom typing import Optional, List\r\nfrom nonebot import Driver\r\nfrom io import BytesIO\r\nimport asyncio\r\nimport random\r\nimport nonebot\r\nimport time\r\nimport locale\r\nimport os\r\n\r\n\r\ndriver: Driver = nonebot.get_driver()\r\n\r\n\r\n@driver.on_startup\r\nasync def init_image():\r\n    SIGN_RESOURCE_PATH.mkdir(parents=True, exist_ok=True)\r\n    SIGN_TODAY_CARD_PATH.mkdir(exist_ok=True, parents=True)\r\n    await GroupInfoUser.add_member_info(114514, 114514, \"\", datetime.min, 0)\r\n    _u = await GroupInfoUser.get_member_info(114514, 114514)\r\n    if _u.uid is None:\r\n        await _u.update(uid=0).apply()\r\n    generate_progress_bar_pic()\r\n    clear_sign_data_pic()\r\n\r\n\r\nasync def get_card(\r\n    user: \"SignGroupUser\",\r\n    nickname: str,\r\n    add_impression: Optional[float],\r\n    gold: Optional[int],\r\n    gift: str,\r\n    is_double: bool = False,\r\n    is_card_view: bool = False,\r\n) -> MessageSegment:\r\n    user_id = user.user_qq\r\n    date = datetime.now().date()\r\n    _type = \"view\" if is_card_view else \"sign\"\r\n    card_file = (\r\n        Path(SIGN_TODAY_CARD_PATH) / f\"{user_id}_{user.group_id}_{_type}_{date}.png\"\r\n    )\r\n    if card_file.exists():\r\n        return image(f\"{user_id}_{user.group_id}_{_type}_{date}.png\", \"sign/today_card\")\r\n    else:\r\n        if add_impression == -1:\r\n            card_file = (\r\n                Path(SIGN_TODAY_CARD_PATH)\r\n                / f\"{user_id}_{user.group_id}_view_{date}.png\"\r\n            )\r\n            if card_file.exists():\r\n                return image(\r\n                    f\"{user_id}_{user.group_id}_view_{date}.png\",\r\n                    \"sign/today_card\",\r\n                )\r\n            is_card_view = True\r\n        ava = BytesIO(await get_user_avatar(user_id))\r\n        uid = await GroupInfoUser.get_group_member_uid(user.user_qq, user.group_id)\r\n        impression_list = None\r\n        if is_card_view:\r\n            _, impression_list, _ = await SignGroupUser.get_all_impression(\r\n                user.group_id\r\n            )\r\n        return await asyncio.get_event_loop().run_in_executor(\r\n            None,\r\n            _generate_card,\r\n            user,\r\n            nickname,\r\n            user_id,\r\n            add_impression,\r\n            gold,\r\n            gift,\r\n            uid,\r\n            ava,\r\n            impression_list,\r\n            is_double,\r\n            is_card_view,\r\n        )\r\n\r\n\r\ndef _generate_card(\r\n    user: \"SignGroupUser\",\r\n    nickname: str,\r\n    user_id: int,\r\n    impression: Optional[float],\r\n    gold: Optional[int],\r\n    gift: str,\r\n    uid: str,\r\n    ava_bytes: BytesIO,\r\n    impression_list: List[float],\r\n    is_double: bool = False,\r\n    is_card_view: bool = False,\r\n) -> MessageSegment:\r\n    ava_bk = BuildImage(140, 140, is_alpha=True)\r\n    ava_border = BuildImage(\r\n        140,\r\n        140,\r\n        background=SIGN_BORDER_PATH / \"ava_border_01.png\",\r\n    )\r\n    ava = BuildImage(102, 102, background=ava_bytes)\r\n    ava.circle()\r\n    ava_bk.paste(ava, center_type=\"center\")\r\n    ava_bk.paste(ava_border, alpha=True, center_type=\"center\")\r\n\r\n    info_img = BuildImage(250, 150, color=(255, 255, 255, 0), font_size=15)\r\n    level, next_impression, previous_impression = get_level_and_next_impression(\r\n        user.impression\r\n    )\r\n    interpolation = next_impression - user.impression\r\n    if level == \"9\":\r\n        level = \"8\"\r\n        interpolation = 0\r\n    info_img.text((0, 0), f\"· 好感度等级：{level} [{lik2relation[level]}]\")\r\n    info_img.text((0, 20), f\"· {NICKNAME}对你的态度：{level2attitude[level]}\")\r\n    info_img.text((0, 40), f\"· 距离升级还差 {interpolation:.2f} 好感度\")\r\n\r\n    bar_bk = BuildImage(220, 20, background=SIGN_RESOURCE_PATH / \"bar_white.png\")\r\n    bar = BuildImage(220, 20, background=SIGN_RESOURCE_PATH / \"bar.png\")\r\n    bar_bk.paste(\r\n        bar,\r\n        (\r\n            -int(\r\n                220\r\n                * (\r\n                    (next_impression - user.impression)\r\n                    / (next_impression - previous_impression)\r\n                )\r\n            ),\r\n            0,\r\n        ),\r\n        True,\r\n    )\r\n    font_size = 30\r\n    if \"好感度双倍加持卡\" in gift:\r\n        font_size = 20\r\n    gift_border = BuildImage(\r\n        270,\r\n        100,\r\n        background=SIGN_BORDER_PATH / \"gift_border_02.png\",\r\n        font_size=font_size,\r\n    )\r\n    gift_border.text((0, 0), gift, center_type=\"center\")\r\n\r\n    bk = BuildImage(\r\n        876,\r\n        424,\r\n        background=SIGN_BACKGROUND_PATH\r\n        / random.choice(os.listdir(SIGN_BACKGROUND_PATH)),\r\n        font_size=25,\r\n    )\r\n    A = BuildImage(876, 274, background=SIGN_RESOURCE_PATH / \"white.png\")\r\n    line = BuildImage(2, 180, color=\"black\")\r\n    A.transparent(2)\r\n    A.paste(ava_bk, (25, 80), True)\r\n    A.paste(line, (200, 70))\r\n\r\n    nickname_img = BuildImage(\r\n        0,\r\n        0,\r\n        plain_text=nickname,\r\n        color=(255, 255, 255, 0),\r\n        font_size=50,\r\n        font_color=(255, 255, 255),\r\n    )\r\n    if uid:\r\n        uid = f\"{uid}\".rjust(12, \"0\")\r\n        uid = uid[:4] + \" \" + uid[4:8] + \" \" + uid[8:]\r\n    else:\r\n        uid = \"XXXX XXXX XXXX\"\r\n    uid_img = BuildImage(\r\n        0,\r\n        0,\r\n        plain_text=f\"UID: {uid}\",\r\n        color=(255, 255, 255, 0),\r\n        font_size=30,\r\n        font_color=(255, 255, 255),\r\n    )\r\n    sign_day_img = BuildImage(\r\n        0,\r\n        0,\r\n        plain_text=f\"{user.checkin_count}\",\r\n        color=(255, 255, 255, 0),\r\n        font_size=40,\r\n        font_color=(211, 64, 33),\r\n    )\r\n    lik_text1_img = BuildImage(\r\n        0, 0, plain_text=\"当前\", color=(255, 255, 255, 0), font_size=20\r\n    )\r\n    lik_text2_img = BuildImage(\r\n        0,\r\n        0,\r\n        plain_text=f\"好感度：{user.impression:.2f}\",\r\n        color=(255, 255, 255, 0),\r\n        font_size=30,\r\n    )\r\n    watermark = BuildImage(\r\n        0,\r\n        0,\r\n        plain_text=f\"{NICKNAME}@{datetime.now().year}\",\r\n        color=(255, 255, 255, 0),\r\n        font_size=15,\r\n        font_color=(155, 155, 155),\r\n    )\r\n    today_data = BuildImage(300, 300, color=(255, 255, 255, 0), font_size=20)\r\n    if is_card_view:\r\n        today_sign_text_img = BuildImage(\r\n            0, 0, plain_text=\"\", color=(255, 255, 255, 0), font_size=30\r\n        )\r\n        if impression_list:\r\n            impression_list.sort(reverse=True)\r\n            index = impression_list.index(user.impression)\r\n            rank_img = BuildImage(\r\n                0,\r\n                0,\r\n                plain_text=f\"* 此群好感排名第 {index + 1} 位\",\r\n                color=(255, 255, 255, 0),\r\n                font_size=30,\r\n            )\r\n            A.paste(rank_img, ((A.w - rank_img.w - 10), 20), True)\r\n        today_data.text(\r\n            (0, 0),\r\n            f\"上次签到日期：{'从未' if user.checkin_time_last == datetime.min else user.checkin_time_last.date()}\",\r\n        )\r\n        today_data.text((0, 25), f\"总金币：{gold}\")\r\n        default_setu_prob = (\r\n            Config.get_config(\"send_setu\", \"INITIAL_SETU_PROBABILITY\") * 100\r\n        )\r\n        today_data.text(\r\n            (0, 50),\r\n            f\"色图概率：{(default_setu_prob + user.impression if user.impression < 100 else 100):.2f}%\",\r\n        )\r\n        today_data.text((0, 75), f\"开箱次数：{(20 + int(user.impression / 3))}\")\r\n        _type = \"view\"\r\n    else:\r\n        A.paste(gift_border, (570, 140), True)\r\n        today_sign_text_img = BuildImage(\r\n            0, 0, plain_text=\"今日签到\", color=(255, 255, 255, 0), font_size=30\r\n        )\r\n        if is_double:\r\n            today_data.text((0, 0), f\"好感度 + {impression / 2:.2f} × 2\")\r\n        else:\r\n            today_data.text((0, 0), f\"好感度 + {impression:.2f}\")\r\n        today_data.text((0, 25), f\"金币 + {gold}\")\r\n        _type = \"sign\"\r\n    current_date = datetime.now()\r\n    current_datetime_str = current_date.strftime(\"%Y-%m-%d %a %H:%M:%S\")\r\n    data = current_date.date()\r\n    data_img = BuildImage(\r\n        0,\r\n        0,\r\n        plain_text=f\"时间：{current_datetime_str}\",\r\n        color=(255, 255, 255, 0),\r\n        font_size=20,\r\n    )\r\n    bk.paste(nickname_img, (30, 15), True)\r\n    bk.paste(uid_img, (30, 85), True)\r\n    bk.paste(A, (0, 150), alpha=True)\r\n    bk.text((30, 167), \"Accumulative check-in for\")\r\n    _x = bk.getsize(\"Accumulative check-in for\")[0] + sign_day_img.w + 45\r\n    bk.paste(sign_day_img, (346, 158), True)\r\n    bk.text((_x, 167), \"days\")\r\n    bk.paste(data_img, (220, 370), True)\r\n    bk.paste(lik_text1_img, (220, 240), True)\r\n    bk.paste(lik_text2_img, (262, 234), True)\r\n    bk.paste(bar_bk, (225, 275), True)\r\n    bk.paste(info_img, (220, 305), True)\r\n    bk.paste(today_sign_text_img, (550, 180), True)\r\n    bk.paste(today_data, (580, 220), True)\r\n    bk.paste(watermark, (15, 400), True)\r\n    bk.save(SIGN_TODAY_CARD_PATH / f\"{user_id}_{user.group_id}_{_type}_{data}.png\")\r\n    return image(f\"{user_id}_{user.group_id}_{_type}_{data}.png\", \"sign/today_card\")\r\n\r\n\r\ndef generate_progress_bar_pic():\r\n    bg_2 = (254, 1, 254)\r\n    bg_1 = (0, 245, 246)\r\n\r\n    bk = BuildImage(1000, 50, is_alpha=True)\r\n    img_x = BuildImage(50, 50, color=bg_2)\r\n    img_x.circle()\r\n    img_x.crop((25, 0, 50, 50))\r\n    img_y = BuildImage(50, 50, color=bg_1)\r\n    img_y.circle()\r\n    img_y.crop((0, 0, 25, 50))\r\n    A = BuildImage(950, 50)\r\n    width, height = A.size\r\n\r\n    step_r = (bg_2[0] - bg_1[0]) / width\r\n    step_g = (bg_2[1] - bg_1[1]) / width\r\n    step_b = (bg_2[2] - bg_1[2]) / width\r\n\r\n    for y in range(0, width):\r\n        bg_r = round(bg_1[0] + step_r * y)\r\n        bg_g = round(bg_1[1] + step_g * y)\r\n        bg_b = round(bg_1[2] + step_b * y)\r\n        for x in range(0, height):\r\n            A.point((y, x), fill=(bg_r, bg_g, bg_b))\r\n    bk.paste(img_y, (0, 0), True)\r\n    bk.paste(A, (25, 0))\r\n    bk.paste(img_x, (975, 0), True)\r\n    bk.save(SIGN_RESOURCE_PATH / \"bar.png\")\r\n\r\n    A = BuildImage(950, 50)\r\n    bk = BuildImage(1000, 50, is_alpha=True)\r\n    img_x = BuildImage(50, 50)\r\n    img_x.circle()\r\n    img_x.crop((25, 0, 50, 50))\r\n    img_y = BuildImage(50, 50)\r\n    img_y.circle()\r\n    img_y.crop((0, 0, 25, 50))\r\n    bk.paste(img_y, (0, 0), True)\r\n    bk.paste(A, (25, 0))\r\n    bk.paste(img_x, (975, 0), True)\r\n    bk.save(SIGN_RESOURCE_PATH / \"bar_white.png\")\r\n\r\n\r\ndef get_level_and_next_impression(impression: float):\r\n    if impression == 0:\r\n        return lik2level[10], 10, 0\r\n    keys = list(lik2level.keys())\r\n    for i in range(len(keys)):\r\n        if impression > keys[i]:\r\n            return lik2level[keys[i]], keys[i - 1], keys[i]\r\n    return lik2level[10], 10, 0\r\n\r\n\r\ndef clear_sign_data_pic():\r\n    date = datetime.now().date()\r\n    for file in os.listdir(SIGN_TODAY_CARD_PATH):\r\n        if str(date) not in file:\r\n            os.remove(SIGN_TODAY_CARD_PATH / file)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/sign_in/utils.py b/plugins/sign_in/utils.py
--- a/plugins/sign_in/utils.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/sign_in/utils.py	(date 1663665690883)
@@ -24,8 +24,6 @@
 import asyncio
 import random
 import nonebot
-import time
-import locale
 import os
 
 
Index: plugins/pix_gallery/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/pix_gallery/__init__.py b/plugins/pix_gallery/__init__.py
new file mode 100755
--- /dev/null	(date 1663666722556)
+++ b/plugins/pix_gallery/__init__.py	(date 1663666722556)
@@ -0,0 +1,68 @@
+from configs.config import Config
+from utils.manager import GDict
+import nonebot
+
+
+Config.add_plugin_config(
+    "hibiapi",
+    "HIBIAPI",
+    "https://api.obfs.dev",
+    help_="如果没有自建或其他hibiapi请不要修改",
+    default_value="https://api.obfs.dev",
+)
+Config.add_plugin_config(
+    "pixiv",
+    "PIXIV_NGINX_URL",
+    "i.pixiv.re",
+    help_="Pixiv反向代理"
+)
+Config.add_plugin_config(
+    "pix",
+    "PIX_IMAGE_SIZE",
+    "master",
+    name="PIX图库",
+    help_="PIX图库下载的画质 可能的值：original：原图，master：缩略图（加快发送速度）",
+    default_value="master"
+)
+Config.add_plugin_config(
+    "pix",
+    "SEARCH_HIBIAPI_BOOKMARKS",
+    5000,
+    help_="最低收藏，PIX使用HIBIAPI搜索图片时达到最低收藏才会添加至图库",
+    default_value=5000
+)
+Config.add_plugin_config(
+    "pix",
+    "WITHDRAW_PIX_MESSAGE",
+    (0, 1),
+    help_="自动撤回，参1：延迟撤回色图时间(秒)，0 为关闭 | 参2：监控聊天类型，0(私聊) 1(群聊) 2(群聊+私聊)",
+    default_value=(0, 1)
+)
+Config.add_plugin_config(
+    "pix",
+    "PIX_OMEGA_PIXIV_RATIO",
+    (10, 0),
+    help_="PIX图库 与 额外图库OmegaPixivIllusts 混合搜索的比例 参1：PIX图库 参2：OmegaPixivIllusts扩展图库（没有此图库请设置为0）",
+    default_value=(10, 0)
+)
+Config.add_plugin_config(
+    "pix",
+    "TIMEOUT",
+    10,
+    help_="下载图片超时限制（秒）",
+    default_value=10
+)
+
+Config.add_plugin_config(
+    "pix",
+    "SHOW_INFO",
+    True,
+    help_="是否显示图片的基本信息，如PID等",
+    default_value=True
+)
+
+GDict['run_sql'].append("ALTER TABLE omega_pixiv_illusts ADD classified Integer;")
+
+nonebot.load_plugins("plugins/pix_gallery")
+
+
Index: plugins/pix_gallery/_model/omega_pixiv_illusts.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/pix_gallery/_model/omega_pixiv_illusts.py b/plugins/pix_gallery/_model/omega_pixiv_illusts.py
new file mode 100644
--- /dev/null	(date 1663666724604)
+++ b/plugins/pix_gallery/_model/omega_pixiv_illusts.py	(date 1663666724604)
@@ -0,0 +1,149 @@
+from typing import Optional, List, Tuple
+from services.db_context import db
+
+
+class OmegaPixivIllusts(db.Model):
+    __tablename__ = "omega_pixiv_illusts"
+    __table_args__ = {'extend_existing': True}
+
+    id = db.Column(db.Integer(), primary_key=True)
+    pid = db.Column(db.BigInteger(), nullable=False)
+    uid = db.Column(db.BigInteger(), nullable=False)
+    title = db.Column(db.String(), nullable=False)
+    uname = db.Column(db.String(), nullable=False)
+    classified = db.Column(db.Integer(), nullable=False)
+    nsfw_tag = db.Column(db.Integer(), nullable=False)
+    width = db.Column(db.Integer(), nullable=False)
+    height = db.Column(db.Integer(), nullable=False)
+    tags = db.Column(db.String(), nullable=False)
+    url = db.Column(db.String(), nullable=False)
+
+    _idx1 = db.Index("omega_pixiv_illusts_idx1", "pid", "url", unique=True)
+
+    @classmethod
+    async def add_image_data(
+            cls,
+            pid: int,
+            title: str,
+            width: int,
+            height: int,
+            url: str,
+            uid: int,
+            uname: str,
+            classified: int,
+            nsfw_tag: int,
+            tags: str,
+    ):
+        """
+        说明:
+            添加图片信息
+        参数:
+            :param pid: pid
+            :param title: 标题
+            :param width: 宽度
+            :param height: 长度
+            :param url: url链接
+            :param uid: 作者uid
+            :param uname: 作者名称
+            :param classified: 标记标签, 0=未标记, 1=已人工标记或从可信已标记来源获取
+            :param nsfw_tag: nsfw标签,-1=未标记, 0=safe, 1=setu. 2=r18
+            :param tags: 相关tag
+        """
+        if not await cls.check_exists(pid):
+            await cls.create(
+                pid=pid,
+                title=title,
+                width=width,
+                height=height,
+                url=url,
+                uid=uid,
+                uname=uname,
+                classified=classified,
+                nsfw_tag=nsfw_tag,
+                tags=tags,
+            )
+            return True
+        return False
+
+    @classmethod
+    async def query_images(
+            cls,
+            keywords: Optional[List[str]] = None,
+            uid: Optional[int] = None,
+            pid: Optional[int] = None,
+            nsfw_tag: Optional[int] = 0,
+            num: int = 100
+    ) -> List[Optional["OmegaPixivIllusts"]]:
+        """
+        说明:
+            查找符合条件的图片
+        参数:
+            :param keywords: 关键词
+            :param uid: 画师uid
+            :param pid: 图片pid
+            :param nsfw_tag: nsfw标签, 0=safe, 1=setu. 2=r18
+            :param num: 获取图片数量
+        """
+        if nsfw_tag is not None:
+            query = cls.query.where(cls.nsfw_tag == nsfw_tag)
+        else:
+            query = cls.query
+        if keywords:
+            for keyword in keywords:
+                query = query.where(cls.tags.contains(keyword))
+        elif uid:
+            query = query.where(cls.uid == uid)
+        elif pid:
+            query = query.where(cls.uid == pid)
+        query = query.order_by(db.func.random()).limit(num)
+        return await query.gino.all()
+
+    @classmethod
+    async def check_exists(cls, pid: int) -> bool:
+        """
+        说明:
+            检测pid是否已存在
+        参数:
+            :param pid: 图片PID
+        """
+        query = await cls.query.where(cls.pid == pid).gino.all()
+        return bool(query)
+
+    @classmethod
+    async def get_keyword_num(cls, tags: List[str] = None) -> Tuple[int, int, int]:
+        """
+        说明:
+            获取相关关键词(keyword, tag)在图库中的数量
+        参数:
+            :param tags: 关键词/Tag
+        """
+        setattr(OmegaPixivIllusts, 'count', db.func.count(cls.pid).label('count'))
+        query = cls.select('count')
+        if tags:
+            for tag in tags:
+                query = query.where(cls.tags.contains(tag))
+        count = await query.where(cls.nsfw_tag == 0).gino.first()
+        setu_count = await query.where(cls.nsfw_tag == 1).gino.first()
+        r18_count = await query.where(cls.nsfw_tag == 2).gino.first()
+        return count[0], setu_count[0], r18_count[0]
+
+    @classmethod
+    async def get_all_pid(cls) -> List[int]:
+        """
+        说明:
+            获取所有图片PID
+        """
+        data = await cls.select('pid').gino.all()
+        return [x[0] for x in data]
+
+    # async def test(cls, nsfw_tag: int = 1):
+    #     if nsfw_tag is not None:
+    #         query = cls.query.where(cls.nsfw_tag == nsfw_tag)
+    #     else:
+    #         query = cls.query
+    #     query = query.where((cls.width - cls.height) < 50)
+    #     for x in await query.gino.all():
+    #         print(x.pid)
+
+
+
Index: plugins/sign_in/group_user_checkin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import datetime, timedelta\r\nfrom models.sign_group_user import SignGroupUser\r\nfrom models.group_member_info import GroupInfoUser\r\nfrom models.bag_user import BagUser\r\nfrom configs.config import NICKNAME\r\nfrom nonebot.adapters.onebot.v11 import MessageSegment\r\nfrom utils.image_utils import BuildImage, BuildMat\r\nfrom services.db_context import db\r\nfrom .utils import get_card, SIGN_TODAY_CARD_PATH\r\nfrom typing import Optional\r\nfrom services.log import logger\r\nfrom .random_event import random_event\r\nfrom utils.data_utils import init_rank\r\nfrom utils.utils import get_user_avatar\r\nfrom io import BytesIO\r\nimport random\r\nimport math\r\nimport asyncio\r\nimport secrets\r\nimport os\r\n\r\n\r\nasync def group_user_check_in(\r\n    nickname: str, user_qq: int, group: int\r\n) -> MessageSegment:\r\n    \"Returns string describing the result of checking in\"\r\n    present = datetime.now()\r\n    async with db.transaction():\r\n        # 取得相应用户\r\n        user = await SignGroupUser.ensure(user_qq, group, for_update=True)\r\n        # 如果同一天签到过，特殊处理\r\n        if (\r\n            user.checkin_time_last + timedelta(hours=8)\r\n        ).date() >= present.date() or f\"{user}_{group}_sign_{datetime.now().date()}\" in os.listdir(\r\n            SIGN_TODAY_CARD_PATH\r\n        ):\r\n            gold = await BagUser.get_gold(user_qq, group)\r\n            return await get_card(user, nickname, -1, gold, \"\")\r\n        return await _handle_check_in(nickname, user_qq, group, present)  # ok\r\n\r\n\r\nasync def check_in_all(nickname: str, user_qq: int):\r\n    \"\"\"\r\n    说明:\r\n        签到所有群\r\n    参数:\r\n        :param nickname: 昵称\r\n        :param user_qq: 用户qq\r\n    \"\"\"\r\n    async with db.transaction():\r\n        present = datetime.now()\r\n        for u in await SignGroupUser.get_user_all_data(user_qq):\r\n            group = u.group_id\r\n            if not ((\r\n                u.checkin_time_last + timedelta(hours=8)\r\n            ).date() >= present.date() or f\"{u}_{group}_sign_{datetime.now().date()}\" in os.listdir(\r\n                SIGN_TODAY_CARD_PATH\r\n            )):\r\n                await _handle_check_in(nickname, user_qq, group, present)\r\n\r\n\r\nasync def _handle_check_in(\r\n    nickname: str, user_qq: int, group: int, present: datetime\r\n) -> MessageSegment:\r\n    user = await SignGroupUser.ensure(user_qq, group, for_update=True)\r\n    impression_added = (secrets.randbelow(99)+1)/100\r\n    critx2 = random.random()\r\n    add_probability = user.add_probability\r\n    specify_probability = user.specify_probability\r\n    if critx2 + add_probability > 0.97:\r\n        impression_added *= 2\r\n    elif critx2 < specify_probability:\r\n        impression_added *= 2\r\n    await SignGroupUser.sign(user, impression_added, present)\r\n    gold = random.randint(1, 100)\r\n    gift, gift_type = random_event(user.impression)\r\n    if gift_type == \"gold\":\r\n        await BagUser.add_gold(user_qq, group, gold + gift)\r\n        gift = f\"额外金币 + {gift}\"\r\n    else:\r\n        await BagUser.add_gold(user_qq, group, gold)\r\n        await BagUser.add_property(user_qq, group, gift)\r\n        gift += ' + 1'\r\n    if critx2 + add_probability > 0.97 or critx2 < specify_probability:\r\n        logger.info(\r\n            f\"(USER {user.user_qq}, GROUP {user.group_id})\"\r\n            f\" CHECKED IN successfully. score: {user.impression:.2f} \"\r\n            f\"(+{impression_added * 2:.2f}).获取金币：{gold + gift if gift == 'gold' else gold}\"\r\n        )\r\n        return await get_card(user, nickname, impression_added, gold, gift, True)\r\n    else:\r\n        logger.info(\r\n            f\"(USER {user.user_qq}, GROUP {user.group_id})\"\r\n            f\" CHECKED IN successfully. score: {user.impression:.2f} \"\r\n            f\"(+{impression_added:.2f}).获取金币：{gold + gift if gift == 'gold' else gold}\"\r\n        )\r\n        return await get_card(user, nickname, impression_added, gold, gift)\r\n\r\n\r\nasync def group_user_check(nickname: str, user_qq: int, group: int) -> MessageSegment:\r\n    # heuristic: if users find they have never checked in they are probable to check in\r\n    user = await SignGroupUser.ensure(user_qq, group)\r\n    gold = await BagUser.get_gold(user_qq, group)\r\n    return await get_card(user, nickname, None, gold, \"\", is_card_view=True)\r\n\r\n\r\nasync def group_impression_rank(group: int, num: int) -> Optional[BuildMat]:\r\n    user_qq_list, impression_list, _ = await SignGroupUser.get_all_impression(group)\r\n    return await init_rank(\"好感度排行榜\", user_qq_list, impression_list, group, num)\r\n\r\n\r\nasync def random_gold(user_id, group_id, impression):\r\n    if impression < 1:\r\n        impression = 1\r\n    gold = random.randint(1, 100) + random.randint(1, int(impression))\r\n    if await BagUser.add_gold(user_id, group_id, gold):\r\n        return gold\r\n    else:\r\n        return 0\r\n\r\n\r\n# 签到总榜\r\nasync def impression_rank(group_id: int, data: dict):\r\n    user_qq_list, impression_list, group_list = await SignGroupUser.get_all_impression(\r\n        group_id\r\n    )\r\n    users, impressions, groups = [], [], []\r\n    num = 0\r\n    for i in range(105 if len(user_qq_list) > 105 else len(user_qq_list)):\r\n        impression = max(impression_list)\r\n        index = impression_list.index(impression)\r\n        user = user_qq_list[index]\r\n        group = group_list[index]\r\n        user_qq_list.pop(index)\r\n        impression_list.pop(index)\r\n        group_list.pop(index)\r\n        if user not in users and impression < 100000:\r\n            if user not in data[\"0\"]:\r\n                users.append(user)\r\n                impressions.append(impression)\r\n                groups.append(group)\r\n            else:\r\n                num += 1\r\n    for i in range(num):\r\n        impression = max(impression_list)\r\n        index = impression_list.index(impression)\r\n        user = user_qq_list[index]\r\n        group = group_list[index]\r\n        user_qq_list.pop(index)\r\n        impression_list.pop(index)\r\n        group_list.pop(index)\r\n        if user not in users and impression < 100000:\r\n            users.append(user)\r\n            impressions.append(impression)\r\n            groups.append(group)\r\n    return (await asyncio.gather(*[_pst(users, impressions, groups)]))[0]\r\n\r\n\r\nasync def _pst(users: list, impressions: list, groups: list):\r\n    lens = len(users)\r\n    count = math.ceil(lens / 33)\r\n    width = 10\r\n    idx = 0\r\n    A = BuildImage(1740, 3300, color=\"#FFE4C4\")\r\n    for _ in range(count):\r\n        col_img = BuildImage(550, 3300, 550, 100, color=\"#FFE4C4\")\r\n        for _ in range(33 if int(lens / 33) >= 1 else lens % 33 - 1):\r\n            idx += 1\r\n            if idx > 100:\r\n                break\r\n            impression = max(impressions)\r\n            index = impressions.index(impression)\r\n            user = users[index]\r\n            group = groups[index]\r\n            impressions.pop(index)\r\n            users.pop(index)\r\n            groups.pop(index)\r\n            try:\r\n                user_name = (\r\n                    await GroupInfoUser.get_member_info(user, group)\r\n                ).user_name\r\n            except AttributeError:\r\n                user_name = f\"我名字呢？\"\r\n            user_name = user_name if len(user_name) < 11 else user_name[:10] + \"...\"\r\n            ava = await get_user_avatar(user)\r\n            if ava:\r\n                ava = BuildImage(\r\n                    50, 50, background=BytesIO(ava)\r\n                )\r\n            else:\r\n                ava = BuildImage(50, 50, color=\"white\")\r\n            ava.circle()\r\n            bk = BuildImage(550, 100, color=\"#FFE4C4\", font_size=30)\r\n            font_w, font_h = bk.getsize(f\"{idx}\")\r\n            bk.text((5, int((100 - font_h) / 2)), f\"{idx}.\")\r\n            bk.paste(ava, (55, int((100 - 50) / 2)), True)\r\n            bk.text((120, int((100 - font_h) / 2)), f\"{user_name}\")\r\n            bk.text((460, int((100 - font_h) / 2)), f\"[{impression:.2f}]\")\r\n            col_img.paste(bk)\r\n        A.paste(col_img, (width, 0))\r\n        lens -= 33\r\n        width += 580\r\n    W = BuildImage(1740, 3700, color=\"#FFE4C4\", font_size=130)\r\n    W.paste(A, (0, 260))\r\n    font_w, font_h = W.getsize(f\"{NICKNAME}的好感度总榜\")\r\n    W.text((int((1740 - font_w) / 2), int((260 - font_h) / 2)), f\"{NICKNAME}的好感度总榜\")\r\n    return W.pic2bs4()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/sign_in/group_user_checkin.py b/plugins/sign_in/group_user_checkin.py
--- a/plugins/sign_in/group_user_checkin.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/sign_in/group_user_checkin.py	(date 1663665690883)
@@ -81,19 +81,15 @@
         await BagUser.add_gold(user_qq, group, gold)
         await BagUser.add_property(user_qq, group, gift)
         gift += ' + 1'
-    if critx2 + add_probability > 0.97 or critx2 < specify_probability:
-        logger.info(
-            f"(USER {user.user_qq}, GROUP {user.group_id})"
-            f" CHECKED IN successfully. score: {user.impression:.2f} "
-            f"(+{impression_added * 2:.2f}).获取金币：{gold + gift if gift == 'gold' else gold}"
-        )
+
+    logger.info(
+        f"(USER {user.user_qq}, GROUP {user.group_id})"
+        f" CHECKED IN successfully. score: {user.impression:.2f} "
+        f"(+{impression_added:.2f}).获取金币：{gold + gift if gift == 'gold' else gold}"
+    )
+    if critx2 + add_probability > 0.97 or critx2 < specify_probability:
         return await get_card(user, nickname, impression_added, gold, gift, True)
     else:
-        logger.info(
-            f"(USER {user.user_qq}, GROUP {user.group_id})"
-            f" CHECKED IN successfully. score: {user.impression:.2f} "
-            f"(+{impression_added:.2f}).获取金币：{gold + gift if gift == 'gold' else gold}"
-        )
         return await get_card(user, nickname, impression_added, gold, gift)
 
 
Index: configs/utils/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Optional, Any, Union\nfrom pathlib import Path\nfrom ruamel.yaml import YAML\nfrom ruamel import yaml\nfrom ruamel.yaml.scanner import ScannerError\n\n\nclass ConfigsManager:\n    \"\"\"\n    插件配置 与 资源 管理器\n    \"\"\"\n\n    def __init__(self, file: Path):\n        self._data: dict = {}\n        self._simple_data: dict = {}\n        self._admin_level_data = []\n        self._simple_file = Path() / \"configs\" / \"config.yaml\"\n        if file:\n            file.parent.mkdir(exist_ok=True, parents=True)\n            self.file = file\n            _yaml = YAML()\n            if file.exists():\n                with open(file, \"r\", encoding=\"utf8\") as f:\n                    self._data = _yaml.load(f)\n                if not self._data:\n                    self.file.unlink()\n                    raise ValueError(\n                        \"配置文件为空！\\n\"\n                        \"***********************************************************\\n\"\n                        \"****** 配置文件 plugins2config.yaml 为空，已删除，请重启 ******\\n\"\n                        \"***********************************************************\"\n                    )\n            if self._simple_file.exists():\n                try:\n                    with open(self._simple_file, \"r\", encoding=\"utf8\") as f:\n                        self._simple_data = _yaml.load(f)\n                except ScannerError as e:\n                    raise ScannerError(\n                        f\"{e}\\n**********************************************\\n\"\n                        f\"****** 可能为config.yaml配置文件填写不规范 ******\\n\"\n                        f\"**********************************************\"\n                    )\n\n    def add_plugin_config(\n        self,\n        module: str,\n        key: str,\n        value: Optional[Any],\n        *,\n        name: Optional[str] = None,\n        help_: Optional[str] = None,\n        default_value: Optional[str] = None,\n        _override: bool = False,\n    ):\n        \"\"\"\n        为插件添加一个配置，不会被覆盖，只有第一个生效\n        :param module: 模块\n        :param key: 键\n        :param value: 值\n        :param name: 插件名称\n        :param help_: 配置注解\n        :param default_value: 默认值\n        :param _override: 覆盖前值\n        \"\"\"\n        if (\n            not (module in self._data.keys() and self._data[module].get(key))\n            or _override\n        ):\n            _module = None\n            if \":\" in module:\n                module = module.split(\":\")\n                _module = module[-1]\n                module = module[0]\n            if \"[LEVEL]\" in key and _module:\n                key = key.replace(\"[LEVEL]\", \"\").strip()\n                self._admin_level_data.append((_module, value))\n            if self._data.get(module) is None:\n                self._data[module] = {}\n            key = key.upper()\n            self._data[module][key] = {\n                \"value\": value,\n                \"name\": name.strip() if isinstance(name, str) else name,\n                \"help\": help_.strip() if isinstance(help_, str) else help_,\n                \"default_value\": default_value,\n                \"level_module\": _module,\n            }\n\n    def remove_plugin_config(self, module: str):\n        \"\"\"\n        为插件删除一个配置\n        :param module: 模块名\n        \"\"\"\n        if module in self._data.keys():\n            del self._data[module]\n        self.save()\n\n    def set_config(self, module: str, key: str, value:  Any , save_simple_data: bool = False):\n        \"\"\"\n        设置配置值\n        :param module: 模块名\n        :param key: 配置名称\n        :param value: 值\n        :param save_simple_data: 同时保存至config.yaml\n        \"\"\"\n        if module in self._data.keys():\n            if (\n                self._data[module].get(key) is not None\n                and self._data[module][key] != value\n            ):\n                self._data[module][key][\"value\"] = value\n                self._simple_data[module][key] = value\n                self.save(save_simple_data = save_simple_data)\n\n    def set_help(self, module: str, key: str, help_: str):\n        \"\"\"\n        设置配置注释\n        :param module: 模块名\n        :param key: 配置名称\n        :param help_: 注释文本\n        \"\"\"\n        if module in self._data.keys():\n            if self._data[module].get(key) is not None:\n                self._data[module][key][\"help\"] = help_\n                self.save()\n\n    def set_default_value(self, module: str, key: str, value:  Any):\n        \"\"\"\n        设置配置默认值\n        :param module: 模块名\n        :param key: 配置名称\n        :param value: 值\n        \"\"\"\n        if module in self._data.keys():\n            if self._data[module].get(key) is not None:\n                self._data[module][key][\"default_value\"] = value\n                self.save()\n\n    def get_config(\n        self, module: str, key: str, default: Optional[Any] = None\n    ) -> Optional[Any]:\n        \"\"\"\n        获取指定配置值\n        :param module: 模块名\n        :param key: 配置名称\n        :param default: 没有key值内容的默认返回值\n        \"\"\"\n        key = key.upper()\n        if module in self._data.keys():\n            for key in [key, f\"{key} [LEVEL]\"]:\n                if self._data[module].get(key) is not None:\n                    if self._data[module][key][\"value\"] is None:\n                        return self._data[module][key][\"default_value\"]\n                    return self._data[module][key][\"value\"]\n        if default is not None:\n            return default\n        return None\n\n    def get_level2module(self, module: str, key: str) -> Optional[str]:\n        \"\"\"\n        获取指定key所绑定的module，一般为权限等级\n        :param module: 模块名\n        :param key: 配置名称\n        :return:\n        \"\"\"\n        if self._data.get(module) is not None:\n            if self._data[module].get(key) is not None:\n                return self._data[module][key].get(\"level_module\")\n\n    def get(self, key: str):\n        \"\"\"\n        获取插件配置数据\n        :param key: 名称\n        \"\"\"\n        if key in self._data.keys():\n            return self._data[key]\n\n    def save(self, path: Union[str, Path] = None, save_simple_data: bool = False):\n        \"\"\"\n        保存数据\n        :param path: 路径\n        :param save_simple_data: 同时保存至config.yaml\n        \"\"\"\n        if save_simple_data:\n            with open(self._simple_file, \"w\", encoding=\"utf8\") as f:\n                yaml.dump(\n                    self._simple_data,\n                    f,\n                    indent=2,\n                    Dumper=yaml.RoundTripDumper,\n                    allow_unicode=True,\n                )\n        path = path if path else self.file\n        with open(path, \"w\", encoding=\"utf8\") as f:\n            yaml.dump(\n                self._data, f, indent=2, Dumper=yaml.RoundTripDumper, allow_unicode=True\n            )\n\n    def reload(self):\n        \"\"\"\n        重新加载配置文件\n        \"\"\"\n        _yaml = YAML()\n        temp_file = Path() / \"configs\" / \"config.yaml\"\n        if temp_file.exists():\n            with open(temp_file, \"r\", encoding=\"utf8\") as f:\n                temp = _yaml.load(f)\n        for key in temp.keys():\n            for k in temp[key].keys():\n                self._data[key][k][\"value\"] = temp[key][k]\n        self.save()\n\n    def get_admin_level_data(self):\n        \"\"\"\n        获取管理插件等级\n        \"\"\"\n        return self._admin_level_data\n\n    def is_empty(self) -> bool:\n        return not bool(self._data)\n\n    def keys(self):\n        return self._data.keys()\n\n    def __str__(self):\n        return str(self._data)\n\n    def __setitem__(self, key, value):\n        self._data[key] = value\n\n    def __getitem__(self, key):\n        return self._data[key]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/configs/utils/__init__.py b/configs/utils/__init__.py
--- a/configs/utils/__init__.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/configs/utils/__init__.py	(date 1663665690883)
@@ -94,13 +94,14 @@
             del self._data[module]
         self.save()
 
-    def set_config(self, module: str, key: str, value:  Any , save_simple_data: bool = False):
+    def set_config(self, module: str, key: str, value: Any, auto_save: bool = False, save_simple_data: bool = True):
         """
         设置配置值
         :param module: 模块名
         :param key: 配置名称
         :param value: 值
-        :param save_simple_data: 同时保存至config.yaml
+        :param auto_save: 自动保存
+        :param save_simple_data: 保存至config.yaml
         """
         if module in self._data.keys():
             if (
@@ -109,7 +110,8 @@
             ):
                 self._data[module][key]["value"] = value
                 self._simple_data[module][key] = value
-                self.save(save_simple_data = save_simple_data)
+            if auto_save:
+                self.save(save_simple_data=save_simple_data)
 
     def set_help(self, module: str, key: str, help_: str):
         """
@@ -200,13 +202,12 @@
         重新加载配置文件
         """
         _yaml = YAML()
-        temp_file = Path() / "configs" / "config.yaml"
-        if temp_file.exists():
-            with open(temp_file, "r", encoding="utf8") as f:
-                temp = _yaml.load(f)
-        for key in temp.keys():
-            for k in temp[key].keys():
-                self._data[key][k]["value"] = temp[key][k]
+        if self._simple_file.exists():
+            with open(self._simple_file, "r", encoding="utf8") as f:
+                self._simple_data = _yaml.load(f)
+        for key in self._simple_data.keys():
+            for k in self._simple_data[key].keys():
+                self._data[key][k]["value"] = self._simple_data[key][k]
         self.save()
 
     def get_admin_level_data(self):
Index: basic_plugins/admin_bot_manage/custom_welcome_message.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from nonebot import on_command\r\nfrom utils.utils import get_message_img\r\nfrom nonebot.adapters.onebot.v11 import GroupMessageEvent, Message\r\nfrom nonebot.params import CommandArg\r\nfrom ._data_source import custom_group_welcome\r\nfrom nonebot.adapters.onebot.v11.permission import GROUP\r\nfrom configs.config import Config\r\nfrom services.log import logger\r\n\r\n\r\n__zx_plugin_name__ = \"自定义进群欢迎消息 [Admin]\"\r\n__plugin_usage__ = \"\"\"\r\nusage：\r\n    指令：\r\n        自定义进群欢迎消息 ?[文本] ?[图片]\r\n        示例：自定义进群欢迎消息 欢迎新人！[图片]\r\n        Note：可以通过[at]来确认是否艾特新成员\r\n        示例：自定义进群欢迎消息 欢迎你[at]\r\n\"\"\".strip()\r\n__plugin_des__ = '简易的自定义群欢迎消息'\r\n__plugin_cmd__ = ['自定义群欢迎消息 ?[文本] ?[图片]']\r\n__plugin_version__ = 0.1\r\n__plugin_author__ = 'HibiKier'\r\n__plugin_settings__ = {\r\n    \"admin_level\": Config.get_config(\"admin_bot_manage\", \"SET_GROUP_WELCOME_MESSAGE_LEVEL\"),\r\n}\r\n\r\ncustom_welcome = on_command(\r\n    \"自定义进群欢迎消息\",\r\n    aliases={\"自定义欢迎消息\", \"自定义群欢迎消息\", \"设置群欢迎消息\"},\r\n    permission=GROUP,\r\n    priority=5,\r\n    block=True,\r\n)\r\n\r\n\r\n@custom_welcome.handle()\r\nasync def _(event: GroupMessageEvent, arg: Message = CommandArg()):\r\n    try:\r\n        msg = arg.extract_plain_text().strip()\r\n        img = get_message_img(event.json())\r\n        if not msg and not img:\r\n            await custom_welcome.finish(__plugin_usage__)\r\n        await custom_welcome.send(\r\n            await custom_group_welcome(msg, img, event.user_id, event.group_id),\r\n            at_sender=True,\r\n        )\r\n        logger.info(f\"USER {event.user_id} GROUP {event.group_id} 自定义群欢迎消息：{msg}\")\r\n    except Exception as e:\r\n        logger.error(f\"自定义进群欢迎消息发生错误 {type(e)}：{e}\")\r\n        await custom_welcome.send(\"发生了一些未知错误...\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic_plugins/admin_bot_manage/custom_welcome_message.py b/basic_plugins/admin_bot_manage/custom_welcome_message.py
--- a/basic_plugins/admin_bot_manage/custom_welcome_message.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/basic_plugins/admin_bot_manage/custom_welcome_message.py	(date 1663665690883)
@@ -36,11 +36,11 @@
 
 @custom_welcome.handle()
 async def _(event: GroupMessageEvent, arg: Message = CommandArg()):
-    try:
-        msg = arg.extract_plain_text().strip()
-        img = get_message_img(event.json())
-        if not msg and not img:
-            await custom_welcome.finish(__plugin_usage__)
+    msg = arg.extract_plain_text().strip()
+    img = get_message_img(event.json())
+    if not msg and not img:
+        await custom_welcome.finish(__plugin_usage__)
+    try:
         await custom_welcome.send(
             await custom_group_welcome(msg, img, event.user_id, event.group_id),
             at_sender=True,
Index: plugins/genshin/query_user/_models/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/_models/__init__.py b/plugins/genshin/query_user/_models/__init__.py
new file mode 100644
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_user/_models/__init__.py	(date 1663666724604)
@@ -0,0 +1,484 @@
+from services.db_context import db
+from typing import Optional, Union, List
+from datetime import datetime, timedelta
+import random
+import pytz
+
+
+class Genshin(db.Model):
+    __tablename__ = "genshin"
+
+    id = db.Column(db.Integer(), primary_key=True)
+    user_qq = db.Column(db.BigInteger(), nullable=False)
+    uid = db.Column(db.BigInteger())
+    mys_id = db.Column(db.BigInteger())
+    cookie = db.Column(db.String(), default="")
+    today_query_uid = db.Column(db.String(), default="")  # 该cookie今日查询的uid
+    auto_sign = db.Column(db.Boolean(), default=False)
+    auto_sign_time = db.Column(db.DateTime(timezone=True))
+    resin_remind = db.Column(db.Boolean(), default=False)   # 树脂提醒
+    resin_recovery_time = db.Column(db.DateTime(timezone=True))  # 满树脂提醒日期
+    bind_group = db.Column(db.BigInteger())
+    login_ticket = db.Column(db.String(), default="")
+    stuid = db.Column(db.String(), default="")
+    stoken = db.Column(db.String(), default="")
+
+    _idx1 = db.Index("genshin_uid_idx1", "user_qq", "uid", unique=True)
+
+    @classmethod
+    async def add_uid(cls, user_qq: int, uid: int):
+        """
+        说明:
+            添加一个uid
+        参数:
+            :param user_qq： 用户qq
+            :param uid: 原神uid
+        """
+        query = cls.query.where((cls.user_qq == user_qq) & (cls.uid == uid))
+        user = await query.gino.first()
+        if not user:
+            await cls.create(
+                user_qq=user_qq,
+                uid=uid,
+            )
+            return True
+        return False
+
+    @classmethod
+    async def set_mys_id(cls, uid: int, mys_id: int) -> bool:
+        """
+        说明:
+            设置米游社id
+        参数:
+            :param uid: 原神uid
+            :param mys_id: 米游社id
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user:
+            await user.update(mys_id=mys_id).apply()
+            return True
+        return False
+
+    @classmethod
+    async def set_bind_group(cls, uid: int, bind_group) -> bool:
+        """
+        说明:
+            绑定group_id，除私聊外的提醒将在此群发送
+        参数:
+            :param uid: uid
+            :param bind_group: 群号
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user:
+            await user.update(bind_group=bind_group).apply()
+            return True
+        return False
+
+    @classmethod
+    async def get_bind_group(cls, uid: int) -> Optional[int]:
+        """
+        说明:
+            获取用户绑定的群聊
+        参数:
+            :param uid: uid
+        """
+        user = await cls.query.where(cls.uid == uid).gino.first()
+        if user:
+            return user.bind_group
+        return None
+
+    @classmethod
+    async def set_cookie(cls, uid: int, cookie: str) -> bool:
+        """
+        说明:
+            设置cookie
+        参数:
+            :param uid: 原神uid
+            :param cookie: 米游社id
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user:
+            await user.update(cookie=cookie).apply()
+            return True
+        return False
+
+    @classmethod
+    async def set_resin_remind(cls, uid: int, flag: bool) -> bool:
+        """
+        说明:
+            设置体力提醒
+        参数:
+            :param uid: 原神uid
+            :param flag: 开关状态
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user:
+            await user.update(resin_remind=flag).apply()
+            return True
+        return False
+
+    @classmethod
+    async def set_user_resin_recovery_time(cls, uid: int, date: datetime):
+        """
+        说明:
+            设置体力完成时间
+        参数:
+            :param uid: uid
+            :param date: 提醒日期
+        """
+        u = await cls.query.where(cls.uid == uid).gino.first()
+        if u:
+            await u.update(resin_recovery_time=date).apply()
+
+    @classmethod
+    async def get_user_resin_recovery_time(cls, uid: int) -> Optional[datetime]:
+        """
+        说明:
+            获取体力完成时间
+        参数:
+            :param uid: uid
+        """
+        u = await cls.query.where(cls.uid == uid).gino.first()
+        if u:
+            return u.resin_recovery_time.astimezone(pytz.timezone("Asia/Shanghai"))
+        return None
+
+    @classmethod
+    async def get_all_resin_remind_user(cls) -> List["Genshin"]:
+        """
+        说明:
+            获取所有开启体力提醒的用户
+        """
+        return await cls.query.where(cls.resin_remind == True).gino.all()
+
+    @classmethod
+    async def clear_resin_remind_time(cls, uid: int) -> bool:
+        """
+        说明:
+            清空提醒日期
+        参数:
+            :param uid: uid
+        """
+        user = await cls.query.where(cls.uid == uid).gino.first()
+        if user:
+            await user.update(resin_recovery_time=None).apply()
+            return True
+        return False
+
+    @classmethod
+    async def set_auto_sign(cls, uid: int, flag: bool) -> bool:
+        """
+        说明:
+            设置米游社/原神自动签到
+        参数:
+            :param uid: 原神uid
+            :param flag: 开关状态
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user:
+            await user.update(auto_sign=flag).apply()
+            return True
+        return False
+
+    @classmethod
+    async def get_all_auto_sign_user(cls) -> List["Genshin"]:
+        """
+        说明:
+            获取所有开启自动签到的用户
+        """
+        return await cls.query.where(cls.auto_sign == True).gino.all()
+
+    @classmethod
+    async def get_all_sign_user(cls) -> List["Genshin"]:
+        """
+        说明:
+            获取 原神 所有今日签到用户
+        """
+        return await cls.query.where(cls.auto_sign_time != None).gino.all()
+
+    @classmethod
+    async def clear_sign_time(cls, uid: int) -> bool:
+        """
+        说明:
+            清空签到日期
+        参数:
+            :param uid: uid
+        """
+        user = await cls.query.where(cls.uid == uid).gino.first()
+        if user:
+            await user.update(auto_sign_time=None).apply()
+            return True
+        return False
+
+    @classmethod
+    async def random_sign_time(cls, uid: int) -> Optional[datetime]:
+        """
+        说明:
+            随机签到时间
+        说明:
+            :param uid: uid
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user and user.cookie:
+            if user.auto_sign_time and user.auto_sign_time.astimezone(
+                    pytz.timezone("Asia/Shanghai")
+            ) - timedelta(seconds=2) >= datetime.now(pytz.timezone("Asia/Shanghai")):
+                return user.auto_sign_time.astimezone(pytz.timezone("Asia/Shanghai"))
+            hours = int(str(datetime.now()).split()[1].split(":")[0])
+            minutes = int(str(datetime.now()).split()[1].split(":")[1])
+            date = (
+                    datetime.now()
+                    + timedelta(days=1)
+                    - timedelta(hours=hours)
+                    - timedelta(minutes=minutes - 1)
+            )
+            random_hours = random.randint(0, 22)
+            random_minutes = random.randint(1, 59)
+            date += timedelta(hours=random_hours) + timedelta(minutes=random_minutes)
+            await user.update(auto_sign_time=date).apply()
+            return date
+        return None
+
+    @classmethod
+    async def get_query_cookie(cls, uid: int) -> Optional[str]:
+        """
+        说明:
+            获取查询角色信息cookie
+        参数:
+            :param uid: 原神uid
+        """
+        # 查找用户今日是否已经查找过，防止重复
+        query = cls.query.where(cls.today_query_uid.contains(str(uid)))
+        x = await query.gino.first()
+        if x:
+            await cls._add_query_uid(uid, uid)
+            return x.cookie
+        for u in await cls.query.where(cls.cookie != "").order_by(db.func.random()).gino.all():
+            if not u.today_query_uid or len(u.today_query_uid[:-1].split()) < 30:
+                await cls._add_query_uid(uid, u.uid)
+                return u.cookie
+        return None
+
+    @classmethod
+    async def get_user_cookie(cls, uid: int, flag: bool = False) -> Optional[str]:
+        """
+        说明:
+            获取用户cookie
+        参数:
+            :param uid：原神uid
+            :param flag：必须使用自己的cookie
+        """
+        cookie = await cls._get_user_data(None, uid, "cookie")
+        if not cookie and not flag:
+            cookie = await cls.get_query_cookie(uid)
+        return cookie
+
+    @classmethod
+    async def get_user_by_qq(cls, user_qq: int) -> Optional["Genshin"]:
+        """
+        说明:
+            通过qq获取用户对象
+        参数:
+            :param user_qq: qq
+        """
+        return await cls.query.where(cls.user_qq == user_qq).gino.first()
+
+    @classmethod
+    async def get_user_by_uid(cls, uid: int) -> Optional["Genshin"]:
+        """
+        说明:
+            通过uid获取用户对象
+        参数:
+            :param uid: qq
+        """
+        return await cls.query.where(cls.uid == uid).gino.first()
+
+    @classmethod
+    async def get_user_uid(cls, user_qq: int) -> Optional[int]:
+        """
+        说明:
+            获取用户uid
+        参数:
+            :param user_qq：用户qq
+        """
+        return await cls._get_user_data(user_qq, None, "uid")
+
+    @classmethod
+    async def get_user_mys_id(cls, uid: int) -> Optional[int]:
+        """
+        说嘛：
+            获取用户米游社id
+        参数:
+            :param uid：原神id
+        """
+        return await cls._get_user_data(None, uid, "mys_id")
+
+    @classmethod
+    async def delete_user_cookie(cls, uid: int):
+        """
+        说明:
+            删除用户cookie
+        参数:
+            :param uid: 原神uid
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user:
+            await user.update(cookie="").apply()
+
+    @classmethod
+    async def delete_user(cls, user_qq: int):
+        """
+        说明:
+            删除用户数据
+        参数:
+            :param user_qq： 用户qq
+        """
+        query = cls.query.where(cls.user_qq == user_qq).with_for_update()
+        user = await query.gino.first()
+        if not user:
+            return False
+        await user.delete()
+        return True
+
+    @classmethod
+    async def _add_query_uid(cls, uid: int, cookie_uid: int):
+        """
+        说明:
+            添加每日查询重复uid的cookie
+        参数:
+            :param uid: 原神uid
+            :param cookie_uid: cookie的uid
+        """
+        query = cls.query.where(cls.uid == cookie_uid).with_for_update()
+        user = await query.gino.first()
+        await user.update(today_query_uid=user.today_query_uid + f"{uid} ").apply()
+
+    @classmethod
+    async def _get_user_data(
+            cls, user_qq: Optional[int], uid: Optional[int], type_: str
+    ) -> Optional[Union[int, str]]:
+        """
+        说明:
+            获取用户数据
+        参数:
+            :param user_qq： 用户qq
+            :param uid: uid
+            :param type_: 数据类型
+        """
+        if type_ == "uid":
+            user = await cls.query.where(cls.user_qq == user_qq).gino.first()
+            return user.uid if user else None
+        user = await cls.query.where(cls.uid == uid).gino.first()
+        if not user:
+            return None
+        if type_ == "mys_id":
+            return user.mys_id
+        elif type_ == "cookie":
+            return user.cookie
+        return None
+
+    @classmethod
+    async def reset_today_query_uid(cls):
+        for u in await cls.query.with_for_update().gino.all():
+            if u.today_query_uid:
+                await u.update(today_query_uid="").apply()
+
+    @classmethod
+    async def set_stuid(cls, uid: int, stuid: str) -> bool:
+        """
+        说明:
+            设置stuid
+        参数:
+            :param uid: 原神uid
+            :param stuid: stuid
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user:
+            await user.update(stuid=stuid).apply()
+            return True
+        return False
+
+    @classmethod
+    async def set_stoken(cls, uid: int, stoken: str) -> bool:
+        """
+        说明:
+            设置stoken
+        参数:
+            :param uid: 原神uid
+            :param stoken: stoken
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user:
+            await user.update(stoken=stoken).apply()
+            return True
+        return False
+
+    @classmethod
+    async def set_login_ticket(cls, uid: int, login_ticket: str) -> bool:
+        """
+        说明:
+            设置login_ticket
+        参数:
+            :param uid: 原神uid
+            :param login_ticket: login_ticket
+        """
+        query = cls.query.where(cls.uid == uid).with_for_update()
+        user = await query.gino.first()
+        if user:
+            await user.update(login_ticket=login_ticket).apply()
+            return True
+        return False
+
+    # 获取login_ticket
+    @classmethod
+    async def get_login_ticket(cls, uid: int) -> Optional[str]:
+        """
+        说明:
+            获取login_ticket
+        参数:
+            :param uid: 原神uid
+        """
+        query = cls.query.where(cls.uid == uid)
+        user = await query.gino.first()
+        if user:
+            return user.login_ticket
+        return None
+
+    # 获取stuid
+    @classmethod
+    async def get_stuid(cls, uid: int) -> Optional[str]:
+        """
+        说明:
+            获取stuid
+        参数:
+            :param uid: 原神uid
+        """
+        query = cls.query.where(cls.uid == uid)
+        user = await query.gino.first()
+        if user:
+            return user.stuid
+        return None
+
+    # 获取stoken
+    @classmethod
+    async def get_stoken(cls, uid: int) -> Optional[str]:
+        """
+        说明:
+            获取stoken
+        参数:
+            :param uid: 原神uid
+        """
+        query = cls.query.where(cls.uid == uid)
+        user = await query.gino.first()
+        if user:
+            return user.stoken
+        return None
Index: plugins/genshin/query_user/genshin_sign/init_task.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/genshin_sign/init_task.py b/plugins/genshin/query_user/genshin_sign/init_task.py
new file mode 100644
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_user/genshin_sign/init_task.py	(date 1663666724604)
@@ -0,0 +1,119 @@
+from .data_source import genshin_sign
+from ..mihoyobbs_sign import mihoyobbs_sign
+from models.group_member_info import GroupInfoUser
+from utils.message_builder import at
+from services.log import logger
+from utils.utils import scheduler, get_bot
+from apscheduler.jobstores.base import ConflictingIdError
+from .._models import Genshin
+from datetime import datetime, timedelta
+from nonebot import Driver
+import nonebot
+import random
+import pytz
+
+
+driver: Driver = nonebot.get_driver()
+
+
+@driver.on_startup
+async def _():
+    """
+    启动时分配定时任务
+    """
+    g_list = await Genshin.get_all_auto_sign_user()
+    for u in g_list:
+        if u.auto_sign_time:
+            if date := await Genshin.random_sign_time(u.uid):
+                scheduler.add_job(
+                    _sign,
+                    "date",
+                    run_date=date.replace(microsecond=0),
+                    id=f"genshin_auto_sign_{u.uid}_{u.user_qq}_0",
+                    args=[u.user_qq, u.uid, 0],
+                )
+                logger.info(
+                    f"genshin_sign add_job：USER：{u.user_qq} UID：{u.uid} " f"{date} 原神自动签到"
+                )
+
+
+def add_job(user_id: int, uid: int, date: datetime):
+    try:
+        scheduler.add_job(
+            _sign,
+            "date",
+            run_date=date.replace(microsecond=0),
+            id=f"genshin_auto_sign_{uid}_{user_id}_0",
+            args=[user_id, uid, 0],
+        )
+        logger.debug(f"genshin_sign add_job：{date.replace(microsecond=0)} 原神自动签到")
+    except ConflictingIdError:
+        pass
+
+
+async def _sign(user_id: int, uid: int, count: int):
+    """
+    执行签到任务
+    :param user_id: 用户id
+    :param uid: uid
+    :param count: 执行次数
+    """
+    try:
+        return_data = await mihoyobbs_sign(user_id)
+    except Exception as e:
+        logger.error(f"mihoyobbs_sign error：{e}")
+        return_data = "米游社签到失败，请尝试发送'米游社签到'进行手动签到"
+    if count < 3:
+        try:
+            msg = await genshin_sign(uid)
+            next_time = await Genshin.random_sign_time(uid)
+            msg += f"\n下一次签到时间为：{next_time.replace(microsecond=0)}"
+            logger.info(f"USER：{user_id} UID：{uid} 原神自动签到任务发生成功...")
+            try:
+                scheduler.add_job(
+                    _sign,
+                    "date",
+                    run_date=next_time.replace(microsecond=0),
+                    id=f"genshin_auto_sign_{uid}_{user_id}_0",
+                    args=[user_id, uid, 0],
+                )
+            except ConflictingIdError:
+                msg += "\n定时任务设定失败..."
+        except Exception as e:
+            logger.error(f"USER：{user_id} UID：{uid} 原神自动签到任务发生错误 {type(e)}：{e}")
+            msg = None
+        if not msg:
+            now = datetime.now(pytz.timezone("Asia/Shanghai"))
+            if now.hour < 23:
+                random_hours = random.randint(1, 23 - now.hour)
+                next_time = now + timedelta(hours=random_hours)
+                scheduler.add_job(
+                    _sign,
+                    "date",
+                    run_date=next_time.replace(microsecond=0),
+                    id=f"genshin_auto_sign_{uid}_{user_id}_{count}",
+                    args=[user_id, uid, count + 1],
+                )
+                msg = (
+                    f"{now.replace(microsecond=0)} 原神"
+                    f"签到失败，将在 {next_time.replace(microsecond=0)} 时重试！"
+                )
+            else:
+                msg = "今日原神签到失败，请手动签到..."
+                logger.debug(f"USER：{user_id} UID：{uid} 原神今日签到失败...")
+    else:
+        msg = "今日原神自动签到重试次数已达到3次，请手动签到。"
+        logger.debug(f"USER：{user_id} UID：{uid} 原神今日签到失败次数打到 3 次...")
+    bot = get_bot()
+    if bot:
+        if user_id in [x["user_id"] for x in await bot.get_friend_list()]:
+            await bot.send_private_msg(user_id=user_id, message=return_data)
+            await bot.send_private_msg(user_id=user_id, message=msg)
+        else:
+            if not (group_id := await Genshin.get_bind_group(uid)):
+                group_list = await GroupInfoUser.get_user_all_group(user_id)
+                if group_list:
+                    group_id = group_list[0]
+            await bot.send_group_msg(
+                group_id=group_id, message=at(user_id) + msg
+            )
Index: plugins/genshin/query_user/query_memo/data_source.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/query_memo/data_source.py b/plugins/genshin/query_user/query_memo/data_source.py
new file mode 100644
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_user/query_memo/data_source.py	(date 1663666724604)
@@ -0,0 +1,298 @@
+from typing import Optional, Union
+from nonebot.adapters.onebot.v11 import MessageSegment
+from configs.config import Config
+from asyncio.exceptions import TimeoutError
+from services.log import logger
+from configs.path_config import IMAGE_PATH
+from utils.image_utils import BuildImage
+from utils.http_utils import AsyncHttpx
+from utils.utils import get_user_avatar
+from utils.message_builder import image
+from .._utils import get_ds
+from .._models import Genshin
+from io import BytesIO
+from nonebot import Driver
+import asyncio
+import nonebot
+
+
+driver: Driver = nonebot.get_driver()
+
+
+memo_path = IMAGE_PATH / "genshin" / "genshin_memo"
+memo_path.mkdir(exist_ok=True, parents=True)
+
+
+@driver.on_startup
+async def _():
+    for name, url in zip(
+        [
+            "resin.png", "task.png", "resin_discount.png", "chengehu.png",
+            "zhibian.png"
+        ],
+        [
+            "https://upload-bbs.mihoyo.com/upload/2021/09/29/8819732/54266243c7d15ba31690c8f5d63cc3c6_71491376413333325"
+            "20.png?x-oss-process=image//resize,s_600/quality,q_80/auto-orient,0/interlace,1/format,png",
+            "https://patchwiki.biligame.com/images/ys/thumb/c/cc/6k6kuj1kte6m1n7hexqfrn92z6h4yhh.png/60px-委托任务logo.png",
+            "https://patchwiki.biligame.com/images/ys/d/d9/t1hv6wpucbwucgkhjntmzroh90nmcdv.png",
+            "https://s3.bmp.ovh/imgs/2022/08/21/3a3b2e6c22e305ff.png",
+            "https://s3.bmp.ovh/imgs/2022/08/21/c2d7ace21e1d46cf.png",
+        ],
+    ):
+        file = memo_path / name
+        if not file.exists():
+            await AsyncHttpx.download_file(url, file)
+            logger.info(f"已下载原神便签资源 -> {file}...")
+
+
+async def get_user_memo(user_id: int, uid: int,
+                        uname: str) -> Optional[Union[str, MessageSegment]]:
+    uid = str(uid)
+    if uid[0] in ["1", "2"]:
+        server_id = "cn_gf01"
+    elif uid[0] == "5":
+        server_id = "cn_qd01"
+    else:
+        return None
+    return await parse_data_and_draw(user_id, uid, server_id, uname)
+
+
+async def get_memo(uid: str, server_id: str) -> "Union[str, dict], int":
+    try:
+        req = await AsyncHttpx.get(
+            url=
+            f"https://api-takumi-record.mihoyo.com/game_record/app/genshin/api/dailyNote?server={server_id}&role_id={uid}",
+            headers={
+                "DS": get_ds(f"role_id={uid}&server={server_id}"),
+                "x-rpc-app_version": Config.get_config("genshin",
+                                                       "mhyVersion"),
+                "User-Agent":
+                "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) miHoYoBBS/2.11.1",
+                "x-rpc-client_type": Config.get_config("genshin",
+                                                       "client_type"),
+                "Referer": "https://webstatic.mihoyo.com/",
+                "Cookie": await Genshin.get_user_cookie(int(uid))
+            },
+        )
+        data = req.json()
+        if data["message"] == "OK":
+            return data["data"], 200
+        return data["message"], 999
+    except TimeoutError:
+        return "访问超时，请稍后再试", 997
+    except Exception as e:
+        logger.error(f"便签查询获取失败未知错误 {e}：{e}")
+        return "发生了一些错误，请稍后再试", 998
+
+
+def create_border(image_name: str, content: str, notice_text: str,
+                  value: str) -> BuildImage:
+    border = BuildImage(500,
+                        75,
+                        color="#E0D9D1",
+                        font="HYWenHei-85W.ttf",
+                        font_size=20)
+    text_bk = BuildImage(350,
+                         75,
+                         color="#F5F1EB",
+                         font_size=23,
+                         font="HYWenHei-85W.ttf")
+    _x = 70 if image_name == "resin.png" else 50
+    _px = 10 if image_name == "resin.png" else 20
+    text_bk.paste(
+        BuildImage(_x, _x, background=memo_path / image_name),
+        (_px, 0),
+        True,
+        center_type="by_height",
+    )
+    text_bk.text((87, 15), content)
+    text_bk.paste(
+        BuildImage(
+            0,
+            0,
+            plain_text=notice_text,
+            font_color=(203, 189, 175),
+            font="HYWenHei-85W.ttf",
+            font_size=17,
+        ),
+        (87, 45),
+        True,
+    )
+    font_width, _ = border.getsize(value)
+    border.text((350 + 76 - int(font_width / 2), 0),
+                value,
+                center_type="by_height")
+    border.paste(text_bk, (2, 0), center_type="by_height")
+    return border
+
+
+async def parse_data_and_draw(user_id: int, uid: str, server_id: str,
+                              uname: str) -> Union[str, MessageSegment]:
+    data, code = await get_memo(uid, server_id)
+    if code != 200:
+        return data
+    user_avatar = BytesIO(await get_user_avatar(user_id))
+    for x in data["expeditions"]:
+        file_name = x["avatar_side_icon"].split("_")[-1]
+        role_avatar = memo_path / "role_avatar" / file_name
+        if not role_avatar.exists():
+            await AsyncHttpx.download_file(x["avatar_side_icon"], role_avatar)
+    return await asyncio.get_event_loop().run_in_executor(
+        None, _parse_data_and_draw, data, user_avatar, uid, uname)
+
+
+def _parse_data_and_draw(data: dict, user_avatar: BytesIO, uid: int,
+                         uname: str) -> Union[str, MessageSegment]:
+    current_resin = data["current_resin"]  # 当前树脂
+    max_resin = data["max_resin"]  # 最大树脂
+    resin_recovery_time = data["resin_recovery_time"]  # 树脂全部回复时间
+    finished_task_num = data["finished_task_num"]  # 完成的每日任务
+    total_task_num = data["total_task_num"]  # 每日任务总数
+    remain_resin_discount_num = data["remain_resin_discount_num"]  # 值得铭记的强敌总数
+    resin_discount_num_limit = data["resin_discount_num_limit"]  # 剩余值得铭记的强敌
+    current_expedition_num = data["current_expedition_num"]  # 当前挖矿人数
+    max_expedition_num = data["max_expedition_num"]  # 每日挖矿最大人数
+    expeditions = data["expeditions"]  # 挖矿详情
+    current_coin = data["current_home_coin"]  # 当前宝钱
+    max_coin = data["max_home_coin"]  # 最大宝钱
+    coin_recovery_time = data["home_coin_recovery_time"]  # 宝钱全部回复时间
+    transformer_available = data["transformer"]["obtained"]  # 参量质变仪可获取
+    transformer_state = data["transformer"]["recovery_time"][
+        "reached"]  # 参量质变仪状态
+    transformer_recovery_time = data["transformer"]["recovery_time"][
+        "Day"]  # 参量质变仪回复时间
+    transformer_recovery_hour = data["transformer"]["recovery_time"][
+        "Hour"]  # 参量质变仪回复时间
+    coin_minute, coin_second = divmod(int(coin_recovery_time), 60)
+    coin_hour, coin_minute = divmod(coin_minute, 60)
+    #print(data)
+    minute, second = divmod(int(resin_recovery_time), 60)
+    hour, minute = divmod(minute, 60)
+
+    A = BuildImage(1030,
+                   570,
+                   color="#f1e9e1",
+                   font_size=15,
+                   font="HYWenHei-85W.ttf")
+    A.text((10, 15), "原神便笺 | Create By ZhenXun", (198, 186, 177))
+    ava = BuildImage(100, 100, background=user_avatar)
+    ava.circle()
+    A.paste(ava, (40, 40), True)
+    A.paste(
+        BuildImage(0,
+                   0,
+                   plain_text=uname,
+                   font_size=20,
+                   font="HYWenHei-85W.ttf"),
+        (160, 62),
+        True,
+    )
+    A.paste(
+        BuildImage(
+            0,
+            0,
+            plain_text=f"UID：{uid}",
+            font_size=15,
+            font="HYWenHei-85W.ttf",
+            font_color=(21, 167, 89),
+        ),
+        (160, 92),
+        True,
+    )
+    border = create_border(
+        "resin.png",
+        "原粹树脂",
+        "将在{:0>2d}:{:0>2d}:{:0>2d}秒后全部恢复".format(hour, minute, second),
+        f"{current_resin}/{max_resin}",
+    )
+
+    A.paste(border, (10, 155))
+    border = create_border(
+        "task.png",
+        "每日委托",
+        "今日委托已全部完成" if finished_task_num == total_task_num else "今日委托完成数量不足",
+        f"{finished_task_num}/{total_task_num}",
+    )
+    A.paste(border, (10, 235))
+    border = create_border(
+        "resin_discount.png",
+        "值得铭记的强敌",
+        "本周剩余消耗减半次数",
+        f"{remain_resin_discount_num}/{resin_discount_num_limit}",
+    )
+    A.paste(border, (10, 315))
+    border = create_border(
+        "chengehu.png",
+        "洞天财翁-洞天宝钱",
+        "洞天财翁已达到存储上限"
+        if current_coin == max_coin else f"{coin_hour}小时{coin_minute}分钟后存满",
+        f"{current_coin}/{max_coin}",
+    )
+    A.paste(border, (10, 395))
+    border = create_border(
+        "zhibian.png",
+        "参量质变仪",
+        "不存在" if not transformer_available else
+        "已准备完成 " if transformer_state else f"{transformer_recovery_hour}小时后可使用" if not transformer_recovery_time else f"{transformer_recovery_time}天后可使用",
+        "不存在" if not transformer_available else
+        "可使用" if transformer_state else "冷却中",
+    )
+    A.paste(border, (10, 475))
+
+    expeditions_border = BuildImage(470,
+                                    510,
+                                    color="#E0D9D1",
+                                    font="HYWenHei-85W.ttf",
+                                    font_size=20)
+    expeditions_text = BuildImage(466,
+                                  506,
+                                  color="#F5F1EB",
+                                  font_size=23,
+                                  font="HYWenHei-85W.ttf")
+    expeditions_text.text(
+        (5, 5), f"探索派遣限制{current_expedition_num}/{max_expedition_num}",
+        (100, 100, 98))
+    h = 45
+    for x in expeditions:
+        _bk = BuildImage(400,
+                         82,
+                         color="#ECE3D8",
+                         font="HYWenHei-85W.ttf",
+                         font_size=21)
+        file_name = x["avatar_side_icon"].split("_")[-1]
+        role_avatar = memo_path / "role_avatar" / file_name
+        _ava_img = BuildImage(75, 75, background=role_avatar)
+        # _ava_img.circle()
+        if x["status"] == "Finished":
+            msg = "探索完成"
+            font_color = (146, 188, 63)
+            _circle_color = (146, 188, 63)
+        else:
+            minute, second = divmod(int(x["remained_time"]), 60)
+            hour, minute = divmod(minute, 60)
+            font_color = (193, 180, 167)
+            msg = "还剩{:0>2d}小时{:0>2d}分钟{:0>2d}秒".format(hour, minute, second)
+            _circle_color = "#DE9C58"
+
+        _circle_bk = BuildImage(60, 60)
+        _circle_bk.circle()
+        a_circle = BuildImage(55, 55, color=_circle_color)
+        a_circle.circle()
+        b_circle = BuildImage(47, 47)
+        b_circle.circle()
+        a_circle.paste(b_circle, (4, 4), True)
+        _circle_bk.paste(a_circle, (4, 4), True)
+
+        _bk.paste(_circle_bk, (25, 0), True, "by_height")
+        _bk.paste(_ava_img, (19, -13), True)
+        _bk.text((100, 0), msg, font_color, "by_height")
+        _bk.circle_corner(20)
+
+        expeditions_text.paste(_bk, (25, h), True)
+        h += 75 + 16
+
+    expeditions_border.paste(expeditions_text, center_type="center")
+
+    A.paste(expeditions_border, (550, 45))
+
+    return image(b64=A.pic2bs4())
Index: plugins/coser/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/coser/__init__.py b/plugins/coser/__init__.py
new file mode 100755
--- /dev/null	(date 1663666724604)
+++ b/plugins/coser/__init__.py	(date 1663666724604)
@@ -0,0 +1,59 @@
+from typing import Tuple, Any
+
+from nonebot import on_regex
+from nonebot.params import RegexGroup
+from nonebot.typing import T_State
+from nonebot.adapters.onebot.v11 import Bot, MessageEvent
+from utils.message_builder import image
+from services.log import logger
+from utils.manager import withdraw_message_manager
+from configs.config import Config
+
+__zx_plugin_name__ = "coser"
+__plugin_usage__ = """
+usage：
+    三次元也不戳，嘿嘿嘿
+    指令：
+        ?N连cos/coser
+        示例：cos
+        示例：5连cos （单次请求张数小于9）
+""".strip()
+__plugin_des__ = "三次元也不戳，嘿嘿嘿"
+__plugin_cmd__ = ["cos/coser"]
+__plugin_version__ = 0.1
+__plugin_author__ = "HibiKier"
+__plugin_settings__ = {
+    "level": 5,
+    "default_status": True,
+    "limit_superuser": False,
+    "cmd": ["cos", "coser", "括丝", "COS", "Cos", "cOS", "coS"],
+}
+__plugin_configs__ = {
+    "WITHDRAW_COS_MESSAGE": {
+        "value": (0, 1),
+        "help": "自动撤回，参1：延迟撤回色图时间(秒)，0 为关闭 | 参2：监控聊天类型，0(私聊) 1(群聊) 2(群聊+私聊)",
+        "default_value": (0, 1),
+    },
+}
+
+coser = on_regex(r"^(\d)?连?(cos|COS|coser|括丝)$", priority=5, block=True)
+
+# 纯cos，较慢:https://picture.yinux.workers.dev
+# 比较杂，有福利姬，较快:https://api.jrsgslb.cn/cos/url.php?return=img
+url = "https://picture.yinux.workers.dev/"
+
+
+@coser.handle()
+async def _(event: MessageEvent, reg_group: Tuple[Any, ...] = RegexGroup()):
+    num = reg_group[0] or 1
+    for _ in range(int(num)):
+        try:
+            msg_id = await coser.send(image(url))
+            withdraw_message_manager.withdraw_message(
+                event,
+                msg_id["message_id"],
+                Config.get_config("coser", "WITHDRAW_COS_MESSAGE"),
+            )
+        except Exception as e:
+            await coser.send("你cos给我看！")
+            logger.error(f"coser 发送了未知错误 {type(e)}：{e}")
Index: plugins/word_bank/_rule.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\nfrom nonebot.adapters.onebot.v11 import GroupMessageEvent, Event\nfrom utils.utils import get_message_img_file\nfrom .model import WordBank\n\n\nasync def check(event: Event) -> bool:\n    if isinstance(event, GroupMessageEvent):\n        msg = event.raw_message\n        list_img = get_message_img_file(event.json())\n        if list_img:\n            for img_file in list_img:\n                strinfo = re.compile(f\"{img_file},.*?]\")\n                msg = strinfo.sub(f'{img_file}]', msg)\n        strinfo_face = re.compile(f\",type=sticker]\")\n        msg = strinfo_face.sub(f']', msg)\n        return bool(await WordBank.check(event.group_id, msg,))\n    return False\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/word_bank/_rule.py b/plugins/word_bank/_rule.py
--- a/plugins/word_bank/_rule.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/word_bank/_rule.py	(date 1663665690887)
@@ -1,18 +1,36 @@
-import re
-from nonebot.adapters.onebot.v11 import GroupMessageEvent, Event
-from utils.utils import get_message_img_file
-from .model import WordBank
+import imagehash
+from PIL import Image
+from io import BytesIO
+from httpx import TimeoutException
+
+from nonebot.typing import T_State
+from nonebot.adapters.onebot.v11 import MessageEvent
 
+from utils.utils import get_message_text, get_message_img, get_message_at
+from ._model import WordBank
+from utils.http_utils import AsyncHttpx
 
-async def check(event: Event) -> bool:
-    if isinstance(event, GroupMessageEvent):
-        msg = event.raw_message
-        list_img = get_message_img_file(event.json())
-        if list_img:
-            for img_file in list_img:
-                strinfo = re.compile(f"{img_file},.*?]")
-                msg = strinfo.sub(f'{img_file}]', msg)
-        strinfo_face = re.compile(f",type=sticker]")
-        msg = strinfo_face.sub(f']', msg)
-        return bool(await WordBank.check(event.group_id, msg,))
+
+async def check(event: MessageEvent, state: T_State) -> bool:
+    text = get_message_text(event.message)
+    img = get_message_img(event.message)
+    at = get_message_at(event.message)
+    problem = text
+    if not text and len(img) == 1:
+        try:
+            r = await AsyncHttpx.get(img[0])
+            problem = str(imagehash.average_hash(Image.open(BytesIO(r.content))))
+        except TimeoutException:
+            pass
+    if at:
+        temp = ''
+        for seg in event.message:
+            if seg.type == 'at':
+                temp += f"[at:{seg.data['qq']}]"
+            elif seg.type == 'text':
+                temp += seg.data["text"]
+        problem = temp
+    if problem and (await WordBank.check(event, problem) is not None):
+        state["problem"] = problem
+        return True
     return False
Index: plugins/bilibili_sub/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/bilibili_sub/__init__.py b/plugins/bilibili_sub/__init__.py
new file mode 100755
--- /dev/null	(date 1663666724600)
+++ b/plugins/bilibili_sub/__init__.py	(date 1663666724600)
@@ -0,0 +1,276 @@
+from nonebot import on_command, on_regex
+from nonebot.typing import T_State
+from nonebot.adapters.onebot.v11 import Bot, MessageEvent, GroupMessageEvent, Message
+
+from utils.image_utils import text2image
+from utils.message_builder import image
+from .data_source import (
+    add_live_sub,
+    delete_sub,
+    add_up_sub,
+    add_season_sub,
+    get_media_id,
+    get_sub_status,
+    SubManager,
+    BilibiliSub,
+)
+from models.level_user import LevelUser
+from utils.manager import group_manager
+from configs.config import Config
+from utils.utils import is_number, scheduler, get_bot
+from typing import Optional, Tuple, Any
+from services.log import logger
+from nonebot import Driver
+from nonebot.params import CommandArg, ArgStr, RegexGroup
+import nonebot
+
+__zx_plugin_name__ = "B站订阅"
+__plugin_usage__ = """
+usage：
+    B站直播，番剧，UP动态开播等提醒
+    主播订阅相当于 直播间订阅 + UP订阅
+    指令：[示例Id乱打的，仅做示例]
+        添加订阅 ['主播'/'UP'/'番剧'] [id/链接/番名]
+        删除订阅 [id]
+        查看订阅
+        示例：添加订阅主播 2345344 <-(直播房间id)
+        示例：添加订阅UP 2355543 <-(个人主页id)
+        示例：添加订阅番剧 史莱姆 <-(支持模糊搜索)
+        示例：添加订阅番剧 125344 <-(番剧id)
+        示例：删除订阅 2324344 <-(任意id，通过查看订阅获取)
+""".strip()
+__plugin_des__ = "非常便利的B站订阅通知"
+__plugin_cmd__ = ["添加订阅 [主播/UP/番剧] [id/链接/番名]", "删除订阅 [id]", "查看订阅"]
+__plugin_version__ = 0.1
+__plugin_author__ = "HibiKier & NumberSir"
+__plugin_settings__ = {
+    "level": 5,
+    "default_status": True,
+    "limit_superuser": False,
+    "cmd": ["B站订阅", "b站订阅", "添加订阅", "删除订阅", "查看订阅"],
+}
+__plugin_configs__ = {
+    "GROUP_BILIBILI_SUB_LEVEL": {
+        "value": 5,
+        "help": "群内bilibili订阅需要管理的权限",
+        "default_value": 5,
+    },
+    "LIVE_MSG_AT_ALL": {
+        "value": False,
+        "help": "直播提醒是否AT全体（仅在真寻是管理员时生效）",
+        "default_value": False,
+    },
+    "UP_MSG_AT_ALL": {
+        "value": False,
+        "help": "UP动态投稿提醒是否AT全体（仅在真寻是管理员时生效）",
+        "default_value": False,
+    },
+}
+
+add_sub = on_command("添加订阅", priority=5, block=True)
+del_sub = on_regex(r"^删除订阅(\d+)$", priority=5, block=True)
+show_sub_info = on_regex("^查看订阅$", priority=5, block=True)
+
+driver: Driver = nonebot.get_driver()
+
+
+sub_manager: Optional[SubManager] = None
+
+
+@driver.on_startup
+async def _():
+    global sub_manager
+    sub_manager = SubManager()
+
+
+@add_sub.handle()
+async def _(event: MessageEvent, state: T_State, arg: Message = CommandArg()):
+    msg = arg.extract_plain_text().strip().split()
+    if len(msg) < 2:
+        await add_sub.finish("参数不完全，请查看订阅帮助...")
+    sub_type = msg[0]
+    id_ = ""
+    if isinstance(event, GroupMessageEvent):
+        if not await LevelUser.check_level(
+            event.user_id,
+            event.group_id,
+            Config.get_config("bilibili_sub", "GROUP_BILIBILI_SUB_LEVEL"),
+        ):
+            await add_sub.finish(
+                f"您的权限不足，群内订阅的需要 {Config.get_config('bilibili_sub', 'GROUP_BILIBILI_SUB_LEVEL')} 级权限..",
+                at_sender=True,
+            )
+        sub_user = f"{event.user_id}:{event.group_id}"
+    else:
+        sub_user = f"{event.user_id}"
+    state["sub_type"] = sub_type
+    state["sub_user"] = sub_user
+    if len(msg) > 1:
+        if "http" in msg[1]:
+            msg[1] = msg[1].split("?")[0]
+            msg[1] = msg[1][:-1] if msg[1][-1] == "/" else msg[1]
+            msg[1] = msg[1].split("/")[-1]
+        id_ = msg[1][2:] if msg[1].startswith("md") else msg[1]
+    if not is_number(id_):
+        if sub_type in ["season", "动漫", "番剧"]:
+            rst = "*以为您找到以下番剧，请输入Id选择：*\n"
+            state["season_data"] = await get_media_id(id_)
+            if len(state["season_data"]) == 0:
+                await add_sub.finish(f"未找到番剧：{msg}")
+            for i, x in enumerate(state["season_data"]):
+                rst += f'{i + 1}.{state["season_data"][x]["title"]}\n----------\n'
+            await add_sub.send("\n".join(rst.split("\n")[:-1]))
+        else:
+            await add_sub.finish("Id 必须为全数字！")
+    else:
+        state["id"] = int(id_)
+
+
+@add_sub.got("sub_type")
+@add_sub.got("sub_user")
+@add_sub.got("id")
+async def _(
+    event: MessageEvent,
+    state: T_State,
+    id_: str = ArgStr("id"),
+    sub_type: str = ArgStr("sub_type"),
+    sub_user: str = ArgStr("sub_user"),
+):
+    if sub_type in ["season", "动漫", "番剧"] and state.get("season_data"):
+        season_data = state["season_data"]
+        if not is_number(id_) or int(id_) < 1 or int(id_) > len(season_data):
+            await add_sub.reject_arg("id", "Id必须为数字且在范围内！请重新输入...")
+        id_ = season_data[int(id_) - 1]["media_id"]
+    id_ = int(id_)
+    if sub_type in ["主播", "直播"]:
+        await add_sub.send(await add_live_sub(id_, sub_user))
+    elif sub_type.lower() in ["up", "用户"]:
+        await add_sub.send(await add_up_sub(id_, sub_user))
+    elif sub_type in ["season", "动漫", "番剧"]:
+        await add_sub.send(await add_season_sub(id_, sub_user))
+    else:
+        await add_sub.finish("参数错误，第一参数必须为：主播/up/番剧！")
+    logger.info(
+        f"(USER {event.user_id}, GROUP "
+        f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+        f" 添加订阅：{sub_type} -> {sub_user} -> {id_}"
+    )
+
+
+@del_sub.handle()
+async def _(event: MessageEvent, reg_group: Tuple[Any, ...] = RegexGroup()):
+    msg = reg_group[0]
+    id_ = (
+        f"{event.group_id}"
+        if isinstance(event, GroupMessageEvent)
+        else f"{event.user_id}"
+    )
+    if await BilibiliSub.delete_bilibili_sub(int(msg), id_):
+        await del_sub.send(f"删除订阅id：{msg} 成功...")
+        logger.info(
+            f"(USER {event.user_id}, GROUP "
+            f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+            f" 删除订阅 {id_}"
+        )
+    else:
+        await del_sub.send(f"删除订阅id：{msg} 失败...")
+
+
+@show_sub_info.handle()
+async def _(event: MessageEvent):
+    if isinstance(event, GroupMessageEvent):
+        id_ = f"{event.group_id}"
+    else:
+        id_ = f"{event.user_id}"
+    data = await BilibiliSub.get_sub_data(id_)
+    live_rst = ""
+    up_rst = ""
+    season_rst = ""
+    for x in data:
+        if x.sub_type == "live":
+            live_rst += (
+                f"\t直播间id：{x.sub_id}\n" f"\t名称：{x.uname}\n" f"------------------\n"
+            )
+        if x.sub_type == "up":
+            up_rst += f"\tUP：{x.uname}\n" f"\tuid：{x.uid}\n" f"------------------\n"
+        if x.sub_type == "season":
+            season_rst += (
+                f"\t番剧id：{x.sub_id}\n"
+                f"\t番名：{x.season_name}\n"
+                f"\t当前集数：{x.season_current_episode}\n"
+                f"------------------\n"
+            )
+    live_rst = "当前订阅的直播：\n" + live_rst if live_rst else live_rst
+    up_rst = "当前订阅的UP：\n" + up_rst if up_rst else up_rst
+    season_rst = "当前订阅的番剧：\n" + season_rst if season_rst else season_rst
+    if not live_rst and not up_rst and not season_rst:
+        live_rst = (
+            "该群目前没有任何订阅..." if isinstance(event, GroupMessageEvent) else "您目前没有任何订阅..."
+        )
+    await show_sub_info.send(
+        image(
+            b64=(
+                await text2image(
+                    live_rst + up_rst + season_rst, padding=10, color="#f9f6f2"
+                )
+            ).pic2bs4()
+        )
+    )
+
+
+# 推送
+@scheduler.scheduled_job(
+    "interval",
+    seconds=30,
+)
+async def _():
+    bot = get_bot()
+    sub = None
+    if bot:
+        # try:
+        await sub_manager.reload_sub_data()
+        sub = await sub_manager.random_sub_data()
+        if sub:
+            logger.debug(f"Bilibili订阅开始检测：{sub.sub_id}")
+            rst = await get_sub_status(sub.sub_id, sub.sub_type)
+            await send_sub_msg(rst, sub, bot)
+            if sub.sub_type == "live":
+                rst = await get_sub_status(sub.sub_id, "up")
+                await send_sub_msg(rst, sub, bot)
+        # except Exception as e:
+        #     logger.error(f"B站订阅推送发生错误 sub_id：{sub.sub_id if sub else 0} {type(e)}：{e}")
+
+
+async def send_sub_msg(rst: str, sub: BilibiliSub, bot: Bot):
+    """
+    推送信息
+    :param rst: 回复
+    :param sub: BilibiliSub
+    :param bot: Bot
+    """
+    temp_group = []
+    if rst:
+        for x in sub.sub_users.split(",")[:-1]:
+            try:
+                if ":" in x and x.split(":")[1] not in temp_group:
+                    group_id = int(x.split(":")[1])
+                    temp_group.append(group_id)
+                    if (
+                        await bot.get_group_member_info(
+                            group_id=group_id, user_id=int(bot.self_id), no_cache=True
+                        )
+                    )["role"] in ["owner", "admin"]:
+                        if (
+                            sub.sub_type == "live"
+                            and Config.get_config("bilibili_sub", "LIVE_MSG_AT_ALL")
+                        ) or (
+                            sub.sub_type == "up"
+                            and Config.get_config("bilibili_sub", "UP_MSG_AT_ALL")
+                        ):
+                            rst = "[CQ:at,qq=all]\n" + rst
+                    if group_manager.get_plugin_status("bilibili_sub", group_id):
+                        await bot.send_group_msg(group_id=group_id, message=Message(rst))
+                else:
+                    await bot.send_private_msg(user_id=int(x), message=Message(rst))
+            except Exception as e:
+                logger.error(f"B站订阅推送发生错误 sub_id：{sub.sub_id} {type(e)}：{e}")
Index: plugins/genshin/query_resource_points/map.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_resource_points/map.py b/plugins/genshin/query_resource_points/map.py
new file mode 100755
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_resource_points/map.py	(date 1663666724604)
@@ -0,0 +1,265 @@
+from configs.path_config import IMAGE_PATH, TEXT_PATH
+from utils.image_utils import BuildImage
+from typing import Tuple, List
+from math import sqrt, pow
+import random
+
+try:
+    import ujson as json
+except ModuleNotFoundError:
+    import json
+
+icon_path = IMAGE_PATH / "genshin" / "genshin_icon"
+map_path = IMAGE_PATH / "genshin" / "map" / "map.png"
+resource_label_file = TEXT_PATH / "genshin" / "resource_label_file.json"
+resource_point_file = TEXT_PATH / "genshin" / "resource_point_file.json"
+
+
+class Map:
+    """
+    原神资源生成类
+    """
+
+    def __init__(
+        self,
+        resource_name: str,
+        center_point: Tuple[int, int],
+        deviation: Tuple[int, int] = (25, 51),
+        padding: int = 100,
+        planning_route: bool = False,
+        ratio: float = 1,
+    ):
+        """
+        参数:
+            :param resource_name: 资源名称
+            :param center_point: 中心点
+            :param deviation: 坐标误差
+            :param padding: 截图外边距
+            :param planning_route: 是否规划最佳线路
+            :param ratio: 压缩比率
+        """
+        self.map = BuildImage(0, 0, background=map_path)
+        self.resource_name = resource_name
+        self.center_x = center_point[0]
+        self.center_y = center_point[1]
+        self.deviation = deviation
+        self.padding = int(padding * ratio)
+        self.planning_route = planning_route
+        self.ratio = ratio
+
+        self.deviation = (
+            int(self.deviation[0] * ratio),
+            int(self.deviation[1] * ratio),
+        )
+
+        data = json.load(open(resource_label_file, "r", encoding="utf8"))
+        # 资源 id
+        self.resource_id = [
+            data[x]["id"]
+            for x in data
+            if x != "CENTER_POINT" and data[x]["name"] == resource_name
+        ][0]
+        # 传送锚点 id
+        self.teleport_anchor_id = [
+            data[x]["id"]
+            for x in data
+            if x != "CENTER_POINT" and data[x]["name"] == "传送锚点"
+        ][0]
+        # 神像 id
+        self.teleport_god_id = [
+            data[x]["id"]
+            for x in data
+            if x != "CENTER_POINT" and data[x]["name"] == "七天神像"
+        ][0]
+        # 资源坐标
+        data = json.load(open(resource_point_file, "r", encoding="utf8"))
+        self.resource_point = [
+            Resources(
+                int((self.center_x + data[x]["x_pos"]) * ratio),
+                int((self.center_y + data[x]["y_pos"]) * ratio),
+            )
+            for x in data
+            if x != "CENTER_POINT" and data[x]["label_id"] == self.resource_id
+        ]
+        # 传送锚点坐标
+        self.teleport_anchor_point = [
+            Resources(
+                int((self.center_x + data[x]["x_pos"]) * ratio),
+                int((self.center_y + data[x]["y_pos"]) * ratio),
+            )
+            for x in data
+            if x != "CENTER_POINT" and data[x]["label_id"] == self.teleport_anchor_id
+        ]
+        # 神像坐标
+        self.teleport_god_point = [
+            Resources(
+                int((self.center_x + data[x]["x_pos"]) * ratio),
+                int((self.center_y + data[x]["y_pos"]) * ratio),
+            )
+            for x in data
+            if x != "CENTER_POINT" and data[x]["label_id"] == self.teleport_god_id
+        ]
+
+    # 将地图上生成资源图标
+    def generate_resource_icon_in_map(self) -> int:
+        x_list = [x.x for x in self.resource_point]
+        y_list = [x.y for x in self.resource_point]
+        min_width = min(x_list) - self.padding
+        max_width = max(x_list) + self.padding
+        min_height = min(y_list) - self.padding
+        max_height = max(y_list) + self.padding
+        self._generate_transfer_icon((min_width, min_height, max_width, max_height))
+        for res in self.resource_point:
+            icon = self._get_icon_image(self.resource_id)
+            self.map.paste(
+                icon, (res.x - self.deviation[0], res.y - self.deviation[1]), True
+            )
+        if self.planning_route:
+            self._generate_best_route()
+        self.map.crop((min_width, min_height, max_width, max_height))
+        rand = random.randint(1, 10000)
+        self.map.save(f"{TEXT_PATH}/genshin_map_{rand}.png")
+        return rand
+
+    # 资源数量
+    def get_resource_count(self) -> int:
+        return len(self.resource_point)
+
+    # 生成传送锚点和神像
+    def _generate_transfer_icon(self, box: Tuple[int, int, int, int]):
+        min_width, min_height, max_width, max_height = box
+        for resources in [self.teleport_anchor_point, self.teleport_god_point]:
+            id_ = (
+                self.teleport_anchor_id
+                if resources == self.teleport_anchor_point
+                else self.teleport_god_id
+            )
+            for res in resources:
+                if min_width < res.x < max_width and min_height < res.y < max_height:
+                    icon = self._get_icon_image(id_)
+                    self.map.paste(
+                        icon,
+                        (res.x - self.deviation[0], res.y - self.deviation[1]),
+                        True,
+                    )
+
+    # 生成最优路线（说是最优其实就是直线最短）
+    def _generate_best_route(self):
+        line_points = []
+        teleport_list = self.teleport_anchor_point + self.teleport_god_point
+        for teleport in teleport_list:
+            current_res, res_min_distance = teleport.get_resource_distance(self.resource_point)
+            current_teleport, teleport_min_distance = current_res.get_resource_distance(teleport_list)
+            if current_teleport == teleport:
+                self.map.line(
+                    (current_teleport.x, current_teleport.y, current_res.x, current_res.y), (255, 0, 0), width=1
+                )
+        is_used_res_points = []
+        for res in self.resource_point:
+            if res in is_used_res_points:
+                continue
+            current_teleport, teleport_min_distance = res.get_resource_distance(teleport_list)
+            current_res, res_min_distance = res.get_resource_distance(self.resource_point)
+            if teleport_min_distance < res_min_distance:
+                self.map.line(
+                    (current_teleport.x, current_teleport.y, res.x, res.y), (255, 0, 0), width=1
+                )
+            else:
+                is_used_res_points.append(current_res)
+                self.map.line(
+                    (current_res.x, current_res.y, res.x, res.y), (255, 0, 0), width=1
+                )
+                res_cp = self.resource_point[:]
+                res_cp.remove(current_res)
+                # for _ in res_cp:
+                current_teleport_, teleport_min_distance = res.get_resource_distance(teleport_list)
+                current_res, res_min_distance = res.get_resource_distance(res_cp)
+                if teleport_min_distance < res_min_distance:
+                    self.map.line(
+                        (current_teleport.x, current_teleport.y, res.x, res.y), (255, 0, 0), width=1
+                    )
+                else:
+                    self.map.line(
+                        (current_res.x, current_res.y, res.x, res.y), (255, 0, 0), width=1
+                    )
+                    is_used_res_points.append(current_res)
+            is_used_res_points.append(res)
+
+        # resources_route = []
+        # # 先连上最近的资源路径
+        # for res in self.resource_point:
+        #     # 拿到最近的资源
+        #     current_res, _ = res.get_resource_distance(
+        #         self.resource_point
+        #         + self.teleport_anchor_point
+        #         + self.teleport_god_point
+        #     )
+        #     self.map.line(
+        #         (current_res.x, current_res.y, res.x, res.y), (255, 0, 0), width=1
+        #     )
+            # resources_route.append((current_res, res))
+        # teleport_list = self.teleport_anchor_point + self.teleport_god_point
+        # for res1, res2 in resources_route:
+        #     point_list = [x for x in resources_route if res1 in x or res2 in x]
+        #     if not list(set(point_list).intersection(set(teleport_list))):
+        #         if res1 not in teleport_list and res2 not in teleport_list:
+        #             # while True:
+        #             #     tmp = [x for x in point_list]
+        #             #     break
+        #             teleport1, distance1 = res1.get_resource_distance(teleport_list)
+        #             teleport2, distance2 = res2.get_resource_distance(teleport_list)
+        #             if distance1 > distance2:
+        #                 self.map.line(
+        #                     (teleport1.x, teleport1.y, res1.x, res1.y),
+        #                     (255, 0, 0),
+        #                     width=1,
+        #                 )
+        #             else:
+        #                 self.map.line(
+        #                     (teleport2.x, teleport2.y, res2.x, res2.y),
+        #                     (255, 0, 0),
+        #                     width=1,
+        #                 )
+
+        # self.map.line(xy, (255, 0, 0), width=3)
+
+    # 获取资源图标
+    def _get_icon_image(self, id_: int) -> "BuildImage":
+        icon = icon_path / f"{id_}.png"
+        if icon.exists():
+            return BuildImage(
+                int(50 * self.ratio), int(50 * self.ratio), background=icon
+            )
+        return BuildImage(
+            int(50 * self.ratio),
+            int(50 * self.ratio),
+            background=f"{icon_path}/box.png",
+        )
+
+    # def _get_shortest_path(self, res: 'Resources', res_2: 'Resources'):
+
+
+# 资源类
+class Resources:
+    def __init__(self, x: int, y: int):
+        self.x = x
+        self.y = y
+
+    def get_distance(self, x: int, y: int):
+        return int(sqrt(pow(abs(self.x - x), 2) + pow(abs(self.y - y), 2)))
+
+    # 拿到资源在该列表中的最短路径
+    def get_resource_distance(self, resources: List["Resources"]) -> "Resources, int":
+        current_res = None
+        min_distance = 999999
+        for res in resources:
+            distance = self.get_distance(res.x, res.y)
+            if distance < min_distance and res != self:
+                current_res = res
+                min_distance = distance
+        return current_res, min_distance
+
+
+
+
+
Index: plugins/open_cases/open_cases_c.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/open_cases/open_cases_c.py b/plugins/open_cases/open_cases_c.py
new file mode 100755
--- /dev/null	(date 1663666724604)
+++ b/plugins/open_cases/open_cases_c.py	(date 1663666724604)
@@ -0,0 +1,436 @@
+from datetime import datetime, timedelta
+from .config import *
+from services.log import logger
+from services.db_context import db
+from .models.open_cases_user import OpenCasesUser
+from models.sign_group_user import SignGroupUser
+from utils.message_builder import image
+import pypinyin
+import random
+from .utils import get_price
+from .models.buff_prices import BuffPrice
+from PIL import Image
+from utils.image_utils import alpha2white_pil, BuildImage
+from configs.path_config import IMAGE_PATH
+import asyncio
+from utils.utils import cn2py
+from configs.config import Config
+
+
+async def open_case(user_qq: int, group: int, case_name: str = "狂牙大行动") -> str:
+    if case_name not in ["狂牙大行动", "突围大行动", "命悬一线", "裂空", "光谱"]:
+        return "武器箱未收录"
+    knifes_flag = False
+    #          lan   zi   fen   hong   jin  price
+    uplist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0]
+    case = ""
+    for i in pypinyin.pinyin(case_name, style=pypinyin.NORMAL):
+        case += "".join(i)
+    impression = (await SignGroupUser.ensure(user_qq, group)).impression
+    rand = random.random()
+    async with db.transaction():
+        user = await OpenCasesUser.ensure(user_qq, group, for_update=True)
+        # 一天次数上限
+        if user.today_open_total >= int(
+            Config.get_config("open_cases", "INITIAL_OPEN_CASE_COUNT")
+            + int(impression)
+            / Config.get_config("open_cases", "EACH_IMPRESSION_ADD_COUNT")
+        ):
+            return _handle_is_MAX_COUNT()
+        skin, mosun = get_color_quality(rand, case_name)
+        # 调侃
+        if skin[:2] == "军规":
+            if skin.find("StatTrak") == -1:
+                uplist[0] = 1
+            else:
+                uplist[1] = 1
+            ridicule_result = random.choice(["这样看着才舒服", "是自己人，大伙把刀收好", "非常舒适~"])
+        if skin[:2] == "受限":
+            if skin.find("StatTrak") == -1:
+                uplist[2] = 1
+            else:
+                uplist[3] = 1
+            ridicule_result = random.choice(
+                ["还行吧，勉强接受一下下", "居然不是蓝色，太假了", "运气-1-1-1-1-1..."]
+            )
+        if skin[:2] == "保密":
+            if skin.find("StatTrak") == -1:
+                uplist[4] = 1
+            else:
+                uplist[5] = 1
+            ridicule_result = random.choice(
+                ["开始不适....", "你妈妈买菜必涨价！涨三倍！", "你最近不适合出门，真的"]
+            )
+        if skin[:2] == "隐秘":
+            if skin.find("StatTrak") == -1:
+                uplist[6] = 1
+            else:
+                uplist[7] = 1
+            ridicule_result = random.choice(
+                ["已经非常不适", "好兄弟你开的什么箱子啊，一般箱子不是只有蓝色的吗", "开始拿阳寿开箱子了？"]
+            )
+        if skin[:2] == "罕见":
+            knifes_flag = True
+            if skin.find("StatTrak") == -1:
+                uplist[8] = 1
+            else:
+                uplist[9] = 1
+            ridicule_result = random.choice(
+                ["你的好运我收到了，你可以去喂鲨鱼了", "最近该吃啥就迟点啥吧，哎，好好的一个人怎么就....哎", "众所周知，欧皇寿命极短."]
+            )
+        if skin.find("（") != -1:
+            cskin = skin.split("（")
+            skin = cskin[0].strip() + "（" + cskin[1].strip()
+        skin = skin.split("|")[0].strip() + " | " + skin.split("|")[1].strip()
+        # 价格
+        if skin.find("无涂装") == -1:
+            dbprice = await BuffPrice.ensure(skin[9:])
+        else:
+            dbprice = await BuffPrice.ensure(skin[9 : skin.rfind("(")].strip())
+        if dbprice.skin_price != 0:
+            price_result = dbprice.skin_price
+            logger.info("数据库查询到价格: ", dbprice.skin_price)
+            uplist[10] = dbprice.skin_price
+        else:
+            price = -1
+            price_result = "未查询到"
+            price_list, status = await get_price(skin[9:])
+            if price_list not in ["访问超时! 请重试或稍后再试!", "访问失败！"]:
+                for price_l in price_list[1:]:
+                    pcp = price_l.split(":")
+                    if pcp[0] == skin[9:]:
+                        price = float(pcp[1].strip())
+                        break
+                if price != -1:
+                    logger.info("存储入数据库---->", price)
+                    uplist[10] = price
+                    price_result = str(price)
+                    await dbprice.update(
+                        skin_price=price,
+                        update_date=datetime.now(),
+                    ).apply()
+        # sp = skin.split("|")
+        # cskin_word = sp[1][:sp[1].find("(") - 1].strip()
+        if knifes_flag:
+            await user.update(
+                knifes_name=user.knifes_name
+                + f"{case}||{skin.split(':')[1].strip()} 磨损：{str(mosun)[:11]}， 价格：{uplist[10]},"
+            ).apply()
+        cskin_word = skin.split(":")[1].replace("|", "-").replace("（StatTrak™）", "")
+        cskin_word = cskin_word[: cskin_word.rfind("(")].strip()
+        skin_name = cn2py(
+            cskin_word.replace("|", "-").replace("（StatTrak™）", "").strip()
+        )
+        img = image(f"{skin_name}.png", "cases/" + case)
+        #        if knifes_flag:
+        #            await user.update(
+        #                knifes_name=user.knifes_name + f"{skin} 磨损：{mosun}， 价格：{uplist[10]}"
+        #            ).apply()
+        if await update_user_total(user, uplist):
+            logger.info(
+                f"qq:{user_qq} 群:{group} 开启{case_name}武器箱 获得 {skin} 磨损：{mosun}， 价格：{uplist[10]}， 数据更新成功"
+            )
+        else:
+            logger.warning(
+                f"qq:{user_qq} 群:{group} 开启{case_name}武器箱 获得 {skin} 磨损：{mosun}， 价格：{uplist[10]}， 数据更新失败"
+            )
+        user = await OpenCasesUser.ensure(user_qq, group, for_update=True)
+        over_count = int(
+            Config.get_config("open_cases", "INITIAL_OPEN_CASE_COUNT")
+            + int(impression)
+            / Config.get_config("open_cases", "EACH_IMPRESSION_ADD_COUNT")
+        ) - user.today_open_total
+        return (
+            f"开启{case_name}武器箱.\n剩余开箱次数：{over_count}.\n" + img + "\n" + f"皮肤:{skin}\n"
+            f"磨损:{mosun:.9f}\n"
+            f"价格:{price_result}\n"
+            f"{ridicule_result}"
+        )
+
+
+async def open_shilian_case(user_qq: int, group: int, case_name: str, num: int = 10):
+    user = await OpenCasesUser.ensure(user_qq, group, for_update=True)
+    impression = (await SignGroupUser.ensure(user_qq, group)).impression
+    max_count = int(
+        Config.get_config("open_cases", "INITIAL_OPEN_CASE_COUNT")
+        + int(impression) / Config.get_config("open_cases", "EACH_IMPRESSION_ADD_COUNT")
+    )
+    if user.today_open_total >= max_count:
+        return _handle_is_MAX_COUNT()
+    if max_count - user.today_open_total < num:
+        return (
+            f"今天开箱次数不足{num}次噢，请单抽试试看（也许单抽运气更好？）"
+            f"\n剩余开箱次数：{max_count - user.today_open_total}"
+        )
+    await user.update(
+        total_count=user.total_count + num,
+        spend_money=user.spend_money + 17 * num,
+        today_open_total=user.today_open_total + num,
+    ).apply()
+    if num < 5:
+        h = 270
+    elif num % 5 == 0:
+        h = 270 * int(num / 5)
+    else:
+        h = 270 * int(num / 5) + 270
+    case = cn2py(case_name)
+    #            lan    zi    fen  hong   jin
+    # skin_list = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
+    #          lan   zi   fen   hong   jin  price
+    uplist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0]
+    img_list = []
+    name_list = ["蓝", "蓝(暗金)", "紫", "紫(暗金)", "粉", "粉(暗金)", "红", "红(暗金)", "金", "金(暗金)"]
+    async with db.transaction():
+        for _ in range(num):
+            knifes_flag = False
+            rand = random.random()
+            skin, mosun = get_color_quality(rand, case_name)
+            if skin[:2] == "军规":
+                if skin.find("StatTrak") == -1:
+                    uplist[0] += 1
+                else:
+                    uplist[1] += 1
+            if skin[:2] == "受限":
+                if skin.find("StatTrak") == -1:
+                    uplist[2] += 1
+                else:
+                    uplist[3] += 1
+            if skin[:2] == "保密":
+                if skin.find("StatTrak") == -1:
+                    uplist[4] += 1
+                else:
+                    uplist[5] += 1
+            if skin[:2] == "隐秘":
+                if skin.find("StatTrak") == -1:
+                    uplist[6] += 1
+                else:
+                    uplist[7] += 1
+            if skin[:2] == "罕见":
+                knifes_flag = True
+                if skin.find("StatTrak") == -1:
+                    uplist[8] += 1
+                else:
+                    uplist[9] += 1
+            if skin.find("（") != -1:
+                cskin = skin.split("（")
+                skin = cskin[0].strip() + "（" + cskin[1].strip()
+            skin = skin.split("|")[0].strip() + " | " + skin.split("|")[1].strip()
+            # 价格
+            if skin.find("无涂装") == -1:
+                dbprice = await BuffPrice.ensure(skin[9:])
+            else:
+                dbprice = await BuffPrice.ensure(skin[9 : skin.rfind("(")].strip())
+            if dbprice.skin_price != 0:
+                price_result = dbprice.skin_price
+                uplist[10] += price_result
+            else:
+                price_result = "未查询到"
+            if knifes_flag:
+                await user.update(
+                    knifes_name=user.knifes_name
+                    + f"{case}||{skin.split(':')[1].strip()} 磨损：{str(mosun)[:11]}， 价格：{dbprice.skin_price},"
+                ).apply()
+            cskin_word = skin.split(":")[1].replace("|", "-").replace("（StatTrak™）", "")
+            cskin_word = cskin_word[: cskin_word.rfind("(")].strip()
+            skin_name = ""
+            for i in pypinyin.pinyin(
+                cskin_word.replace("|", "-").replace("（StatTrak™）", "").strip(),
+                style=pypinyin.NORMAL,
+            ):
+                skin_name += "".join(i)
+            # img = image(skin_name, "cases/" + case, "png")
+            wImg = BuildImage(200, 270, 200, 200)
+            wImg.paste(
+                alpha2white_pil(
+                    Image.open(IMAGE_PATH / "cases" / case / f"{skin_name}.png").resize(
+                        (200, 200), Image.ANTIALIAS
+                    )
+                ),
+                (0, 0),
+            )
+            wImg.text((5, 200), skin)
+            wImg.text((5, 220), f"磨损：{str(mosun)[:9]}")
+            wImg.text((5, 240), f"价格：{price_result}")
+            img_list.append(wImg)
+            logger.info(
+                f"USER {user_qq} GROUP {group} 开启{case_name}武器箱 获得 {skin} 磨损：{mosun}， 价格：{uplist[10]}"
+            )
+        if await update_user_total(user, uplist, 0):
+            logger.info(
+                f"USER {user_qq} GROUP {group} 开启{case_name}武器箱 {num} 次， 数据更新成功"
+            )
+        else:
+            logger.warning(
+                f"USER {user_qq} GROUP {group} 开启{case_name}武器箱 {num} 次， 价格：{uplist[10]}， 数据更新失败"
+            )
+    # markImg = BuildImage(1000, h, 200, 270)
+    # for img in img_list:
+    #     markImg.paste(img)
+    markImg = await asyncio.get_event_loop().run_in_executor(
+        None, paste_markImg, h, img_list
+    )
+    over_count = max_count - user.today_open_total
+    result = ""
+    for i in range(len(name_list)):
+        if uplist[i]:
+            result += f"[{name_list[i]}：{uplist[i]}] "
+    return (
+        f"开启{case_name}武器箱\n剩余开箱次数：{over_count}\n"
+        + image(b64=markImg.pic2bs4())
+        + "\n"
+        + result[:-1]
+        + f"\n总获取金额：{uplist[-1]:.2f}\n总花费：{17 * num}"
+    )
+
+
+def paste_markImg(h: int, img_list: list):
+    markImg = BuildImage(1000, h, 200, 270)
+    for img in img_list:
+        markImg.paste(img)
+    return markImg
+
+
+def _handle_is_MAX_COUNT() -> str:
+    return f"今天已达开箱上限了喔，明天再来吧\n(提升好感度可以增加每日开箱数 #疯狂暗示)"
+
+
+async def update_user_total(user: OpenCasesUser, up_list: list, num: int = 1) -> bool:
+    try:
+        await user.update(
+            total_count=user.total_count + num,
+            blue_count=user.blue_count + up_list[0],
+            blue_st_count=user.blue_st_count + up_list[1],
+            purple_count=user.purple_count + up_list[2],
+            purple_st_count=user.purple_st_count + up_list[3],
+            pink_count=user.pink_count + up_list[4],
+            pink_st_count=user.pink_st_count + up_list[5],
+            red_count=user.red_count + up_list[6],
+            red_st_count=user.red_st_count + up_list[7],
+            knife_count=user.knife_count + up_list[8],
+            knife_st_count=user.knife_st_count + up_list[9],
+            spend_money=user.spend_money + 17 * num,
+            make_money=user.make_money + up_list[10],
+            today_open_total=user.today_open_total + num,
+            open_cases_time_last=datetime.now(),
+        ).apply()
+        return True
+    except:
+        return False
+
+
+async def total_open_statistics(user_qq: int, group: int) -> str:
+    async with db.transaction():
+        user = await OpenCasesUser.ensure(user_qq, group, for_update=True)
+        return (
+            f"开箱总数：{user.total_count}\n"
+            f"今日开箱：{user.today_open_total}\n"
+            f"蓝色军规：{user.blue_count}\n"
+            f"蓝色暗金：{user.blue_st_count}\n"
+            f"紫色受限：{user.purple_count}\n"
+            f"紫色暗金：{user.purple_st_count}\n"
+            f"粉色保密：{user.pink_count}\n"
+            f"粉色暗金：{user.pink_st_count}\n"
+            f"红色隐秘：{user.red_count}\n"
+            f"红色暗金：{user.red_st_count}\n"
+            f"金色罕见：{user.knife_count}\n"
+            f"金色暗金：{user.knife_st_count}\n"
+            f"花费金额：{user.spend_money}\n"
+            f"获取金额：{user.make_money:.2f}\n"
+            f"最后开箱日期：{(user.open_cases_time_last + timedelta(hours=8)).date()}"
+        )
+
+
+async def group_statistics(group: int):
+    user_list = await OpenCasesUser.get_user_all(group)
+    #          lan   zi   fen   hong   jin  pricei
+    uplist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0]
+    for user in user_list:
+        uplist[0] += user.blue_count
+        uplist[1] += user.blue_st_count
+        uplist[2] += user.purple_count
+        uplist[3] += user.purple_st_count
+        uplist[4] += user.pink_count
+        uplist[5] += user.pink_st_count
+        uplist[6] += user.red_count
+        uplist[7] += user.red_st_count
+        uplist[8] += user.knife_count
+        uplist[9] += user.knife_st_count
+        uplist[10] += user.make_money
+        uplist[11] += user.total_count
+        uplist[12] += user.today_open_total
+    return (
+        f"群开箱总数：{uplist[11]}\n"
+        f"群今日开箱：{uplist[12]}\n"
+        f"蓝色军规：{uplist[0]}\n"
+        f"蓝色暗金：{uplist[1]}\n"
+        f"紫色受限：{uplist[2]}\n"
+        f"紫色暗金：{uplist[3]}\n"
+        f"粉色保密：{uplist[4]}\n"
+        f"粉色暗金：{uplist[5]}\n"
+        f"红色隐秘：{uplist[6]}\n"
+        f"红色暗金：{uplist[7]}\n"
+        f"金色罕见：{uplist[8]}\n"
+        f"金色暗金：{uplist[9]}\n"
+        f"花费金额：{uplist[11] * 17}\n"
+        f"获取金额：{uplist[10]:.2f}"
+    )
+
+
+async def my_knifes_name(user_id: int, group: int):
+    knifes_name = (await OpenCasesUser.ensure(user_id, group)).knifes_name
+    if knifes_name:
+        knifes_list = knifes_name[:-1].split(",")
+        length = len(knifes_list)
+        if length < 5:
+            h = 600
+            w = length * 540
+        elif length % 5 == 0:
+            h = 600 * int(length / 5)
+            w = 540 * 5
+        else:
+            h = 600 * int(length / 5) + 600
+            w = 540 * 5
+        A = await asyncio.get_event_loop().run_in_executor(
+            None, _pst_my_knife, w, h, knifes_list
+        )
+        return image(b64=A.pic2bs4())
+    else:
+        return "您木有开出金色级别的皮肤喔"
+
+
+def _pst_my_knife(w, h, knifes_list):
+    A = BuildImage(w, h, 540, 600)
+    for knife in knifes_list:
+        case = knife.split("||")[0]
+        knife = knife.split("||")[1]
+        name = knife[: knife.find("(")].strip()
+        itype = knife[knife.find("(") + 1 : knife.find(")")].strip()
+        mosun = knife[knife.find("磨损：") + 3 : knife.rfind("价格：")].strip()
+        if mosun[-1] == "," or mosun[-1] == "，":
+            mosun = mosun[:-1]
+        price = knife[knife.find("价格：") + 3 :]
+        skin_name = ""
+        for i in pypinyin.pinyin(
+            name.replace("|", "-").replace("（StatTrak™）", "").strip(),
+            style=pypinyin.NORMAL,
+        ):
+            skin_name += "".join(i)
+        knife_img = BuildImage(470, 600, 470, 470, font_size=20)
+        knife_img.paste(
+            alpha2white_pil(
+                Image.open(IMAGE_PATH / f"cases" / case / f"{skin_name}.png").resize(
+                    (470, 470), Image.ANTIALIAS
+                )
+            ),
+            (0, 0),
+        )
+        knife_img.text((5, 500), f"\t{name}({itype})")
+        knife_img.text((5, 530), f"\t磨损：{mosun}")
+        knife_img.text((5, 560), f"\t价格：{price}")
+        A.paste(knife_img)
+    return A
+
+
+# G3SG1（StatTrak™） |  血腥迷彩 (战痕累累)
+# G3SG1（StatTrak™） | 血腥迷彩 (战痕累累)
+# G3SG1（StatTrak™） | 血腥迷彩 (战痕累累)
Index: basic_plugins/scripts.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from asyncpg.exceptions import (\r\n    DuplicateColumnError,\r\n    UndefinedColumnError,\r\n    PostgresSyntaxError,\r\n)\r\nfrom nonebot import Driver\r\nfrom services.db_context import db\r\nfrom models.group_info import GroupInfo\r\nfrom models.bag_user import BagUser\r\nfrom nonebot.adapters.onebot.v11 import Bot\r\nfrom services.log import logger\r\nfrom configs.path_config import TEXT_PATH\r\nfrom asyncio.exceptions import TimeoutError\r\nfrom typing import List\r\nfrom utils.http_utils import AsyncHttpx\r\nfrom utils.utils import scheduler\r\nimport nonebot\r\n\r\ntry:\r\n    import ujson as json\r\nexcept ModuleNotFoundError:\r\n    import json\r\n\r\n\r\ndriver: Driver = nonebot.get_driver()\r\n\r\n\r\n@driver.on_startup\r\nasync def update_city():\r\n    \"\"\"\r\n    部分插件需要中国省份城市\r\n    这里直接更新，避免插件内代码重复\r\n    \"\"\"\r\n    china_city = TEXT_PATH / \"china_city.json\"\r\n    data = {}\r\n    if not china_city.exists():\r\n        try:\r\n            res = await AsyncHttpx.get(\r\n                \"http://www.weather.com.cn/data/city3jdata/china.html\", timeout=5\r\n            )\r\n            res.encoding = \"utf8\"\r\n            provinces_data = json.loads(res.text)\r\n            for province in provinces_data.keys():\r\n                data[provinces_data[province]] = []\r\n                res = await AsyncHttpx.get(\r\n                    f\"http://www.weather.com.cn/data/city3jdata/provshi/{province}.html\",\r\n                    timeout=5,\r\n                )\r\n                res.encoding = \"utf8\"\r\n                city_data = json.loads(res.text)\r\n                for city in city_data.keys():\r\n                    data[provinces_data[province]].append(city_data[city])\r\n            with open(china_city, \"w\", encoding=\"utf8\") as f:\r\n                json.dump(data, f, indent=4, ensure_ascii=False)\r\n            logger.info(\"自动更新城市列表完成.....\")\r\n        except TimeoutError:\r\n            logger.warning(\"自动更新城市列表超时.....\")\r\n        except ValueError:\r\n            logger.warning(\"自动城市列表失败.....\")\r\n        except Exception as e:\r\n            logger.error(f\"自动城市列表未知错误 {type(e)}：{e}\")\r\n\r\n\r\n@driver.on_startup\r\nasync def _():\r\n    \"\"\"\r\n    数据库表结构变换\r\n    \"\"\"\r\n    _flag = []\r\n    sql_str = [\r\n        (\r\n            \"ALTER TABLE group_info ADD group_flag Integer NOT NULL DEFAULT 0;\",\r\n            \"group_info\",\r\n        ),  # group_info表添加一个group_flag\r\n        (\r\n            \"ALTER TABLE bag_users rename belonging_group To group_id;\",\r\n            \"bag_users\",\r\n        ),  # 将 bag_users 的 belonging_group 改为 group_id\r\n        (\r\n            \"ALTER TABLE group_info_users rename belonging_group To group_id;\",\r\n            \"group_info_users\",\r\n        ),\r\n        (\r\n            \"ALTER TABLE sign_group_users rename belonging_group To group_id;\",\r\n            \"sign_group_users\",\r\n        ),\r\n        (\r\n            \"ALTER TABLE open_cases_users rename belonging_group To group_id;\",\r\n            \"open_cases_users\",\r\n        ),\r\n        (\r\n            \"ALTER TABLE bag_users ADD property json NOT NULL DEFAULT '{}';\",\r\n            \"bag_users\",\r\n        ),  # bag_users 新增字段 property 替代 props\r\n        (\r\n            \"ALTER TABLE genshin ADD auto_sign_time timestamp with time zone;\",\r\n            \"genshin\"\r\n        ),  # 新增原神自动签到字段\r\n        (\r\n            \"ALTER TABLE genshin ADD resin_remind boolean DEFAULT False;\",\r\n            \"genshin\"\r\n        ),  # 新增原神自动签到字段\r\n        (\r\n            \"ALTER TABLE genshin ADD resin_recovery_time timestamp with time zone;\",\r\n            \"genshin\"\r\n        ),  # 新增原神自动签到字段\r\n        (\r\n            \"ALTER TABLE genshin ADD bind_group Integer;\",\r\n            \"genshin\"\r\n        ),  # 新增原神群号绑定字段\r\n        (\r\n            \"ALTER TABLE chat_history ADD plain_text Text;\",\r\n            \"chat_history\"\r\n        ),  # 新增纯文本\r\n        (\r\n            \"ALTER TABLE goods_info ADD daily_limit Integer DEFAULT 0;\",\r\n            \"goods_info\"\r\n        ),  # 新增纯文本\r\n        (\r\n            \"ALTER TABLE goods_info ADD daily_purchase_limit Json DEFAULT '{}';\",\r\n            \"goods_info\"\r\n        ),  # 新增纯文本\r\n    ]\r\n    for sql in sql_str:\r\n        try:\r\n            flag = sql[1]\r\n            sql = sql[0]\r\n            query = db.text(sql)\r\n            await db.first(query)\r\n            logger.info(f\"完成sql操作：{sql}\")\r\n            _flag.append(flag)\r\n        except (DuplicateColumnError, UndefinedColumnError):\r\n            pass\r\n        except PostgresSyntaxError:\r\n            logger.error(f\"语法错误：执行sql失败：{sql}\")\r\n    # bag_user 将文本转为字典格式\r\n    await __database_script(_flag)\r\n\r\n    # 完成后\r\n    end_sql_str = [\r\n        # \"ALTER TABLE bag_users DROP COLUMN props;\"          # 删除 bag_users 的 props 字段（还不到时候）\r\n    ]\r\n    for sql in end_sql_str:\r\n        try:\r\n            query = db.text(sql)\r\n            await db.first(query)\r\n            logger.info(f\"完成执行sql操作：{sql}\")\r\n        except (DuplicateColumnError, UndefinedColumnError):\r\n            pass\r\n        except PostgresSyntaxError:\r\n            logger.error(f\"语法错误：执行sql失败：{sql}\")\r\n\r\n    # str2json_sql = [\"alter table bag_users alter COLUMN props type json USING props::json;\"]       # 字段类型替换\r\n    # rename_sql = 'alter table {} rename {} to {};'                              # 字段更名\r\n    # for sql in str2json_sql:\r\n    #     try:\r\n    #         query = db.text(sql)\r\n    #         await db.first(query)\r\n    #     except DuplicateColumnError:\r\n    #         pass\r\n\r\n\r\n@driver.on_bot_connect\r\nasync def _(bot: Bot):\r\n    \"\"\"\r\n    版本某些需要的变换\r\n    \"\"\"\r\n    # 清空不存在的群聊信息，并将已所有已存在的群聊group_flag设置为1（认证所有已存在的群）\r\n    if not await GroupInfo.get_group_info(114514):\r\n        # 标识符，该功能只需执行一次\r\n        await GroupInfo.add_group_info(114514, \"114514\", 114514, 114514, 1)\r\n        group_list = await bot.get_group_list()\r\n        group_list = [g[\"group_id\"] for g in group_list]\r\n        _gl = [x.group_id for x in await GroupInfo.get_all_group()]\r\n        if 114514 in _gl:\r\n            _gl.remove(114514)\r\n        for group_id in _gl:\r\n            if group_id in group_list:\r\n                if await GroupInfo.get_group_info(group_id):\r\n                    await GroupInfo.set_group_flag(group_id, 1)\r\n                else:\r\n                    group_info = await bot.get_group_info(group_id=group_id)\r\n                    await GroupInfo.add_group_info(\r\n                        group_info[\"group_id\"],\r\n                        group_info[\"group_name\"],\r\n                        group_info[\"max_member_count\"],\r\n                        group_info[\"member_count\"],\r\n                        1,\r\n                    )\r\n                logger.info(f\"已将群聊 {group_id} 添加认证...\")\r\n            else:\r\n                await GroupInfo.delete_group_info(group_id)\r\n                logger.info(f\"移除不存在的群聊信息：{group_id}\")\r\n\r\n\r\nasync def __database_script(_flag: List[str]):\r\n    # bag_user 将文本转为字典格式\r\n    if \"bag_users\" in _flag:\r\n        for x in await BagUser.get_all_users():\r\n            props = {}\r\n            if x.props:\r\n                for prop in [p for p in x.props.split(\",\") if p]:\r\n                    if props.get(prop):\r\n                        props[prop] += 1\r\n                    else:\r\n                        props[prop] = 1\r\n                logger.info(\r\n                    f\"__database_script USER {x.user_qq} GROUP {x.group_id} 更新数据 {props}\"\r\n                )\r\n            await x.update(\r\n                property=props,\r\n                props=\"\",\r\n            ).apply()\r\n\r\n\r\n# 自动更新城市列表\r\n@scheduler.scheduled_job(\r\n    \"cron\",\r\n    hour=6,\r\n    minute=1,\r\n)\r\nasync def _():\r\n    await update_city()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic_plugins/scripts.py b/basic_plugins/scripts.py
--- a/basic_plugins/scripts.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/basic_plugins/scripts.py	(date 1663665690883)
@@ -1,3 +1,5 @@
+import random
+
 from asyncpg.exceptions import (
     DuplicateColumnError,
     UndefinedColumnError,
@@ -13,6 +15,7 @@
 from asyncio.exceptions import TimeoutError
 from typing import List
 from utils.http_utils import AsyncHttpx
+from utils.manager import GDict
 from utils.utils import scheduler
 import nonebot
 
@@ -109,6 +112,18 @@
             "genshin"
         ),  # 新增原神群号绑定字段
         (
+            "ALTER TABLE genshin ADD login_ticket VARCHAR(255) DEFAULT '';",
+            "genshin"
+        ),  # 新增米游社login_ticket绑定字段
+        (
+            "ALTER TABLE genshin ADD stuid VARCHAR(255) DEFAULT '';",
+            "genshin"
+        ),  # 新增米游社stuid绑定字段
+        (
+            "ALTER TABLE genshin ADD stoken VARCHAR(255) DEFAULT '';",
+            "genshin"
+        ),  # 新增米游社stoken绑定字段
+        (
             "ALTER TABLE chat_history ADD plain_text Text;",
             "chat_history"
         ),  # 新增纯文本
@@ -121,10 +136,13 @@
             "goods_info"
         ),  # 新增纯文本
     ]
-    for sql in sql_str:
+    for sql in sql_str + GDict.get('run_sql', []):
         try:
-            flag = sql[1]
-            sql = sql[0]
+            if isinstance(sql, str):
+                flag = f'{random.randint(1, 10000)}'
+            else:
+                flag = sql[1]
+                sql = sql[0]
             query = db.text(sql)
             await db.first(query)
             logger.info(f"完成sql操作：{sql}")
@@ -136,29 +154,6 @@
     # bag_user 将文本转为字典格式
     await __database_script(_flag)
 
-    # 完成后
-    end_sql_str = [
-        # "ALTER TABLE bag_users DROP COLUMN props;"          # 删除 bag_users 的 props 字段（还不到时候）
-    ]
-    for sql in end_sql_str:
-        try:
-            query = db.text(sql)
-            await db.first(query)
-            logger.info(f"完成执行sql操作：{sql}")
-        except (DuplicateColumnError, UndefinedColumnError):
-            pass
-        except PostgresSyntaxError:
-            logger.error(f"语法错误：执行sql失败：{sql}")
-
-    # str2json_sql = ["alter table bag_users alter COLUMN props type json USING props::json;"]       # 字段类型替换
-    # rename_sql = 'alter table {} rename {} to {};'                              # 字段更名
-    # for sql in str2json_sql:
-    #     try:
-    #         query = db.text(sql)
-    #         await db.first(query)
-    #     except DuplicateColumnError:
-    #         pass
-
 
 @driver.on_bot_connect
 async def _(bot: Bot):
Index: basic_plugins/init_plugin_config/init_plugins_config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pathlib import Path\r\nfrom ruamel.yaml import round_trip_load, round_trip_dump, YAML\r\nfrom utils.manager import admin_manager, plugins_manager\r\nfrom configs.config import Config\r\nfrom services.log import logger\r\nfrom utils.text_utils import prompt2cn\r\nfrom utils.utils import get_matchers\r\nfrom ruamel import yaml\r\nimport nonebot\r\n\r\n\r\n_yaml = YAML(typ=\"safe\")\r\n\r\n\r\ndef init_plugins_config(data_path):\r\n    \"\"\"\r\n    初始化插件数据配置\r\n    \"\"\"\r\n    plugins2config_file = data_path / \"configs\" / \"plugins2config.yaml\"\r\n    plugins2config_file.parent.mkdir(parents=True, exist_ok=True)\r\n    _data = {}\r\n    if plugins2config_file.exists():\r\n        _data = _yaml.load(open(plugins2config_file, \"r\", encoding=\"utf8\"))\r\n    _matchers = get_matchers(True)\r\n    # 优先使用 metadata 数据\r\n    for matcher in _matchers:\r\n        _plugin = matcher.plugin\r\n        metadata = _plugin.metadata\r\n        try:\r\n            _module = _plugin.module\r\n        except AttributeError:\r\n            continue\r\n        plugin_version = None\r\n        if metadata:\r\n            plugin_version = metadata.extra.get(\"version\")\r\n        if not plugin_version:\r\n            try:\r\n                plugin_version = _module.__getattribute__(\"__plugin_version__\")\r\n            except AttributeError:\r\n                pass\r\n        if metadata and metadata.config:\r\n            plugin_configs = {}\r\n            for key, value in metadata.config.__fields__.items():\r\n                plugin_configs[key.upper()] = {\r\n                    \"value\": value.default,\r\n                    \"default_value\": value.default\r\n                }\r\n        else:\r\n            try:\r\n                plugin_configs = _module.__getattribute__(\"__plugin_configs__\")\r\n            except AttributeError:\r\n                continue\r\n        # 插件配置版本更新或为Version为None或不在存储配置内，当使用metadata时，必定更新\r\n        if isinstance(plugin_version, str) or (\r\n            plugin_version is None\r\n            or (\r\n                _data.get(matcher.plugin_name)\r\n                and _data[matcher.plugin_name].keys() != plugin_configs.keys()\r\n            )\r\n            or plugin_version > plugins_manager.get(matcher.plugin_name)[\"version\"]\r\n            or matcher.plugin_name not in _data.keys()\r\n        ):\r\n            for key in plugin_configs:\r\n                if isinstance(plugin_configs[key], dict):\r\n                    Config.add_plugin_config(\r\n                        matcher.plugin_name,\r\n                        key,\r\n                        plugin_configs[key].get(\"value\"),\r\n                        help_=plugin_configs[key].get(\"help\"),\r\n                        default_value=plugin_configs[key].get(\"default_value\"),\r\n                        _override=True,\r\n                    )\r\n                else:\r\n                    Config.add_plugin_config(\r\n                        matcher.plugin_name, key, plugin_configs[key]\r\n                    )\r\n        else:\r\n            plugin_configs = _data[matcher.plugin_name]\r\n            for key in plugin_configs:\r\n                Config.add_plugin_config(\r\n                    matcher.plugin_name,\r\n                    key,\r\n                    plugin_configs[key][\"value\"],\r\n                    help_=plugin_configs[key][\"help\"],\r\n                    default_value=plugin_configs[key][\"default_value\"],\r\n                    _override=True,\r\n                )\r\n    if not Config.is_empty():\r\n        Config.save()\r\n        _data = round_trip_load(open(plugins2config_file, encoding=\"utf8\"))\r\n        for plugin in _data.keys():\r\n            try:\r\n                plugin_name = plugins_manager.get(plugin)[\"plugin_name\"]\r\n            except (AttributeError, TypeError):\r\n                plugin_name = plugin\r\n            _data[plugin].yaml_set_start_comment(plugin_name, indent=2)\r\n        # 初始化未设置的管理员权限等级\r\n        for k, v in Config.get_admin_level_data():\r\n            try:\r\n                admin_manager.set_admin_level(k, v)\r\n            except KeyError as e:\r\n                raise KeyError(f\"{e} ****** 请检查是否有插件加载失败 ******\")\r\n        # 存完插件基本设置\r\n        with open(plugins2config_file, \"w\", encoding=\"utf8\") as wf:\r\n            round_trip_dump(\r\n                _data, wf, indent=2, Dumper=yaml.RoundTripDumper, allow_unicode=True\r\n            )\r\n        # 再开始读取用户配置\r\n        user_config_file = Path() / \"configs\" / \"config.yaml\"\r\n        _data = {}\r\n        _tmp_data = {}\r\n        if user_config_file.exists():\r\n            with open(user_config_file, \"r\", encoding=\"utf8\") as f:\r\n                _data = _yaml.load(f)\r\n        # 数据替换\r\n        for plugin in Config.keys():\r\n            _tmp_data[plugin] = {}\r\n            for k in Config[plugin].keys():\r\n                try:\r\n                    if _data.get(plugin) and k in _data[plugin].keys():\r\n                        Config.set_config(plugin, k, _data[plugin][k])\r\n                        if level2module := Config.get_level2module(plugin, k):\r\n                            try:\r\n                                admin_manager.set_admin_level(\r\n                                    level2module, _data[plugin][k]\r\n                                )\r\n                            except KeyError:\r\n                                logger.warning(\r\n                                    f\"{level2module} 设置权限等级失败：{_data[plugin][k]}\"\r\n                                )\r\n                    _tmp_data[plugin][k] = Config.get_config(plugin, k)\r\n                except AttributeError as e:\r\n                    raise AttributeError(\r\n                        f\"{e}\\n\" + prompt2cn(\"可能为config.yaml配置文件填写不规范\", 46)\r\n                    )\r\n        Config.save()\r\n        temp_file = Path() / \"configs\" / \"temp_config.yaml\"\r\n        try:\r\n            with open(temp_file, \"w\", encoding=\"utf8\") as wf:\r\n                yaml.dump(\r\n                    _tmp_data, wf, Dumper=yaml.RoundTripDumper, allow_unicode=True\r\n                )\r\n            with open(temp_file, \"r\", encoding=\"utf8\") as rf:\r\n                _data = round_trip_load(rf)\r\n            # 添加注释\r\n            for plugin in _data.keys():\r\n                rst = \"\"\r\n                plugin_name = None\r\n                try:\r\n                    plugin_data = Config.get(plugin)\r\n                    for x in list(Config.get(plugin).keys()):\r\n                        try:\r\n                            _x = plugin_data[x].get(\"name\")\r\n                            if _x:\r\n                                plugin_name = _x\r\n                        except AttributeError:\r\n                            pass\r\n                except (KeyError, AttributeError):\r\n                    plugin_name = None\r\n                if not plugin_name:\r\n                    try:\r\n                        plugin_name = plugins_manager.get(plugin)[\"plugin_name\"]\r\n                    except (AttributeError, TypeError):\r\n                        plugin_name = plugin\r\n                plugin_name = (\r\n                    plugin_name.replace(\"[Hidden]\", \"\")\r\n                    .replace(\"[Superuser]\", \"\")\r\n                    .replace(\"[Admin]\", \"\")\r\n                    .strip()\r\n                )\r\n                rst += plugin_name + \"\\n\"\r\n                for k in _data[plugin].keys():\r\n                    rst += f'{k}: {Config[plugin][k][\"help\"]}' + \"\\n\"\r\n                _data[plugin].yaml_set_start_comment(rst[:-1], indent=2)\r\n            with open(Path() / \"configs\" / \"config.yaml\", \"w\", encoding=\"utf8\") as wf:\r\n                round_trip_dump(\r\n                    _data, wf, Dumper=yaml.RoundTripDumper, allow_unicode=True\r\n                )\r\n        except Exception as e:\r\n            logger.error(f\"生成简易配置注释错误 {type(e)}：{e}\")\r\n        if temp_file.exists():\r\n            temp_file.unlink()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic_plugins/init_plugin_config/init_plugins_config.py b/basic_plugins/init_plugin_config/init_plugins_config.py
--- a/basic_plugins/init_plugin_config/init_plugins_config.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/basic_plugins/init_plugin_config/init_plugins_config.py	(date 1663665690883)
@@ -1,3 +1,5 @@
+import asyncio
+from datetime import datetime, timedelta
 from pathlib import Path
 from ruamel.yaml import round_trip_load, round_trip_dump, YAML
 from utils.manager import admin_manager, plugins_manager
@@ -5,8 +7,8 @@
 from services.log import logger
 from utils.text_utils import prompt2cn
 from utils.utils import get_matchers
+from utils.utils import scheduler
 from ruamel import yaml
-import nonebot
 
 
 _yaml = YAML(typ="safe")
@@ -25,6 +27,8 @@
     # 优先使用 metadata 数据
     for matcher in _matchers:
         _plugin = matcher.plugin
+        if not _plugin:
+            continue
         metadata = _plugin.metadata
         try:
             _module = _plugin.module
@@ -105,78 +109,96 @@
             round_trip_dump(
                 _data, wf, indent=2, Dumper=yaml.RoundTripDumper, allow_unicode=True
             )
-        # 再开始读取用户配置
-        user_config_file = Path() / "configs" / "config.yaml"
-        _data = {}
-        _tmp_data = {}
-        if user_config_file.exists():
-            with open(user_config_file, "r", encoding="utf8") as f:
-                _data = _yaml.load(f)
-        # 数据替换
-        for plugin in Config.keys():
-            _tmp_data[plugin] = {}
-            for k in Config[plugin].keys():
-                try:
-                    if _data.get(plugin) and k in _data[plugin].keys():
-                        Config.set_config(plugin, k, _data[plugin][k])
-                        if level2module := Config.get_level2module(plugin, k):
-                            try:
-                                admin_manager.set_admin_level(
-                                    level2module, _data[plugin][k]
-                                )
-                            except KeyError:
-                                logger.warning(
-                                    f"{level2module} 设置权限等级失败：{_data[plugin][k]}"
-                                )
-                    _tmp_data[plugin][k] = Config.get_config(plugin, k)
-                except AttributeError as e:
-                    raise AttributeError(
-                        f"{e}\n" + prompt2cn("可能为config.yaml配置文件填写不规范", 46)
-                    )
-        Config.save()
-        temp_file = Path() / "configs" / "temp_config.yaml"
-        try:
-            with open(temp_file, "w", encoding="utf8") as wf:
-                yaml.dump(
-                    _tmp_data, wf, Dumper=yaml.RoundTripDumper, allow_unicode=True
-                )
-            with open(temp_file, "r", encoding="utf8") as rf:
-                _data = round_trip_load(rf)
-            # 添加注释
-            for plugin in _data.keys():
-                rst = ""
-                plugin_name = None
-                try:
-                    plugin_data = Config.get(plugin)
-                    for x in list(Config.get(plugin).keys()):
-                        try:
-                            _x = plugin_data[x].get("name")
-                            if _x:
-                                plugin_name = _x
-                        except AttributeError:
-                            pass
-                except (KeyError, AttributeError):
-                    plugin_name = None
-                if not plugin_name:
-                    try:
-                        plugin_name = plugins_manager.get(plugin)["plugin_name"]
-                    except (AttributeError, TypeError):
-                        plugin_name = plugin
-                plugin_name = (
-                    plugin_name.replace("[Hidden]", "")
-                    .replace("[Superuser]", "")
-                    .replace("[Admin]", "")
-                    .strip()
-                )
-                rst += plugin_name + "\n"
-                for k in _data[plugin].keys():
-                    rst += f'{k}: {Config[plugin][k]["help"]}' + "\n"
-                _data[plugin].yaml_set_start_comment(rst[:-1], indent=2)
-            with open(Path() / "configs" / "config.yaml", "w", encoding="utf8") as wf:
-                round_trip_dump(
-                    _data, wf, Dumper=yaml.RoundTripDumper, allow_unicode=True
-                )
-        except Exception as e:
-            logger.error(f"生成简易配置注释错误 {type(e)}：{e}")
-        if temp_file.exists():
-            temp_file.unlink()
+    user_config_file = Path() / "configs" / "config.yaml"
+    # if not user_config_file.exists():
+    _replace_config()
+    # else:
+    #     logger.info('五分钟后将进行配置数据替换，请注意...')
+    #     scheduler.add_job(
+    #         _replace_config,
+    #         "date",
+    #         run_date=datetime.now() + timedelta(minutes=5),
+    #         id=f"_replace_config"
+    #     )
+
+
+def _replace_config():
+    """
+    说明:
+        定时任务加载的配置读取替换
+    """
+    # 再开始读取用户配置
+    user_config_file = Path() / "configs" / "config.yaml"
+    _data = {}
+    _tmp_data = {}
+    if user_config_file.exists():
+        with open(user_config_file, "r", encoding="utf8") as f:
+            _data = _yaml.load(f)
+    # 数据替换
+    for plugin in Config.keys():
+        _tmp_data[plugin] = {}
+        for k in Config[plugin].keys():
+            try:
+                if _data.get(plugin) and k in _data[plugin].keys():
+                    Config.set_config(plugin, k, _data[plugin][k])
+                    if level2module := Config.get_level2module(plugin, k):
+                        try:
+                            admin_manager.set_admin_level(
+                                level2module, _data[plugin][k]
+                            )
+                        except KeyError:
+                            logger.warning(
+                                f"{level2module} 设置权限等级失败：{_data[plugin][k]}"
+                            )
+                _tmp_data[plugin][k] = Config.get_config(plugin, k)
+            except AttributeError as e:
+                raise AttributeError(
+                    f"{e}\n" + prompt2cn("可能为config.yaml配置文件填写不规范", 46)
+                )
+    Config.save()
+    temp_file = Path() / "configs" / "temp_config.yaml"
+    try:
+        with open(temp_file, "w", encoding="utf8") as wf:
+            yaml.dump(
+                _tmp_data, wf, Dumper=yaml.RoundTripDumper, allow_unicode=True
+            )
+        with open(temp_file, "r", encoding="utf8") as rf:
+            _data = round_trip_load(rf)
+        # 添加注释
+        for plugin in _data.keys():
+            rst = ""
+            plugin_name = None
+            try:
+                plugin_data = Config.get(plugin)
+                for x in list(Config.get(plugin).keys()):
+                    try:
+                        _x = plugin_data[x].get("name")
+                        if _x:
+                            plugin_name = _x
+                    except AttributeError:
+                        pass
+            except (KeyError, AttributeError):
+                plugin_name = None
+            if not plugin_name:
+                try:
+                    plugin_name = plugins_manager.get(plugin)["plugin_name"]
+                except (AttributeError, TypeError):
+                    plugin_name = plugin
+            plugin_name = (
+                plugin_name.replace("[Hidden]", "")
+                .replace("[Superuser]", "")
+                .replace("[Admin]", "")
+                .strip()
+            )
+            rst += plugin_name + "\n"
+            for k in _data[plugin].keys():
+                rst += f'{k}: {Config[plugin][k]["help"]}' + "\n"
+            _data[plugin].yaml_set_start_comment(rst[:-1], indent=2)
+        with open(Path() / "configs" / "config.yaml", "w", encoding="utf8") as wf:
+            round_trip_dump(
+                _data, wf, Dumper=yaml.RoundTripDumper, allow_unicode=True
+            )
+    except Exception as e:
+        logger.error(f"生成简易配置注释错误 {type(e)}：{e}")
+    if temp_file.exists():
+        temp_file.unlink()
Index: plugins/bilibili_sub/model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/bilibili_sub/model.py b/plugins/bilibili_sub/model.py
new file mode 100755
--- /dev/null	(date 1663666724604)
+++ b/plugins/bilibili_sub/model.py	(date 1663666724604)
@@ -0,0 +1,248 @@
+from services.log import logger
+from services.db_context import db
+from datetime import datetime
+from typing import Optional, List
+
+
+class BilibiliSub(db.Model):
+    __tablename__ = "bilibili_sub"
+
+    id = db.Column(db.Integer(), primary_key=True)
+    sub_id = db.Column(db.Integer(), nullable=False)
+    sub_type = db.Column(db.String(), nullable=False)
+    # 订阅用户
+    sub_users = db.Column(db.String(), nullable=False)
+    # 直播
+    live_short_id = db.Column(db.Integer())
+    live_status = db.Column(db.Integer)
+    # 主播/UP
+    uid = db.Column(db.BigInteger())
+    uname = db.Column(db.String())
+    latest_video_created = db.Column(db.BigInteger())  # 视频上传时间
+    dynamic_upload_time = db.Column(db.BigInteger(), default=0)  # 动态发布时间
+    # 番剧
+    season_name = db.Column(db.String())
+    season_id = db.Column(db.Integer())
+    season_current_episode = db.Column(db.String())
+    season_update_time = db.Column(db.DateTime())
+
+    _idx1 = db.Index("bilibili_sub_idx1", "sub_id", "sub_type", unique=True)
+
+    @classmethod
+    async def add_bilibili_sub(
+        cls,
+        sub_id: int,
+        sub_type: str,
+        sub_user: str,
+        *,
+        live_short_id: Optional[int] = None,
+        live_status: Optional[int] = None,
+        dynamic_upload_time: Optional[int] = None,
+        uid: Optional[int] = None,
+        uname: Optional[str] = None,
+        latest_video_created: Optional[int] = None,
+        season_name: Optional[str] = None,
+        season_id: Optional[int] = None,
+        season_current_episode: Optional[str] = None,
+        season_update_time: Optional[datetime] = None,
+    ) -> bool:
+        """
+        说明:
+            添加订阅
+        参数:
+            :param sub_id: 订阅名称，房间号，番剧号等
+            :param sub_type: 订阅类型
+            :param sub_user: 订阅此条目的用户
+            :param live_short_id: 直接短 id
+            :param live_status: 主播开播状态
+            :param dynamic_upload_time: 主播/UP最新动态时间
+            :param uid: 主播/UP uid
+            :param uname: 用户名称
+            :param latest_video_created: 最新视频上传时间
+            :param season_name: 番剧名称
+            :param season_id: 番剧 season_id
+            :param season_current_episode: 番剧最新集数
+            :param season_update_time: 番剧更新时间
+        """
+        try:
+            query = (
+                await cls.query.where(cls.sub_id == sub_id)
+                .with_for_update()
+                .gino.first()
+            )
+            sub_user = sub_user if sub_user[-1] == "," else f"{sub_user},"
+            if query:
+                if sub_user not in query.sub_users:
+                    sub_users = query.sub_users + sub_user
+                    await query.update(sub_users=sub_users).apply()
+            else:
+                sub = await cls.create(
+                    sub_id=sub_id, sub_type=sub_type, sub_users=sub_user
+                )
+                await sub.update(
+                    live_short_id=live_short_id
+                    if live_short_id
+                    else sub.live_short_id,
+                    live_status=live_status if live_status else sub.live_status,
+                    dynamic_upload_time=dynamic_upload_time
+                    if dynamic_upload_time
+                    else sub.dynamic_upload_time,
+                    uid=uid if uid else sub.uid,
+                    uname=uname if uname else sub.uname,
+                    latest_video_created=latest_video_created
+                    if latest_video_created
+                    else sub.latest_video_created,
+                    season_update_time=season_update_time
+                    if season_update_time
+                    else sub.season_update_time,
+                    season_current_episode=season_current_episode
+                    if season_current_episode
+                    else sub.season_current_episode,
+                    season_id=season_id if season_id else sub.season_id,
+                    season_name=season_name if season_name else sub.season_name,
+                ).apply()
+            return True
+        except Exception as e:
+            logger.info(f"bilibili_sub 添加订阅错误 {type(e)}: {e}")
+        return False
+
+    @classmethod
+    async def delete_bilibili_sub(cls, sub_id: int, sub_user: str) -> bool:
+        """
+        说明:
+            删除订阅
+        参数:
+            :param sub_id: 订阅名称
+            :param sub_user: 删除此条目的用户
+        """
+        try:
+            async with db.transaction():
+                query = (
+                    await cls.query.where(
+                        (cls.sub_id == sub_id) & (cls.sub_users.contains(sub_user))
+                    )
+                    .with_for_update()
+                    .gino.first()
+                )
+                if not query:
+                    return False
+                await query.update(
+                    sub_users=query.sub_users.replace(f"{sub_user},", "")
+                ).apply()
+                if not query.sub_users.strip():
+                    await query.delete()
+                return True
+        except Exception as e:
+            logger.info(f"bilibili_sub 删除订阅错误 {type(e)}: {e}")
+        return False
+
+    @classmethod
+    async def get_sub(cls, sub_id: int) -> Optional["BilibiliSub"]:
+        """
+        说明:
+            获取订阅对象
+        参数:
+            :param sub_id: 订阅 id
+        """
+        return await cls.query.where(cls.sub_id == sub_id).gino.first()
+
+    @classmethod
+    async def get_sub_data(cls, id_: str) -> List["BilibiliSub"]:
+        """
+        获取 id_ 订阅的所有内容
+        :param id_: id
+        """
+        query = cls.query.where(cls.sub_users.contains(id_))
+        return await query.gino.all()
+
+    @classmethod
+    async def update_sub_info(
+        cls,
+        sub_id: int,
+        *,
+        live_short_id: Optional[int] = None,
+        live_status: Optional[int] = None,
+        dynamic_upload_time: Optional[int] = None,
+        uid: Optional[int] = None,
+        uname: Optional[str] = None,
+        latest_video_created: Optional[int] = None,
+        season_name: Optional[str] = None,
+        season_id: Optional[int] = None,
+        season_current_episode: Optional[str] = None,
+        season_update_time: Optional[datetime] = None,
+    ) -> bool:
+        """
+        说明:
+            更新订阅信息
+        参数:
+            :param sub_id: 订阅名称，房间号，番剧号等
+            :param live_short_id: 直接短 id
+            :param live_status: 主播开播状态
+            :param dynamic_upload_time: 主播/UP最新动态时间
+            :param uid: 主播/UP uid
+            :param uname: 用户名称
+            :param latest_video_created: 最新视频上传时间
+            :param season_name: 番剧名称
+            :param season_id: 番剧 season_id
+            :param season_current_episode: 番剧最新集数
+            :param season_update_time: 番剧更新时间
+        """
+        try:
+            async with db.transaction():
+                sub = (
+                    await cls.query.where(cls.sub_id == sub_id)
+                    .with_for_update()
+                    .gino.first()
+                )
+                if sub:
+                    await sub.update(
+                        live_short_id=live_short_id
+                        if live_short_id is not None
+                        else sub.live_short_id,
+                        live_status=live_status
+                        if live_status is not None
+                        else sub.live_status,
+                        dynamic_upload_time=dynamic_upload_time
+                        if dynamic_upload_time is not None
+                        else sub.dynamic_upload_time,
+                        uid=uid if uid is not None else sub.uid,
+                        uname=uname if uname is not None else sub.uname,
+                        latest_video_created=latest_video_created
+                        if latest_video_created is not None
+                        else sub.latest_video_created,
+                        season_update_time=season_update_time
+                        if season_update_time is not None
+                        else sub.season_update_time,
+                        season_current_episode=season_current_episode
+                        if season_current_episode is not None
+                        else sub.season_current_episode,
+                        season_id=season_id if season_id is not None else sub.season_id,
+                        season_name=season_name
+                        if season_name is not None
+                        else sub.season_name,
+                    ).apply()
+                    return True
+        except Exception as e:
+            logger.info(f"bilibili_sub 更新订阅错误 {type(e)}: {e}")
+        return False
+
+    @classmethod
+    async def get_all_sub_data(
+        cls,
+    ) -> "List[BilibiliSub], List[BilibiliSub], List[BilibiliSub]":
+        """
+        说明:
+            分类获取所有数据
+        """
+        live_data = []
+        up_data = []
+        season_data = []
+        query = await cls.query.gino.all()
+        for x in query:
+            if x.sub_type == "live":
+                live_data.append(x)
+            if x.sub_type == "up":
+                up_data.append(x)
+            if x.sub_type == "season":
+                season_data.append(x)
+        return live_data, up_data, season_data
Index: plugins/genshin/query_user/bind/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/bind/__init__.py b/plugins/genshin/query_user/bind/__init__.py
new file mode 100644
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_user/bind/__init__.py	(date 1663666724604)
@@ -0,0 +1,140 @@
+from nonebot import on_command
+from nonebot.adapters.onebot.v11 import MessageEvent, GroupMessageEvent, Message
+from utils.utils import is_number
+from .._models import Genshin
+from services.log import logger
+from nonebot.params import CommandArg, Command
+from typing import Tuple
+from utils.http_utils import AsyncHttpx
+import json
+
+
+__zx_plugin_name__ = "原神绑定"
+__plugin_usage__ = """
+usage：
+    绑定原神uid等数据，cookie极为重要，请谨慎绑定
+    ** 如果对拥有者不熟悉，并不建议添加cookie **
+    该项目只会对cookie用于”米游社签到“，“原神玩家查询”，“原神便笺查询”
+    指令：
+        原神绑定uid [uid]
+        原神绑定米游社id [mys_id]
+        原神绑定cookie [cookie] # 该绑定请私聊
+        原神解绑
+        示例：原神绑定uid 92342233
+    如果不明白怎么获取cookie请输入“原神绑定cookie”。
+""".strip()
+__plugin_des__ = "绑定自己的原神uid等"
+__plugin_cmd__ = ["原神绑定uid [uid]", "原神绑定米游社id [mys_id]", "原神绑定cookie [cookie]", "原神解绑"]
+__plugin_type__ = ("原神相关",)
+__plugin_version__ = 0.1
+__plugin_author__ = "HibiKier"
+__plugin_settings__ = {
+    "level": 5,
+    "default_status": True,
+    "limit_superuser": False,
+    "cmd": ["原神绑定"],
+}
+
+bind = on_command(
+    "原神绑定uid", aliases={"原神绑定米游社id", "原神绑定cookie"}, priority=5, block=True
+)
+
+unbind = on_command("原神解绑", priority=5, block=True)
+
+web_Api = "https://api-takumi.mihoyo.com"
+bbs_Cookie_url = "https://webapi.account.mihoyo.com/Api/cookie_accountinfo_by_loginticket?login_ticket={}"
+bbs_Cookie_url2 = web_Api + "/auth/api/getMultiTokenByLoginTicket?login_ticket={}&token_types=3&uid={}"
+
+
+@bind.handle()
+async def _(event: MessageEvent, cmd: Tuple[str, ...] = Command(), arg: Message = CommandArg()):
+    cmd = cmd[0]
+    msg = arg.extract_plain_text().strip()
+    if cmd in ["原神绑定uid", "原神绑定米游社id"]:
+        if not is_number(msg):
+            await bind.finish("uid/id必须为纯数字！", at_senders=True)
+        msg = int(msg)
+    if cmd == "原神绑定uid":
+        uid = await Genshin.get_user_uid(event.user_id)
+        if uid:
+            await bind.finish(f"您已绑定过uid：{uid}，如果希望更换uid，请先发送原神解绑")
+        flag = await Genshin.add_uid(event.user_id, msg)
+        if not flag:
+            await bind.finish("添加失败，该uid可能已存在...")
+        _x = f"已成功添加原神uid：{msg}"
+    elif cmd == "原神绑定米游社id":
+        uid = await Genshin.get_user_uid(event.user_id)
+        if not uid:
+            await bind.finish("请先绑定原神uid..")
+        await Genshin.set_mys_id(uid, msg)
+        _x = f"已成功为uid：{uid} 设置米游社id：{msg}"
+    else:
+        if not msg:
+            await bind.finish("""私聊发送！！
+            1.以无痕模式打开浏览器（Edge请新建InPrivate窗口）
+            2.打开http://bbs.mihoyo.com/ys/并登陆
+            3.登陆后打开http://user.mihoyo.com/进行登陆
+            4.按下F12，打开控制台，输入以下命令：
+            var cookie=document.cookie;var ask=confirm('Cookie:'+cookie+'\\n\\nDo you want to copy the cookie to the clipboard?');if(ask==true){copy(cookie);msg=cookie}else{msg='Cancel'}
+            5.私聊发送：原神绑定cookie 刚刚复制的cookie""")
+        if isinstance(event, GroupMessageEvent):
+            await bind.finish("请立即撤回你的消息并私聊发送！")
+        uid = await Genshin.get_user_uid(event.user_id)
+        if not uid:
+            await bind.finish("请先绑定原神uid..")
+        if msg.startswith('"') or msg.startswith("'"):
+            msg = msg[1:]
+        if msg.endswith('"') or msg.endswith("'"):
+            msg = msg[:-1]
+        await Genshin.set_cookie(uid, msg)
+        cookie = msg
+        # 用: 代替=, ,代替;
+        cookie = '{"' + cookie.replace('=', '": "').replace("; ", '","') + '"}'
+        print(cookie)
+        cookie_json = json.loads(cookie)
+        print(cookie_json)
+        if 'login_ticket' not in cookie_json:
+            await bind.finish("请发送正确完整的cookie！")
+        login_ticket = cookie_json['login_ticket']
+        # try:
+        res = await AsyncHttpx.get(url=bbs_Cookie_url.format(login_ticket))
+        res.encoding = "utf-8"
+        data = json.loads(res.text)
+        print(data)
+        if "成功" in data["data"]["msg"]:
+            stuid = str(data["data"]["cookie_info"]["account_id"])
+            res = await AsyncHttpx.get(url=bbs_Cookie_url2.format(
+                login_ticket, stuid))
+            res.encoding = "utf-8"
+            data = json.loads(res.text)
+            stoken = data["data"]["list"][0]["token"]
+            # await Genshin.set_cookie(uid, cookie)
+            await Genshin.set_stoken(uid, stoken)
+            await Genshin.set_stuid(uid, stuid)
+            await Genshin.set_login_ticket(uid, login_ticket)
+        # except Exception as e:
+        #     await bind.finish("获取登陆信息失败，请检查cookie是否正确或更新cookie")
+        elif data["data"]["msg"] == "登录信息已失效，请重新登录":
+            await bind.finish("登录信息失效，请重新获取最新cookie进行绑定")
+        _x = f"已成功为uid：{uid} 设置cookie"
+    if isinstance(event, GroupMessageEvent):
+        await Genshin.set_bind_group(uid, event.group_id)
+    await bind.send(_x)
+    logger.info(
+        f"(USER {event.user_id}, "
+        f"GROUP {event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+        f" {cmd}：{msg}"
+    )
+
+
+@unbind.handle()
+async def _(event: MessageEvent):
+    if await Genshin.delete_user(event.user_id):
+        await unbind.send("用户数据删除成功...")
+        logger.info(
+            f"(USER {event.user_id}, GROUP "
+            f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+            f"原神解绑"
+        )
+    else:
+        await unbind.send("该用户数据不存在..")
Index: configs/config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Optional\nfrom pathlib import Path\nfrom .utils import ConfigsManager\n\nimport platform\nif platform.system() == \"Linux\":\n    import os\n    hostip = os.popen(\"cat /etc/resolv.conf | grep nameserver | awk '{ print $2 }'\").read().replace(\"\\n\",\"\")\n\n# 回复消息名称\nNICKNAME: str = \"小真寻\"\n\n# 数据库（必要）\n# 如果填写了bind就不需要再填写后面的字段了#）\n# 示例：\"bind\": \"postgresql://user:password@127.0.0.1:5432/database\"\nbind: str = \"\"  # 数据库连接链接\nsql_name: str = \"postgresql\"\nuser: str = \"\"  # 数据用户名\npassword: str = \"\"  # 数据库密码\naddress: str = \"\"  # 数据库地址\nport: str = \"\"  # 数据库端口\ndatabase: str = \"\"  # 数据库名称\n\n# 代理，例如 \"http://127.0.0.1:7890\"\n# 如果是WLS 可以 f\"http://{hostip}:7890\" 使用寄主机的代理\nSYSTEM_PROXY: Optional[str] = None  # 全局代理\n\n\nConfig = ConfigsManager(Path() / \"data\" / \"configs\" / \"plugins2config.yaml\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/configs/config.py b/configs/config.py
--- a/configs/config.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/configs/config.py	(date 1663665347015)
@@ -15,11 +15,11 @@
 # 示例："bind": "postgresql://user:password@127.0.0.1:5432/database"
 bind: str = ""  # 数据库连接链接
 sql_name: str = "postgresql"
-user: str = ""  # 数据用户名
-password: str = ""  # 数据库密码
-address: str = ""  # 数据库地址
-port: str = ""  # 数据库端口
-database: str = ""  # 数据库名称
+user: str = "hw"  # 数据用户名
+password: str = "HW-Since2014"  # 数据库密码
+address: str = "127.0.0.1"  # 数据库地址
+port: str = "5432"  # 数据库端口
+database: str = "helloworld"  # 数据库名称
 
 # 代理，例如 "http://127.0.0.1:7890"
 # 如果是WLS 可以 f"http://{hostip}:7890" 使用寄主机的代理
Index: plugins/draw_card/handles/azur_handle.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\nimport dateparser\r\nfrom lxml import etree\r\nfrom typing import List, Optional\r\nfrom urllib.parse import unquote\r\nfrom pydantic import ValidationError\r\nfrom nonebot.log import logger\r\nfrom nonebot.adapters.onebot.v11 import Message\r\nfrom utils.message_builder import image\r\n\r\nfrom .base_handle import BaseHandle, BaseData, UpEvent as _UpEvent, UpChar as _UpChar\r\nfrom ..config import draw_config\r\nfrom ..util import remove_prohibited_str, cn2py\r\nfrom utils.image_utils import BuildImage\r\nimport asyncio\r\n\r\ntry:\r\n    import ujson as json\r\nexcept ModuleNotFoundError:\r\n    import json\r\n\r\n\r\nclass AzurChar(BaseData):\r\n    type_: str  # 舰娘类型\r\n\r\n    @property\r\n    def star_str(self) -> str:\r\n        return [\"白\", \"蓝\", \"紫\", \"金\"][self.star - 1]\r\n\r\n\r\nclass UpChar(_UpChar):\r\n    type_: str   # 舰娘类型\r\n\r\n\r\nclass UpEvent(_UpEvent):\r\n    up_char: List[UpChar]  # up对象\r\n\r\n\r\nclass AzurHandle(BaseHandle[AzurChar]):\r\n    def __init__(self):\r\n        super().__init__(\"azur\", \"碧蓝航线\")\r\n        self.max_star = 4\r\n        self.config = draw_config.azur\r\n        self.ALL_CHAR: List[AzurChar] = []\r\n        self.UP_EVENT: Optional[UpEvent] = None\r\n\r\n    def get_card(self, pool_name: str, **kwargs) -> AzurChar:\r\n        if pool_name == \"轻型\":\r\n            type_ = [\"驱逐\", \"轻巡\", \"维修\"]\r\n        elif pool_name == \"重型\":\r\n            type_ = [\"重巡\", \"战列\", \"战巡\", \"重炮\"]\r\n        else:\r\n            type_ = [\"维修\", \"潜艇\", \"重巡\", \"轻航\", \"航母\"]\r\n        up_pool_flag = pool_name == \"活动\"\r\n        # Up\r\n        up_ship = [x for x in self.UP_EVENT.up_char if x.zoom > 0]\r\n        # print(up_ship)\r\n        acquire_char = None\r\n        if up_ship and up_pool_flag:\r\n            up_zoom = [(0, up_ship[0].zoom / 100)]\r\n            # 初始化概率\r\n            cur_ = up_ship[0].zoom / 100\r\n            for i in range(len(up_ship)):\r\n                try:\r\n                    up_zoom.append((cur_, cur_ + up_ship[i+1].zoom / 100))\r\n                    cur_ += up_ship[i+1].zoom / 100\r\n                except IndexError:\r\n                    pass\r\n            rand = random.random()\r\n            # 抽取up\r\n            for i, zoom in enumerate(up_zoom):\r\n                if zoom[0] <= rand <= zoom[1]:\r\n                    try:\r\n                        acquire_char = [x for x in self.ALL_CHAR if x.name == up_ship[i].name][0]\r\n                    except IndexError:\r\n                        pass\r\n        # 没有up或者未抽取到up\r\n        if not acquire_char:\r\n            star = self.get_star(\r\n                [4, 3, 2, 1],\r\n                [\r\n                    self.config.AZUR_FOUR_P,\r\n                    self.config.AZUR_THREE_P,\r\n                    self.config.AZUR_TWO_P,\r\n                    self.config.AZUR_ONE_P,\r\n                ],\r\n            )\r\n            acquire_char = random.choice([\r\n                x\r\n                for x in self.ALL_CHAR\r\n                if x.star == star and x.type_ in type_ and not x.limited\r\n            ])\r\n        return acquire_char\r\n\r\n    # async def draw(self, count: int, **kwargs) -> Message:\r\n    #     return await asyncio.get_event_loop().run_in_executor(None, self._draw, count)\r\n\r\n    async def draw(self, count: int, **kwargs) -> Message:\r\n        index2card = self.get_cards(count, **kwargs)\r\n        cards = [card[0] for card in index2card]\r\n        up_list = [x.name for x in self.UP_EVENT.up_char] if self.UP_EVENT.up_char else []\r\n        result = self.format_result(index2card, **{**kwargs, \"up_list\": up_list})\r\n        return image(b64=self.generate_img(cards).pic2bs4()) + result\r\n\r\n    def generate_card_img(self, card: AzurChar) -> BuildImage:\r\n        sep_w = 5\r\n        sep_t = 5\r\n        sep_b = 20\r\n        w = 100\r\n        h = 100\r\n        bg = BuildImage(w + sep_w * 2, h + sep_t + sep_b, font=\"msyh.ttf\")\r\n        frame_path = self.img_path / f\"{card.star}_star.png\"\r\n        frame = BuildImage(w, h, background=frame_path)\r\n        img_path = self.img_path / f\"{cn2py(card.name)}.png\"\r\n        img = BuildImage(w, h, background=img_path)\r\n        # 加圆角\r\n        img.circle_corner(6)\r\n        bg.paste(img, (sep_w, sep_t), alpha=True)\r\n        bg.paste(frame, (sep_w, sep_t), alpha=True)\r\n        bg.circle_corner(6)\r\n        # 加名字\r\n        text = card.name[:6] + \"...\" if len(card.name) > 7 else card.name\r\n        text_w, text_h = bg.getsize(text)\r\n        bg.text(\r\n            (sep_w + (w - text_w) / 2, h + sep_t + (sep_b - text_h) / 2),\r\n            text,\r\n            fill=[\"#808080\", \"#3b8bff\", \"#8000ff\", \"#c90\", \"#ee494c\"][card.star - 1],\r\n        )\r\n        return bg\r\n\r\n    def _init_data(self):\r\n        self.ALL_CHAR = [\r\n            AzurChar(\r\n                name=value[\"名称\"],\r\n                star=int(value[\"星级\"]),\r\n                limited=\"可以建造\" not in value[\"获取途径\"],\r\n                type_=value[\"类型\"],\r\n            )\r\n            for value in self.load_data().values()\r\n        ]\r\n        self.load_up_char()\r\n\r\n    def load_up_char(self):\r\n        try:\r\n            data = self.load_data(f\"draw_card_up/{self.game_name}_up_char.json\")\r\n            self.UP_EVENT = UpEvent.parse_obj(data.get(\"char\", {}))\r\n        except ValidationError:\r\n            logger.warning(f\"{self.game_name}_up_char 解析出错\")\r\n\r\n    def dump_up_char(self):\r\n        if self.UP_EVENT:\r\n            data = {\"char\": json.loads(self.UP_EVENT.json())}\r\n            self.dump_data(data, f\"draw_card_up/{self.game_name}_up_char.json\")\r\n\r\n    async def _update_info(self):\r\n        info = {}\r\n        # 更新图鉴\r\n        url = \"https://wiki.biligame.com/blhx/舰娘图鉴\"\r\n        result = await self.get_url(url)\r\n        if not result:\r\n            logger.warning(f\"更新 {self.game_name_cn} 出错\")\r\n            return\r\n        dom = etree.HTML(result, etree.HTMLParser())\r\n        contents = dom.xpath(\r\n            \"//div[@class='resp-tabs-container']/div[@class='resp-tab-content']\"\r\n        )\r\n        for index, content in enumerate(contents):\r\n            char_list = content.xpath(\"./table/tbody/tr[2]/td/div/div/div/div\")\r\n            for char in char_list:\r\n                try:\r\n                    name = char.xpath(\"./a/@title\")[0]\r\n                    frame = char.xpath(\"./div/a/img/@alt\")[0]\r\n                    avatar = char.xpath(\"./a/img/@srcset\")[0]\r\n                except IndexError:\r\n                    continue\r\n                member_dict = {\r\n                    \"名称\": remove_prohibited_str(name),\r\n                    \"头像\": unquote(str(avatar).split(\" \")[-2]),\r\n                    \"星级\": self.parse_star(frame),\r\n                    \"类型\": self.parse_type(index),\r\n                }\r\n                info[member_dict[\"名称\"]] = member_dict\r\n        # 更新额外信息\r\n        for key in info.keys():\r\n            url = f\"https://wiki.biligame.com/blhx/{key}\"\r\n            result = await self.get_url(url)\r\n            if not result:\r\n                info[key][\"获取途径\"] = []\r\n                logger.warning(f\"{self.game_name_cn} 获取额外信息错误 {key}\")\r\n                continue\r\n            try:\r\n                dom = etree.HTML(result, etree.HTMLParser())\r\n                time = dom.xpath(\r\n                    \"//table[@class='wikitable sv-general']/tbody[1]/tr[4]/td[2]//text()\"\r\n                )[0]\r\n                sources = []\r\n                if \"无法建造\" in time:\r\n                    sources.append(\"无法建造\")\r\n                elif \"活动已关闭\" in time:\r\n                    sources.append(\"活动限定\")\r\n                else:\r\n                    sources.append(\"可以建造\")\r\n                info[key][\"获取途径\"] = sources\r\n            except IndexError:\r\n                info[key][\"获取途径\"] = []\r\n                logger.warning(f\"{self.game_name_cn} 获取额外信息错误 {key}\")\r\n        self.dump_data(info)\r\n        logger.info(f\"{self.game_name_cn} 更新成功\")\r\n        # 下载头像\r\n        for value in info.values():\r\n            await self.download_img(value[\"头像\"], value[\"名称\"])\r\n        # 下载头像框\r\n        idx = 1\r\n        BLHX_URL = \"https://patchwiki.biligame.com/images/blhx\"\r\n        for url in [\r\n            \"/1/15/pxho13xsnkyb546tftvh49etzdh74cf.png\",\r\n            \"/a/a9/k8t7nx6c8pan5vyr8z21txp45jxeo66.png\",\r\n            \"/a/a5/5whkzvt200zwhhx0h0iz9qo1kldnidj.png\",\r\n            \"/a/a2/ptog1j220x5q02hytpwc8al7f229qk9.png\",\r\n            \"/6/6d/qqv5oy3xs40d3055cco6bsm0j4k4gzk.png\",\r\n        ]:\r\n            await self.download_img(BLHX_URL + url, f\"{idx}_star\")\r\n            idx += 1\r\n        await self.update_up_char()\r\n\r\n    @staticmethod\r\n    def parse_star(star: str) -> int:\r\n        if star in [\"舰娘头像外框普通.png\", \"舰娘头像外框白色.png\"]:\r\n            return 1\r\n        elif star in [\"舰娘头像外框稀有.png\", \"舰娘头像外框蓝色.png\"]:\r\n            return 2\r\n        elif star in [\"舰娘头像外框精锐.png\", \"舰娘头像外框紫色.png\"]:\r\n            return 3\r\n        elif star in [\"舰娘头像外框超稀有.png\", \"舰娘头像外框金色.png\"]:\r\n            return 4\r\n        elif star in [\"舰娘头像外框海上传奇.png\", \"舰娘头像外框彩色.png\"]:\r\n            return 5\r\n        elif star in [\r\n            \"舰娘头像外框最高方案.png\",\r\n            \"舰娘头像外框决战方案.png\",\r\n            \"舰娘头像外框超稀有META.png\",\r\n            \"舰娘头像外框精锐META.png\",\r\n        ]:\r\n            return 6\r\n        else:\r\n            return 6\r\n\r\n    @staticmethod\r\n    def parse_type(index: int) -> str:\r\n        azur_types = [\r\n            \"驱逐\",\r\n            \"轻巡\",\r\n            \"重巡\",\r\n            \"超巡\",\r\n            \"战巡\",\r\n            \"战列\",\r\n            \"航母\",\r\n            \"航站\",\r\n            \"轻航\",\r\n            \"重炮\",\r\n            \"维修\",\r\n            \"潜艇\",\r\n            \"运输\",\r\n        ]\r\n        try:\r\n            return azur_types[index]\r\n        except IndexError:\r\n            return azur_types[0]\r\n\r\n    async def update_up_char(self):\r\n        url = \"https://wiki.biligame.com/blhx/游戏活动表\"\r\n        result = await self.get_url(url)\r\n        if not result:\r\n            logger.warning(f\"{self.game_name_cn}获取活动表出错\")\r\n            return\r\n        try:\r\n            dom = etree.HTML(result, etree.HTMLParser())\r\n            dd = dom.xpath(\"//div[@class='timeline2']/dl/dd/a\")[0]\r\n            url = \"https://wiki.biligame.com\" + dd.xpath(\"./@href\")[0]\r\n            title = dd.xpath(\"string(.)\")\r\n            result = await self.get_url(url)\r\n            if not result:\r\n                logger.warning(f\"{self.game_name_cn}获取活动页面出错\")\r\n                return\r\n            dom = etree.HTML(result, etree.HTMLParser())\r\n            timer = dom.xpath(\"//span[@class='eventTimer']\")[0]\r\n            start_time = dateparser.parse(timer.xpath(\"./@data-start\")[0])\r\n            end_time = dateparser.parse(timer.xpath(\"./@data-end\")[0])\r\n            ships = dom.xpath(\"//table[@class='shipinfo']\")\r\n            up_chars = []\r\n            for ship in ships:\r\n                name = ship.xpath(\"./tbody/tr/td[2]/p/a/@title\")[0]\r\n                type_ = ship.xpath(\"./tbody/tr/td[2]/p/small/text()\")[0]        # 舰船类型\r\n                try:\r\n                    p = float(str(ship.xpath(\".//sup/text()\")[0]).strip(\"%\"))\r\n                except (IndexError, ValueError):\r\n                    p = 0\r\n                star = self.parse_star(\r\n                    ship.xpath(\"./tbody/tr/td[1]/div/div/div/a/img/@alt\")[0]\r\n                )\r\n                up_chars.append(UpChar(name=name, star=star, limited=False, zoom=p, type_=type_))\r\n            self.UP_EVENT = UpEvent(\r\n                title=title,\r\n                pool_img=\"\",\r\n                start_time=start_time,\r\n                end_time=end_time,\r\n                up_char=up_chars,\r\n            )\r\n            self.dump_up_char()\r\n        except Exception as e:\r\n            logger.warning(f\"{self.game_name_cn}UP更新出错 {type(e)}：{e}\")\r\n\r\n    async def _reload_pool(self) -> Optional[Message]:\r\n        await self.update_up_char()\r\n        self.load_up_char()\r\n        if self.UP_EVENT:\r\n            return Message(f\"重载成功！\\n当前活动：{self.UP_EVENT.title}\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/draw_card/handles/azur_handle.py b/plugins/draw_card/handles/azur_handle.py
--- a/plugins/draw_card/handles/azur_handle.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/draw_card/handles/azur_handle.py	(date 1663665690883)
@@ -1,7 +1,8 @@
+import contextlib
 import random
 import dateparser
 from lxml import etree
-from typing import List, Optional
+from typing import List, Optional, Tuple
 from urllib.parse import unquote
 from pydantic import ValidationError
 from nonebot.log import logger
@@ -12,7 +13,6 @@
 from ..config import draw_config
 from ..util import remove_prohibited_str, cn2py
 from utils.image_utils import BuildImage
-import asyncio
 
 try:
     import ujson as json
@@ -29,7 +29,7 @@
 
 
 class UpChar(_UpChar):
-    type_: str   # 舰娘类型
+    type_: str  # 舰娘类型
 
 
 class UpEvent(_UpEvent):
@@ -53,7 +53,9 @@
             type_ = ["维修", "潜艇", "重巡", "轻航", "航母"]
         up_pool_flag = pool_name == "活动"
         # Up
-        up_ship = [x for x in self.UP_EVENT.up_char if x.zoom > 0]
+        up_ship = (
+            [x for x in self.UP_EVENT.up_char if x.zoom > 0] if self.UP_EVENT else []
+        )
         # print(up_ship)
         acquire_char = None
         if up_ship and up_pool_flag:
@@ -61,19 +63,15 @@
             # 初始化概率
             cur_ = up_ship[0].zoom / 100
             for i in range(len(up_ship)):
-                try:
-                    up_zoom.append((cur_, cur_ + up_ship[i+1].zoom / 100))
-                    cur_ += up_ship[i+1].zoom / 100
-                except IndexError:
-                    pass
+                with contextlib.suppress(IndexError):
+                    up_zoom.append((cur_, cur_ + up_ship[i + 1].zoom / 100))
+                    cur_ += up_ship[i + 1].zoom / 100
             rand = random.random()
             # 抽取up
             for i, zoom in enumerate(up_zoom):
                 if zoom[0] <= rand <= zoom[1]:
-                    try:
+                    with contextlib.suppress(IndexError):
                         acquire_char = [x for x in self.ALL_CHAR if x.name == up_ship[i].name][0]
-                    except IndexError:
-                        pass
         # 没有up或者未抽取到up
         if not acquire_char:
             star = self.get_star(
@@ -92,9 +90,6 @@
             ])
         return acquire_char
 
-    # async def draw(self, count: int, **kwargs) -> Message:
-    #     return await asyncio.get_event_loop().run_in_executor(None, self._draw, count)
-
     async def draw(self, count: int, **kwargs) -> Message:
         index2card = self.get_cards(count, **kwargs)
         cards = [card[0] for card in index2card]
@@ -162,22 +157,22 @@
             return
         dom = etree.HTML(result, etree.HTMLParser())
         contents = dom.xpath(
-            "//div[@class='resp-tabs-container']/div[@class='resp-tab-content']"
+            "//div[@class='mw-body-content mw-content-ltr']/div[@class='mw-parser-output']"
         )
         for index, content in enumerate(contents):
-            char_list = content.xpath("./table/tbody/tr[2]/td/div/div/div/div")
+            char_list = content.xpath("./div[@id='CardSelectTr']/div")
             for char in char_list:
                 try:
-                    name = char.xpath("./a/@title")[0]
-                    frame = char.xpath("./div/a/img/@alt")[0]
-                    avatar = char.xpath("./a/img/@srcset")[0]
+                    name = char.xpath("./div/a/@title")[0]
+                    frame = char.xpath("./div/div/a/img/@alt")[0]
+                    avatar = char.xpath("./div/a/img/@srcset")[0]
                 except IndexError:
                     continue
                 member_dict = {
                     "名称": remove_prohibited_str(name),
                     "头像": unquote(str(avatar).split(" ")[-2]),
                     "星级": self.parse_star(frame),
-                    "类型": self.parse_type(index),
+                    "类型": char.xpath("./@data-param1")[0].split(",")[1],
                 }
                 info[member_dict["名称"]] = member_dict
         # 更新额外信息
@@ -225,48 +220,21 @@
 
     @staticmethod
     def parse_star(star: str) -> int:
-        if star in ["舰娘头像外框普通.png", "舰娘头像外框白色.png"]:
+        if star in {"舰娘头像外框普通.png", "舰娘头像外框白色.png"}:
             return 1
-        elif star in ["舰娘头像外框稀有.png", "舰娘头像外框蓝色.png"]:
+        elif star in {"舰娘头像外框稀有.png", "舰娘头像外框蓝色.png"}:
             return 2
-        elif star in ["舰娘头像外框精锐.png", "舰娘头像外框紫色.png"]:
+        elif star in {"舰娘头像外框精锐.png", "舰娘头像外框紫色.png"}:
             return 3
-        elif star in ["舰娘头像外框超稀有.png", "舰娘头像外框金色.png"]:
+        elif star in {"舰娘头像外框超稀有.png", "舰娘头像外框金色.png"}:
             return 4
-        elif star in ["舰娘头像外框海上传奇.png", "舰娘头像外框彩色.png"]:
+        elif star in {"舰娘头像外框海上传奇.png", "舰娘头像外框彩色.png"}:
             return 5
-        elif star in [
-            "舰娘头像外框最高方案.png",
-            "舰娘头像外框决战方案.png",
-            "舰娘头像外框超稀有META.png",
-            "舰娘头像外框精锐META.png",
-        ]:
+        elif star in {"舰娘头像外框最高方案.png", "舰娘头像外框决战方案.png", "舰娘头像外框超稀有META.png", "舰娘头像外框精锐META.png"}:
             return 6
         else:
             return 6
 
-    @staticmethod
-    def parse_type(index: int) -> str:
-        azur_types = [
-            "驱逐",
-            "轻巡",
-            "重巡",
-            "超巡",
-            "战巡",
-            "战列",
-            "航母",
-            "航站",
-            "轻航",
-            "重炮",
-            "维修",
-            "潜艇",
-            "运输",
-        ]
-        try:
-            return azur_types[index]
-        except IndexError:
-            return azur_types[0]
-
     async def update_up_char(self):
         url = "https://wiki.biligame.com/blhx/游戏活动表"
         result = await self.get_url(url)
@@ -290,7 +258,7 @@
             up_chars = []
             for ship in ships:
                 name = ship.xpath("./tbody/tr/td[2]/p/a/@title")[0]
-                type_ = ship.xpath("./tbody/tr/td[2]/p/small/text()")[0]        # 舰船类型
+                type_ = ship.xpath("./tbody/tr/td[2]/p/small/text()")[0]  # 舰船类型
                 try:
                     p = float(str(ship.xpath(".//sup/text()")[0]).strip("%"))
                 except (IndexError, ValueError):
@@ -298,7 +266,9 @@
                 star = self.parse_star(
                     ship.xpath("./tbody/tr/td[1]/div/div/div/a/img/@alt")[0]
                 )
-                up_chars.append(UpChar(name=name, star=star, limited=False, zoom=p, type_=type_))
+                up_chars.append(
+                    UpChar(name=name, star=star, limited=False, zoom=p, type_=type_)
+                )
             self.UP_EVENT = UpEvent(
                 title=title,
                 pool_img="",
Index: basic_plugins/init_plugin_config/init_plugins_resources.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from utils.manager import resources_manager\r\nfrom utils.utils import get_matchers\r\nfrom services.log import logger\r\nfrom pathlib import Path\r\nimport nonebot\r\n\r\n\r\ndef init_plugins_resources():\r\n    \"\"\"\r\n    资源文件路径的移动\r\n    \"\"\"\r\n    _tmp = []\r\n    for matcher in get_matchers():\r\n        if matcher.plugin_name not in _tmp:\r\n            _tmp.append(matcher.plugin_name)\r\n            _plugin = nonebot.plugin.get_plugin(matcher.plugin_name)\r\n            try:\r\n                _module = _plugin.module\r\n            except AttributeError:\r\n                logger.warning(f\"插件 {matcher.plugin_name} 加载失败...，资源控制未加载...\")\r\n            else:\r\n                try:\r\n                    resources = _module.__getattribute__(\"__plugin_resources__\")\r\n                except AttributeError:\r\n                    pass\r\n                else:\r\n                    path = Path(_module.__getattribute__(\"__file__\")).parent\r\n                    for resource in resources.keys():\r\n                        resources_manager.add_resource(matcher.plugin_name, path / resource, resources[resource])\r\n    resources_manager.save()\r\n    resources_manager.start_move()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic_plugins/init_plugin_config/init_plugins_resources.py b/basic_plugins/init_plugin_config/init_plugins_resources.py
--- a/basic_plugins/init_plugin_config/init_plugins_resources.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/basic_plugins/init_plugin_config/init_plugins_resources.py	(date 1663665690883)
@@ -26,18 +26,8 @@
                 else:
                     path = Path(_module.__getattribute__("__file__")).parent
                     for resource in resources.keys():
-                        resources_manager.add_resource(matcher.plugin_name, path / resource, resources[resource])
+                        resources_manager.add_resource(
+                            matcher.plugin_name, path / resource, resources[resource]
+                        )
     resources_manager.save()
     resources_manager.start_move()
-
-
-
-
-
-
-
-
-
-
-
-
Index: plugins/bt/data_source.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/bt/data_source.py b/plugins/bt/data_source.py
new file mode 100755
--- /dev/null	(date 1663666724604)
+++ b/plugins/bt/data_source.py	(date 1663666724604)
@@ -0,0 +1,51 @@
+from utils.http_utils import AsyncHttpx
+from configs.config import Config
+from bs4 import BeautifulSoup
+import platform
+
+# if platform.system() == "Windows":
+#     import asyncio
+#
+#     asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
+
+
+url = "http://www.eclzz.cool"
+
+
+async def get_bt_info(keyword: str, page: int):
+    """
+    获取资源信息
+    :param keyword: 关键词
+    :param page: 页数
+    """
+    text = (await AsyncHttpx.get(f"{url}/s/{keyword}_rel_{page}.html", timeout=5)).text
+    if "大约0条结果" in text:
+        return
+    soup = BeautifulSoup(text, "lxml")
+    item_lst = soup.find_all("div", {"class": "search-item"})
+    bt_max_num = Config.get_config("bt", "BT_MAX_NUM")
+    bt_max_num = bt_max_num if bt_max_num < len(item_lst) else len(item_lst)
+    for item in item_lst[:bt_max_num]:
+        divs = item.find_all("div")
+        title = (
+            str(divs[0].find("a").text)
+            .replace("<em>", "")
+            .replace("</em>", "")
+            .strip()
+        )
+        spans = divs[2].find_all("span")
+        type_ = spans[0].text
+        create_time = spans[1].find("b").text
+        file_size = spans[2].find("b").text
+        link = await get_download_link(divs[0].find("a")["href"])
+        yield title, type_, create_time, file_size, link
+
+
+async def get_download_link(_url: str) -> str:
+    """
+    获取资源下载地址
+    :param _url: 链接
+    """
+    text = (await AsyncHttpx.get(f"{url}{_url}")).text
+    soup = BeautifulSoup(text, "lxml")
+    return soup.find("a", {"id": "down-url"})["href"]
Index: basic_plugins/init_plugin_config/init_plugins_data.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pathlib import Path\r\nfrom ruamel.yaml import YAML\r\nfrom utils.manager import plugins_manager\r\nfrom utils.utils import get_matchers\r\nimport nonebot\r\n\r\ntry:\r\n    import ujson as json\r\nexcept ModuleNotFoundError:\r\n    import json\r\n\r\n\r\n_yaml = YAML(typ=\"safe\")\r\n\r\n\r\ndef init_plugins_data(data_path):\r\n    \"\"\"\r\n    初始化插件数据信息\r\n    \"\"\"\r\n    plugin2data_file = data_path / \"manager\" / \"plugin_manager.json\"\r\n    plugin2data_file.parent.mkdir(parents=True, exist_ok=True)\r\n    _data = {}\r\n    if plugin2data_file.exists():\r\n        _data = json.load(open(plugin2data_file, \"r\", encoding=\"utf8\"))\r\n    _matchers = get_matchers(True)\r\n    for matcher in _matchers:\r\n        _plugin = matcher.plugin\r\n        metadata = _plugin.metadata\r\n        try:\r\n            _module = _plugin.module\r\n        except AttributeError:\r\n            if matcher.plugin_name not in _data.keys():\r\n                plugins_manager.add_plugin_data(\r\n                    matcher.plugin_name, matcher.plugin_name, error=True\r\n                )\r\n            else:\r\n                plugins_manager.set_module_data(matcher.plugin_name, \"error\", True)\r\n                plugin_data = plugins_manager.get(matcher.plugin_name)\r\n                if plugin_data:\r\n                    plugins_manager.set_module_data(\r\n                        matcher.plugin_name, \"version\", plugin_data.get(\"version\")\r\n                    )\r\n        else:\r\n            plugin_version = None\r\n            if metadata:\r\n                plugin_version = metadata.extra.get(\"version\")\r\n            if not plugin_version:\r\n                try:\r\n                    plugin_version = _module.__getattribute__(\"__plugin_version__\")\r\n                except AttributeError:\r\n                    pass\r\n            if metadata:\r\n                plugin_name = metadata.name\r\n            else:\r\n                try:\r\n                    plugin_name = _module.__getattribute__(\"__zx_plugin_name__\")\r\n                except AttributeError:\r\n                    plugin_name = matcher.plugin_name\r\n            plugin_author = None\r\n            if metadata:\r\n                plugin_author = metadata.extra.get('author')\r\n            try:\r\n                plugin_author = _module.__getattribute__(\"__plugin_author__\")\r\n            except AttributeError:\r\n                pass\r\n            if matcher.plugin_name in plugins_manager.keys():\r\n                plugins_manager.set_module_data(matcher.plugin_name, \"error\", False)\r\n            if matcher.plugin_name not in plugins_manager.keys():\r\n                plugins_manager.add_plugin_data(\r\n                    matcher.plugin_name,\r\n                    plugin_name=plugin_name,\r\n                    author=plugin_author,\r\n                    version=plugin_version,\r\n                )\r\n                # metadata不检测version\r\n            elif isinstance(plugin_version, str) or plugins_manager[matcher.plugin_name][\"version\"] is None or (\r\n                plugin_version is not None\r\n                and plugin_version > plugins_manager[matcher.plugin_name][\"version\"]\r\n            ):\r\n                plugins_manager.set_module_data(\r\n                    matcher.plugin_name, \"plugin_name\", plugin_name\r\n                )\r\n                plugins_manager.set_module_data(matcher.plugin_name, \"author\", plugin_author)\r\n                plugins_manager.set_module_data(\r\n                    matcher.plugin_name, \"version\", plugin_version\r\n                )\r\n            if matcher.plugin_name in _data.keys():\r\n                plugins_manager.set_module_data(\r\n                    matcher.plugin_name, \"error\", _data[matcher.plugin_name][\"error\"]\r\n                )\r\n                plugins_manager.set_module_data(\r\n                    matcher.plugin_name, \"plugin_name\", _data[matcher.plugin_name][\"plugin_name\"]\r\n                )\r\n    plugins_manager.save()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic_plugins/init_plugin_config/init_plugins_data.py b/basic_plugins/init_plugin_config/init_plugins_data.py
--- a/basic_plugins/init_plugin_config/init_plugins_data.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/basic_plugins/init_plugin_config/init_plugins_data.py	(date 1663665690883)
@@ -25,6 +25,8 @@
     _matchers = get_matchers(True)
     for matcher in _matchers:
         _plugin = matcher.plugin
+        if not _plugin:
+            continue
         metadata = _plugin.metadata
         try:
             _module = _plugin.module
Index: utils/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import datetime\nfrom collections import defaultdict\nfrom nonebot import require\nfrom configs.config import SYSTEM_PROXY, Config\nfrom typing import List, Union, Optional, Type, Any\nfrom nonebot.adapters.onebot.v11 import Bot, Message\nfrom nonebot.matcher import matchers, Matcher\nfrom services.log import logger\nfrom pathlib import Path\nimport httpx\nimport nonebot\nimport pytz\nimport pypinyin\nimport time\n\ntry:\n    import ujson as json\nexcept ModuleNotFoundError:\n    import json\n\n\nscheduler = require(\"nonebot_plugin_apscheduler\").scheduler\n\n\nclass CountLimiter:\n    \"\"\"\n    次数检测工具，检测调用次数是否超过设定值\n    \"\"\"\n\n    def __init__(self, max_count: int):\n        self.count = defaultdict(int)\n        self.max_count = max_count\n\n    def add(self, key: Any):\n        self.count[key] += 1\n\n    def check(self, key: Any) -> bool:\n        if self.count[key] >= self.max_count:\n            self.count[key] = 0\n            return True\n        return False\n\n\nclass UserBlockLimiter:\n    \"\"\"\n    检测用户是否正在调用命令\n    \"\"\"\n\n    def __init__(self):\n        self.flag_data = defaultdict(bool)\n        self.time = time.time()\n\n    def set_true(self, key: Any):\n        self.time = time.time()\n        self.flag_data[key] = True\n\n    def set_false(self, key: Any):\n        self.flag_data[key] = False\n\n    def check(self, key: Any) -> bool:\n        if time.time() - self.time > 30:\n            self.set_false(key)\n            return False\n        return self.flag_data[key]\n\n\nclass FreqLimiter:\n    \"\"\"\n    命令冷却，检测用户是否处于冷却状态\n    \"\"\"\n\n    def __init__(self, default_cd_seconds: int):\n        self.next_time = defaultdict(float)\n        self.default_cd = default_cd_seconds\n\n    def check(self, key: Any) -> bool:\n        return time.time() >= self.next_time[key]\n\n    def start_cd(self, key: Any, cd_time: int = 0):\n        self.next_time[key] = time.time() + (\n            cd_time if cd_time > 0 else self.default_cd\n        )\n\n    def left_time(self, key: Any) -> float:\n        return self.next_time[key] - time.time()\n\n\nstatic_flmt = FreqLimiter(15)\n\n\nclass BanCheckLimiter:\n    \"\"\"\n    恶意命令触发检测\n    \"\"\"\n\n    def __init__(self, default_check_time: float = 5, default_count: int = 4):\n        self.mint = defaultdict(int)\n        self.mtime = defaultdict(float)\n        self.default_check_time = default_check_time\n        self.default_count = default_count\n\n    def add(self, key: Union[str, int, float]):\n        if self.mint[key] == 1:\n            self.mtime[key] = time.time()\n        self.mint[key] += 1\n\n    def check(self, key: Union[str, int, float]) -> bool:\n        if time.time() - self.mtime[key] > self.default_check_time:\n            self.mtime[key] = time.time()\n            self.mint[key] = 0\n            return False\n        if (\n            self.mint[key] >= self.default_count\n            and time.time() - self.mtime[key] < self.default_check_time\n        ):\n            self.mtime[key] = time.time()\n            self.mint[key] = 0\n            return True\n        return False\n\n\nclass DailyNumberLimiter:\n    \"\"\"\n    每日调用命令次数限制\n    \"\"\"\n\n    tz = pytz.timezone(\"Asia/Shanghai\")\n\n    def __init__(self, max_num):\n        self.today = -1\n        self.count = defaultdict(int)\n        self.max = max_num\n\n    def check(self, key) -> bool:\n        day = datetime.now(self.tz).day\n        if day != self.today:\n            self.today = day\n            self.count.clear()\n        return bool(self.count[key] < self.max)\n\n    def get_num(self, key):\n        return self.count[key]\n\n    def increase(self, key, num=1):\n        self.count[key] += num\n\n    def reset(self, key):\n        self.count[key] = 0\n\n\ndef is_number(s: str) -> bool:\n    \"\"\"\n    说明:\n        检测 s 是否为数字\n    参数:\n        :param s: 文本\n    \"\"\"\n    try:\n        float(s)\n        return True\n    except ValueError:\n        pass\n    try:\n        import unicodedata\n\n        unicodedata.numeric(s)\n        return True\n    except (TypeError, ValueError):\n        pass\n    return False\n\n\ndef get_bot() -> Optional[Bot]:\n    \"\"\"\n    说明:\n        获取 bot 对象\n    \"\"\"\n    try:\n        return list(nonebot.get_bots().values())[0]\n    except IndexError:\n        return None\n\n\ndef get_matchers(distinct: bool = False) -> List[Type[Matcher]]:\n    \"\"\"\n    说明:\n        获取所有matcher\n    参数:\n        distinct: 去重\n    \"\"\"\n    _matchers = []\n    temp = []\n    for i in matchers.keys():\n        for matcher in matchers[i]:\n            if distinct and matcher.plugin_name in temp:\n                continue\n            temp.append(matcher.plugin_name)\n            _matchers.append(matcher)\n    return _matchers\n\n\ndef get_message_at(data: Union[str, Message]) -> List[int]:\n    \"\"\"\n    说明:\n        获取消息中所有的 at 对象的 qq\n    参数:\n        :param data: event.json()\n    \"\"\"\n    qq_list = []\n    if isinstance(data, str):\n        data = json.loads(data)\n        for msg in data[\"message\"]:\n            if msg[\"type\"] == \"at\":\n                qq_list.append(int(msg[\"data\"][\"qq\"]))\n    else:\n        for seg in data:\n            if seg.type == \"at\":\n                qq_list.append(seg.data[\"qq\"])\n    return qq_list\n\n\ndef get_message_img(data: Union[str, Message]) -> List[str]:\n    \"\"\"\n    说明:\n        获取消息中所有的 图片 的链接\n    参数:\n        :param data: event.json()\n    \"\"\"\n    img_list = []\n    if isinstance(data, str):\n        data = json.loads(data)\n        for msg in data[\"message\"]:\n            if msg[\"type\"] == \"image\":\n                img_list.append(msg[\"data\"][\"url\"])\n    else:\n        for seg in data[\"image\"]:\n            img_list.append(seg.data[\"url\"])\n    return img_list\n\n\ndef get_message_img_file(data: Union[str, Message]) -> List[str]:\n    \"\"\"\n    说明:\n        获取消息中所有的 图片file\n    参数:\n        :param data: event.json()\n    \"\"\"\n    file_list = []\n    if isinstance(data, str):\n        data = json.loads(data)\n        for msg in data[\"message\"]:\n            if msg[\"type\"] == \"image\":\n                file_list.append(msg[\"data\"][\"file\"])\n    else:\n        for seg in data[\"image\"]:\n            file_list.append(seg.data[\"file\"])\n    return file_list\n\n\ndef get_message_text(data: Union[str, Message]) -> str:\n    \"\"\"\n    说明:\n        获取消息中 纯文本 的信息\n    参数:\n        :param data: event.json()\n    \"\"\"\n    result = \"\"\n    if isinstance(data, str):\n        data = json.loads(data)\n        for msg in data[\"message\"]:\n            if msg[\"type\"] == \"text\":\n                result += msg[\"data\"][\"text\"].strip() + \" \"\n        return result.strip()\n    else:\n        for seg in data[\"text\"]:\n            result += seg.data[\"text\"] + \" \"\n    return result.strip()\n\n\ndef get_message_record(data: Union[str, Message]) -> List[str]:\n    \"\"\"\n    说明:\n        获取消息中所有 语音 的链接\n    参数:\n        :param data: event.json()\n    \"\"\"\n    record_list = []\n    if isinstance(data, str):\n        data = json.loads(data)\n        for msg in data[\"message\"]:\n            if msg[\"type\"] == \"record\":\n                record_list.append(msg[\"data\"][\"url\"])\n    else:\n        for seg in data[\"record\"]:\n            record_list.append(seg.data[\"url\"])\n    return record_list\n\n\ndef get_message_json(data: str) -> List[dict]:\n    \"\"\"\n    说明:\n        获取消息中所有 json\n    参数:\n        :param data: event.json()\n    \"\"\"\n    try:\n        json_list = []\n        data = json.loads(data)\n        for msg in data[\"message\"]:\n            if msg[\"type\"] == \"json\":\n                json_list.append(msg[\"data\"])\n        return json_list\n    except KeyError:\n        return []\n\n\ndef get_local_proxy():\n    \"\"\"\n    说明:\n        获取 config.py 中设置的代理\n    \"\"\"\n    return SYSTEM_PROXY if SYSTEM_PROXY else None\n\n\ndef is_chinese(word: str) -> bool:\n    \"\"\"\n    说明:\n        判断字符串是否为纯中文\n    参数:\n        :param word: 文本\n    \"\"\"\n    for ch in word:\n        if not \"\\u4e00\" <= ch <= \"\\u9fff\":\n            return False\n    return True\n\n\nasync def get_user_avatar(qq: int) -> Optional[bytes]:\n    \"\"\"\n    说明:\n        快捷获取用户头像\n    参数:\n        :param qq: qq号\n    \"\"\"\n    url = f\"http://q1.qlogo.cn/g?b=qq&nk={qq}&s=160\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except TimeoutError:\n                pass\n    return None\n\n\nasync def get_group_avatar(group_id: int) -> Optional[bytes]:\n    \"\"\"\n    说明:\n        快捷获取用群头像\n    参数:\n        :param group_id: 群号\n    \"\"\"\n    url = f\"http://p.qlogo.cn/gh/{group_id}/{group_id}/640/\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except TimeoutError:\n                pass\n    return None\n\n\ndef cn2py(word: str) -> str:\n    \"\"\"\n    说明:\n        将字符串转化为拼音\n    参数:\n        :param word: 文本\n    \"\"\"\n    temp = \"\"\n    for i in pypinyin.pinyin(word, style=pypinyin.NORMAL):\n        temp += \"\".join(i)\n    return temp\n\n\ndef change_pixiv_image_links(\n    url: str, size: Optional[str] = None, nginx_url: Optional[str] = None\n):\n    \"\"\"\n    说明:\n        根据配置改变图片大小和反代链接\n    参数:\n        :param url: 图片原图链接\n        :param size: 模式\n        :param nginx_url: 反代\n    \"\"\"\n    if size == \"master\":\n        img_sp = url.rsplit(\".\", maxsplit=1)\n        url = img_sp[0]\n        img_type = img_sp[1]\n        url = url.replace(\"original\", \"master\") + f\"_master1200.{img_type}\"\n    if not nginx_url:\n        nginx_url = Config.get_config(\"pixiv\", \"PIXIV_NGINX_URL\")\n    if nginx_url:\n        url = (\n            url.replace(\"i.pximg.net\", nginx_url)\n            .replace(\"i.pixiv.cat\", nginx_url)\n            .replace(\"_webp\", \"\")\n        )\n    return url\n\n\ndef change_img_md5(path_file: Union[str, Path]) -> bool:\n    \"\"\"\n    说明:\n        改变图片MD5\n    参数:\n    :param path_file: 图片路径\n    \"\"\"\n    try:\n        with open(path_file, \"a\") as f:\n            f.write(str(int(time.time() * 1000)))\n        return True\n    except Exception as e:\n        logger.warning(f\"改变图片MD5发生错误 {type(e)}：{e} Path：{path_file}\")\n        return False\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/utils.py b/utils/utils.py
--- a/utils/utils.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/utils/utils.py	(date 1663665690887)
@@ -238,6 +238,25 @@
     return img_list
 
 
+def get_message_face(data: Union[str, Message]) -> List[str]:
+    """
+    说明:
+        获取消息中所有的 face Id
+    参数:
+        :param data: event.json()
+    """
+    face_list = []
+    if isinstance(data, str):
+        data = json.loads(data)
+        for msg in data["message"]:
+            if msg["type"] == "face":
+                face_list.append(msg["data"]["id"])
+    else:
+        for seg in data["face"]:
+            face_list.append(seg.data["id"])
+    return face_list
+
+
 def get_message_img_file(data: Union[str, Message]) -> List[str]:
     """
     说明:
Index: plugins/genshin/query_user/query_role/data_source.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/query_role/data_source.py b/plugins/genshin/query_user/query_role/data_source.py
new file mode 100644
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_user/query_role/data_source.py	(date 1663666724604)
@@ -0,0 +1,251 @@
+from typing import Optional, List, Dict, Union
+from .draw_image import init_image, get_genshin_image
+from nonebot.adapters.onebot.v11 import MessageSegment
+from .._utils import get_ds, element_mastery
+from services.log import logger
+from utils.http_utils import AsyncHttpx
+from configs.config import Config
+from .._models import Genshin
+
+try:
+    import ujson as json
+except ModuleNotFoundError:
+    import json
+
+
+async def query_role_data(
+    user_id: int, uid: int, mys_id: Optional[str] = None, nickname: Optional[str] = None
+) -> Optional[Union[MessageSegment, str]]:
+    uid = str(uid)
+    if uid[0] == "1" or uid[0] == "2":
+        server_id = "cn_gf01"
+    elif uid[0] == "5":
+        server_id = "cn_qd01"
+    else:
+        return None
+    return await get_image(user_id, uid, server_id, mys_id, nickname)
+
+
+async def get_image(
+    user_id: int,
+    uid: str,
+    server_id: str,
+    mys_id: Optional[str] = None,
+    nickname: Optional[str] = None,
+) -> Optional[Union[MessageSegment, str]]:
+    """
+    生成图片
+    :param user_id：用户qq
+    :param uid: 用户uid
+    :param server_id: 服务器
+    :param mys_id: 米游社id
+    :param nickname: QQ昵称
+    :return:
+    """
+    data, code = await get_info(uid, server_id)
+    if code != 200:
+        return data
+    if data:
+        char_data_list, role_data, world_data_dict, home_data_list = parsed_data(data)
+        mys_data = await get_mys_data(uid, mys_id)
+        if mys_data:
+            nickname = None
+        if char_data_list:
+            char_detailed_data = await get_character(
+                uid, [x["id"] for x in char_data_list], server_id
+            )
+            _x = {}
+            if char_detailed_data:
+                for char in char_detailed_data["avatars"]:
+                    _x[char["name"]] = {
+                        "weapon": char["weapon"]["name"],
+                        "weapon_image": char["weapon"]["icon"],
+                        "level": char["weapon"]["level"],
+                        "affix_level": char["weapon"]["affix_level"],
+                    }
+
+            await init_image(world_data_dict, char_data_list, _x, home_data_list)
+            return await get_genshin_image(
+                user_id,
+                uid,
+                char_data_list,
+                role_data,
+                world_data_dict,
+                home_data_list,
+                _x,
+                mys_data,
+                nickname,
+            )
+    return "未找到用户数据..."
+
+
+# Github-@lulu666lulu https://github.com/Azure99/GenshinPlayerQuery/issues/20
+"""
+{body:"",query:{"action_ticket": undefined, "game_biz": "hk4e_cn”}}
+对应 https://api-takumi.mihoyo.com/binding/api/getUserGameRolesByCookie?game_biz=hk4e_cn //查询米哈游账号下绑定的游戏(game_biz可留空)
+{body:"",query:{"uid": 12345(被查询账号米哈游uid)}}
+对应 https://api-takumi.mihoyo.com/game_record/app/card/wapi/getGameRecordCard?uid=
+{body:"",query:{'role_id': '查询账号的uid(游戏里的)' ,'server': '游戏服务器'}}
+对应 https://api-takumi.mihoyo.com/game_record/app/genshin/api/index?server= server信息 &role_id= 游戏uid
+{body:"",query:{'role_id': '查询账号的uid(游戏里的)' , 'schedule_type': 1(我这边只看到出现过1和2), 'server': 'cn_gf01'}}
+对应 https://api-takumi.mihoyo.com/game_record/app/genshin/api/spiralAbyss?schedule_type=1&server= server信息 &role_id= 游戏uid
+{body:"",query:{game_id: 2(目前我知道有崩坏3是1原神是2)}}
+对应 https://api-takumi.mihoyo.com/game_record/app/card/wapi/getAnnouncement?game_id=    这个是公告api
+b=body q=query
+其中b只在post的时候有内容，q只在get的时候有内容
+"""
+
+
+async def get_info(uid_: str, server_id: str) -> "Optional[Union[dict, str]], int":
+    try:
+        req = await AsyncHttpx.get(
+            url=f"https://api-takumi-record.mihoyo.com/game_record/app/genshin/api/index?server={server_id}&role_id={uid_}",
+            headers={
+                "Accept": "application/json, text/plain, */*",
+                "DS": get_ds(f"role_id={uid_}&server={server_id}"),
+                "Origin": "https://webstatic.mihoyo.com",
+                "x-rpc-app_version": Config.get_config("genshin", "mhyVersion"),
+                "User-Agent": "Mozilla/5.0 (Linux; Android 9; Unspecified Device) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/39.0.0.0 Mobile Safari/537.36 miHoYoBBS/2.2.0",
+                "x-rpc-client_type": Config.get_config("genshin", "client_type"),
+                "Referer": "https://webstatic.mihoyo.com/app/community-game-records/index.html?v=6",
+                "Accept-Encoding": "gzip, deflate",
+                "Accept-Language": "zh-CN,en-US;q=0.8",
+                "X-Requested-With": "com.mihoyo.hyperion",
+                "Cookie": await Genshin.get_user_cookie(int(uid_))
+            },
+        )
+        data = req.json()
+        if data["message"] == "OK":
+            return data["data"], 200
+        return data["message"], 999
+    except Exception as e:
+        logger.error(f"访问失败，请重试！ {type(e)}: {e}")
+    return None, -1
+
+
+async def get_character(
+    uid: str, character_ids: List[str], server_id="cn_gf01"
+) -> Optional[dict]:
+    try:
+        req = await AsyncHttpx.post(
+            url="https://api-takumi-record.mihoyo.com/game_record/app/genshin/api/character",
+            headers={
+                "Accept": "application/json, text/plain, */*",
+                "DS": get_ds(
+                    "",
+                    {
+                        "character_ids": character_ids,
+                        "role_id": uid,
+                        "server": server_id,
+                    },
+                ),
+                "Origin": "https://webstatic.mihoyo.com",
+                "Cookie": await Genshin.get_user_cookie(int(uid)),
+                "x-rpc-app_version": Config.get_config("genshin", "mhyVersion"),
+                "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) miHoYoBBS/2.11.1",
+                "x-rpc-client_type": "5",
+                "Referer": "https://webstatic.mihoyo.com/",
+                "Accept-Encoding": "gzip, deflate",
+                "Accept-Language": "zh-CN,en-US;q=0.8",
+                "X-Requested-With": "com.mihoyo.hyperion",
+            },
+            json={"character_ids": character_ids, "role_id": uid, "server": server_id},
+        )
+        data = req.json()
+        if data["message"] == "OK":
+            return data["data"]
+    except Exception as e:
+        logger.error(f"访问失败，请重试！ {type(e)}: {e}")
+    return None
+
+
+def parsed_data(
+    data: dict,
+) -> "Optional[List[Dict[str, str]]], Dict[str, str], Optional[List[Dict[str, str]]], Optional[List[Dict[str, str]]]":
+    """
+    解析数据
+    :param data: 数据
+    """
+    char_data_list = []
+    for char in data["avatars"]:
+        _x = {
+            "id": char["id"],
+            "image": char["image"],
+            "name": char["name"],
+            "element": element_mastery[char["element"].lower()],
+            "fetter": char["fetter"],
+            "level": char["level"],
+            "rarity": char["rarity"],
+            "actived_constellation_num": char["actived_constellation_num"],
+        }
+        char_data_list.append(_x)
+    role_data = {
+        "active_day_number": data["stats"]["active_day_number"],  # 活跃天数
+        "achievement_number": data["stats"]["achievement_number"],  # 达成成就数量
+        # "win_rate": data["stats"]["win_rate"],
+        "anemoculus_number": data["stats"]["anemoculus_number"],  # 风神瞳已收集
+        "geoculus_number": data["stats"]["geoculus_number"],  # 岩神瞳已收集
+        "avatar_number": data["stats"]["avatar_number"],  # 获得角色数量
+        "way_point_number": data["stats"]["way_point_number"],  # 传送点已解锁
+        "domain_number": data["stats"]["domain_number"],  # 秘境解锁数量
+        "spiral_abyss": data["stats"]["spiral_abyss"],  # 深渊当期进度
+        "precious_chest_number": data["stats"]["precious_chest_number"],  # 珍贵宝箱
+        "luxurious_chest_number": data["stats"]["luxurious_chest_number"],  # 华丽宝箱
+        "exquisite_chest_number": data["stats"]["exquisite_chest_number"],  # 精致宝箱
+        "magic_chest_number": data["stats"]["magic_chest_number"],  # 奇馈宝箱
+        "common_chest_number": data["stats"]["common_chest_number"],  # 普通宝箱
+        "electroculus_number": data["stats"]["electroculus_number"],  # 雷神瞳已收集
+        "dendroculus_number": data["stats"]["dendroculus_number"],  # 草神瞳已收集
+    }
+    world_data_dict = {}
+    for world in data["world_explorations"]:
+        _x = {
+            "level": world["level"],  # 声望等级
+            "exploration_percentage": world["exploration_percentage"],  # 探索进度
+            "image": world["icon"],
+            "name": world["name"],
+            "offerings": world["offerings"],
+            "icon": world["icon"]
+        }
+        world_data_dict[world["name"]] = _x
+    home_data_list = []
+    for home in data["homes"]:
+        _x = {
+            "level": home["level"],  # 最大信任等级
+            "visit_num": home["visit_num"],  # 最高历史访客数
+            "comfort_num": home["comfort_num"],  # 最高洞天仙力
+            "item_num": home["item_num"],  # 已获得摆件数量
+            "name": home["name"],
+            "icon": home["icon"],
+            "comfort_level_name": home["comfort_level_name"],
+            "comfort_level_icon": home["comfort_level_icon"],
+        }
+        home_data_list.append(_x)
+    return char_data_list, role_data, world_data_dict, home_data_list
+
+
+async def get_mys_data(uid: str, mys_id: Optional[str]) -> Optional[List[Dict]]:
+    """
+    获取用户米游社数据
+    :param uid: 原神uid
+    :param mys_id: 米游社id
+    """
+    if mys_id:
+        try:
+            req = await AsyncHttpx.get(
+                url=f"https://api-takumi-record.mihoyo.com/game_record/card/wapi/getGameRecordCard?uid={mys_id}",
+                headers={
+                    "DS": get_ds(f"uid={mys_id}"),
+                    "x-rpc-app_version": Config.get_config("genshin", "mhyVersion"),
+                    "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) miHoYoBBS/2.11.1",
+                    "x-rpc-client_type": "5",
+                    "Referer": "https://webstatic.mihoyo.com/",
+                    "Cookie": await Genshin.get_user_cookie(int(uid))
+                },
+            )
+            data = req.json()
+            if data["message"] == "OK":
+                return data["data"]["list"]
+        except Exception as e:
+            logger.error(f"访问失败，请重试！ {type(e)}: {e}")
+    return None
Index: plugins/fudu.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from nonebot.adapters.onebot.v11.permission import GROUP\r\nfrom configs.path_config import TEMP_PATH\r\nfrom utils.image_utils import get_img_hash\r\nimport random\r\nfrom utils.message_builder import image\r\nfrom nonebot import on_message\r\nfrom utils.utils import get_message_img, get_message_text\r\nfrom nonebot.adapters.onebot.v11 import GroupMessageEvent\r\nfrom configs.config import Config\r\nfrom utils.http_utils import AsyncHttpx\r\nfrom services.log import logger\r\nfrom configs.config import NICKNAME\r\n\r\n\r\n__zx_plugin_name__ = \"复读\"\r\n__plugin_usage__ = \"\"\"\r\nusage：\r\n    重复3次相同的消息时会复读\r\n\"\"\".strip()\r\n__plugin_des__ = \"群友的本质是什么？是复读机哒！\"\r\n__plugin_type__ = (\"其他\",)\r\n__plugin_version__ = 0.1\r\n__plugin_author__ = \"HibiKier\"\r\n__plugin_task__ = {\"fudu\": \"复读\"}\r\n__plugin_configs__ = {\r\n    \"FUDU_PROBABILITY\": {\"value\": 0.7, \"help\": \"复读概率\", \"default_value\": 0.7}\r\n}\r\nConfig.add_plugin_config(\r\n    \"_task\",\r\n    \"DEFAULT_FUDU\",\r\n    True,\r\n    help_=\"被动 复读 进群默认开关状态\",\r\n    default_value=True,\r\n)\r\n\r\n\r\nclass Fudu:\r\n    def __init__(self):\r\n        self.data = {}\r\n\r\n    def append(self, key, content):\r\n        self._create(key)\r\n        self.data[key][\"data\"].append(content)\r\n\r\n    def clear(self, key):\r\n        self._create(key)\r\n        self.data[key][\"data\"] = []\r\n        self.data[key][\"is_repeater\"] = False\r\n\r\n    def size(self, key) -> int:\r\n        self._create(key)\r\n        return len(self.data[key][\"data\"])\r\n\r\n    def check(self, key, content) -> bool:\r\n        self._create(key)\r\n        return self.data[key][\"data\"][0] == content\r\n\r\n    def get(self, key):\r\n        self._create(key)\r\n        return self.data[key][\"data\"][0]\r\n\r\n    def is_repeater(self, key):\r\n        self._create(key)\r\n        return self.data[key][\"is_repeater\"]\r\n\r\n    def set_repeater(self, key):\r\n        self._create(key)\r\n        self.data[key][\"is_repeater\"] = True\r\n\r\n    def _create(self, key):\r\n        if self.data.get(key) is None:\r\n            self.data[key] = {\"is_repeater\": False, \"data\": []}\r\n\r\n\r\n_fudu_list = Fudu()\r\n\r\n\r\nfudu = on_message(permission=GROUP, priority=999)\r\n\r\n\r\n@fudu.handle()\r\nasync def _(event: GroupMessageEvent):\r\n    if event.is_tome():\r\n        return\r\n    if msg := get_message_text(event.json()):\r\n        if msg.startswith(f\"@可爱的{NICKNAME}\"):\r\n            await fudu.finish(\"复制粘贴的虚空艾特？\", at_sender=True)\r\n    img = get_message_img(event.json())\r\n    msg = get_message_text(event.json())\r\n    if not img and not msg:\r\n        return\r\n    if img:\r\n        img_hash = await get_fudu_img_hash(img[0], event.group_id)\r\n    else:\r\n        img_hash = \"\"\r\n    add_msg = msg + \"|-|\" + img_hash\r\n    if _fudu_list.size(event.group_id) == 0:\r\n        _fudu_list.append(event.group_id, add_msg)\r\n    elif _fudu_list.check(event.group_id, add_msg):\r\n        _fudu_list.append(event.group_id, add_msg)\r\n    else:\r\n        _fudu_list.clear(event.group_id)\r\n        _fudu_list.append(event.group_id, add_msg)\r\n    if _fudu_list.size(event.group_id) > 2:\r\n        if random.random() < Config.get_config(\r\n            \"fudu\", \"FUDU_PROBABILITY\"\r\n        ) and not _fudu_list.is_repeater(event.group_id):\r\n            if random.random() < 0.2:\r\n                if msg.endswith(\"打断施法！\"):\r\n                    await fudu.finish(\"[[_task|fudu]]打断\" + msg)        \r\n                else:\r\n                    await fudu.finish(\"[[_task|fudu]]打断施法！\")\r\n            _fudu_list.set_repeater(event.group_id)\r\n            if img and msg:\r\n                rst = msg + image(TEMP_PATH / f\"compare_{event.group_id}_img.jpg\")\r\n            elif img:\r\n                rst = image(TEMP_PATH / f\"compare_{event.group_id}_img.jpg\")\r\n            elif msg:\r\n                rst = msg\r\n            else:\r\n                rst = \"\"\r\n            if rst:\r\n                await fudu.finish(\"[[_task|fudu]]\" + rst)\r\n\r\n\r\nasync def get_fudu_img_hash(url, group_id):\r\n    try:\r\n        if await AsyncHttpx.download_file(\r\n            url, TEMP_PATH / f\"compare_{group_id}_img.jpg\"\r\n        ):\r\n            img_hash = get_img_hash(TEMP_PATH / f\"compare_{group_id}_img.jpg\")\r\n            return str(img_hash)\r\n        else:\r\n            logger.warning(f\"复读下载图片失败...\")\r\n    except Exception as e:\r\n        logger.warning(f\"复读读取图片Hash出错 {type(e)}：{e}\")\r\n    return \"\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/fudu.py b/plugins/fudu.py
--- a/plugins/fudu.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/fudu.py	(date 1663665690883)
@@ -1,6 +1,8 @@
+from io import BytesIO
+import imagehash
+from PIL import Image
 from nonebot.adapters.onebot.v11.permission import GROUP
 from configs.path_config import TEMP_PATH
-from utils.image_utils import get_img_hash
 import random
 from utils.message_builder import image
 from nonebot import on_message
@@ -8,7 +10,6 @@
 from nonebot.adapters.onebot.v11 import GroupMessageEvent
 from configs.config import Config
 from utils.http_utils import AsyncHttpx
-from services.log import logger
 from configs.config import NICKNAME
 
 
@@ -90,7 +91,7 @@
     if not img and not msg:
         return
     if img:
-        img_hash = await get_fudu_img_hash(img[0], event.group_id)
+        img_hash = await get_fudu_img_hash(img[0])
     else:
         img_hash = ""
     add_msg = msg + "|-|" + img_hash
@@ -123,15 +124,5 @@
                 await fudu.finish("[[_task|fudu]]" + rst)
 
 
-async def get_fudu_img_hash(url, group_id):
-    try:
-        if await AsyncHttpx.download_file(
-            url, TEMP_PATH / f"compare_{group_id}_img.jpg"
-        ):
-            img_hash = get_img_hash(TEMP_PATH / f"compare_{group_id}_img.jpg")
-            return str(img_hash)
-        else:
-            logger.warning(f"复读下载图片失败...")
-    except Exception as e:
-        logger.warning(f"复读读取图片Hash出错 {type(e)}：{e}")
-    return ""
+async def get_fudu_img_hash(url):
+    return str(imagehash.average_hash(Image.open(BytesIO((await AsyncHttpx.get(url)).content))))
Index: plugins/word_bank/message_handle.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from utils.message_builder import image, at, face\nfrom typing import Tuple\nfrom ._rule import check\nfrom .model import WordBank\nfrom configs.path_config import DATA_PATH\nfrom nonebot.adapters.onebot.v11 import GroupMessageEvent\nfrom utils.utils import get_message_at, get_message_img, change_img_md5\nfrom nonebot import on_message\nfrom models.group_member_info import GroupInfoUser\nfrom utils.utils import get_message_img_file, is_number\nimport re\n\n__zx_plugin_name__ = \"词库问答回复操作 [Hidden]\"\n\ndata_dir = DATA_PATH / \"word_bank\"\ndata_dir.mkdir(parents=True, exist_ok=True)\n\nmessage_handle = on_message(priority=6, block=True, rule=check)\n\n\n@message_handle.handle()\nasync def _(event: GroupMessageEvent):\n    msg = event.raw_message\n    list_img = get_message_img_file(event.json())\n    if list_img:\n        for img_file in list_img:\n            strinfo = re.compile(f\"{img_file},.*?]\")\n            msg = strinfo.sub(f'{img_file}]', msg)\n    strinfo_face = re.compile(f\",type=sticker]\")\n    msg = strinfo_face.sub(f']', msg)\n    q = await WordBank.check(event.group_id, msg, )\n    await message_handle.send(await get_one_answer(event, q.format, q.answer))\n\n\n# 处理单条回答\nasync def get_one_answer(event, format: str, _answer: str, all: bool = True) -> str:\n    path = data_dir / f\"{event.group_id}\"\n    placeholder_list = (\n        [\n            (x.split(\"<_s>\")[0], x.split(\"<_s>\")[1])\n            for x in format.split(\"<format>\")[:-1]\n        ]\n        if format\n        else []\n    )\n    answer = \"\"\n    _a = _answer\n    if not placeholder_list:\n        answer = _a\n        return answer\n    else:\n        for idx, placeholder in placeholder_list:\n            if placeholder.endswith(\"jpg\"):\n                change_img_md5(path / placeholder)\n                answer += _a[: _a.find(f\"[__placeholder_{idx}]\")] + image(\n                    path / placeholder\n                )\n            else:\n                if all:\n                    answer += _a[: _a.find(f\"[__placeholder_{idx}]\")] + at(int(placeholder))\n                else:\n                    q = await GroupInfoUser.get_member_info(\n                        int(placeholder), event.group_id)\n                    answer += _a[: _a.find(f\"[__placeholder_{idx}]\")] + \"@\" + q.user_name\n            _a = _a[_a.find(f\"[__placeholder_{idx}]\") + len(f\"[__placeholder_{idx}]\"):]\n    return answer + _a\n\n\n# 处理单条问题\nasync def get_one_problem(event, problem: str, ) -> Tuple[str, str]:\n    strinfo = re.compile(f\",subType=\\d\")\n    problem = strinfo.sub('', problem)\n    _problem = problem\n    _p = problem\n    problem = ''\n    for img in get_message_img(event.json()):\n        _x = img.split(\"?\")[0]\n        r = re.search(rf\"\\[CQ:image,file=(.*),url={_x}.*?]\", _p)\n        if r:\n            _problem = _problem.replace(\n                rf\",url={img}\",\n                f\"\",\n            )\n            problem += _p[: _p.find(f\"[CQ:image,file={r.group(1)},url={img}]\")] + image(img)\n            _p = _p[\n                 _p.find(f\"[CQ:image,file={r.group(1)},url={img}]\") + len(f\"[CQ:image,file={r.group(1)},url={img}]\"):]\n    for at_ in get_message_at(event.json()):\n        r = re.search(rf\"\\[CQ:at,qq={at_}]\", problem)\n        if r:\n            q = await GroupInfoUser.get_member_info(\n                int(at_), event.group_id)\n            problem += _p[: _p.find(f\"[CQ:at,qq={at_}]\")] + \"@\" + q.user_name\n            _p = _p[_p.find(f\"[CQ:at,qq={at_}]\") + len(f\"[CQ:at,qq={at_}]\"):]\n    return _problem, problem + _p\n\n\n# 显示单条数据库问题\nasync def get_one_image_problem(event, problem: str) -> str:\n    path = data_dir / f\"{event.group_id}\" / \"problem\"\n    placeholder_list = []\n    idx = 0\n    img_list = re.findall(rf\"\\[CQ:image,file=(.*?)]\", problem)\n    at_list = re.findall(rf\"\\[CQ:at,qq=(.*?)]\", problem)\n    if img_list:\n        for img in img_list:\n            problem = problem.replace(f'[CQ:image,file={img}]', f'[__placeholder_{idx}]', 1)\n            placeholder_list.append([idx, img])\n            idx += 1\n    if at_list:\n        for ats in at_list:\n            problem = problem.replace(f'[CQ:at,qq={ats}]', f'[__placeholder_{idx}]', 1)\n            placeholder_list.append([idx, ats])\n            idx += 1\n    _p = problem\n    problem = ''\n    if not placeholder_list:\n        problem = _p\n        return problem\n    else:\n        for idx, placeholder in placeholder_list:\n            if is_number(placeholder):\n                q = await GroupInfoUser.get_member_info(\n                    int(placeholder), event.group_id)\n                problem += _p[: _p.find(f\"[__placeholder_{idx}]\")] + \"@\" + q.user_name\n            else:\n                problem += _p[: _p.find(f\"[__placeholder_{idx}]\")] + image(\n                    path / f\"{placeholder}.jpg\"\n                )\n            _p = _p[_p.find(f\"[__placeholder_{idx}]\") + len(f\"[__placeholder_{idx}]\"):]\n\n    return problem + _p\n\n\n# 替换cq码\nasync def replace_cq(group_id, msg: str, is_face: bool = True) -> str:\n    strinfo_img = re.compile(f\"\\[CQ:image.*?]\")\n    msg = strinfo_img.sub('[图片]', msg)\n    at_list = re.findall(rf\"\\[CQ:at,qq=(.*?)]\", msg)\n    if at_list:\n        for ats in at_list:\n            q = await GroupInfoUser.get_member_info(\n                int(ats), group_id)\n            msg = msg.replace(f'[CQ:at,qq={ats}]', \"@\" + q.user_name)\n    if is_face:\n        strinfo_face = re.compile(f\"\\[CQ:face,id=.*?]\")\n        msg = strinfo_face.sub('[表情]', msg)\n    return msg\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/word_bank/message_handle.py b/plugins/word_bank/message_handle.py
--- a/plugins/word_bank/message_handle.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/word_bank/message_handle.py	(date 1663665690887)
@@ -1,14 +1,10 @@
-from utils.message_builder import image, at, face
-from typing import Tuple
+from services import logger
 from ._rule import check
-from .model import WordBank
+from ._model import WordBank
 from configs.path_config import DATA_PATH
-from nonebot.adapters.onebot.v11 import GroupMessageEvent
-from utils.utils import get_message_at, get_message_img, change_img_md5
+from nonebot.adapters.onebot.v11 import GroupMessageEvent, MessageEvent
 from nonebot import on_message
-from models.group_member_info import GroupInfoUser
-from utils.utils import get_message_img_file, is_number
-import re
+from nonebot.typing import T_State
 
 __zx_plugin_name__ = "词库问答回复操作 [Hidden]"
 
@@ -19,129 +15,12 @@
 
 
 @message_handle.handle()
-async def _(event: GroupMessageEvent):
-    msg = event.raw_message
-    list_img = get_message_img_file(event.json())
-    if list_img:
-        for img_file in list_img:
-            strinfo = re.compile(f"{img_file},.*?]")
-            msg = strinfo.sub(f'{img_file}]', msg)
-    strinfo_face = re.compile(f",type=sticker]")
-    msg = strinfo_face.sub(f']', msg)
-    q = await WordBank.check(event.group_id, msg, )
-    await message_handle.send(await get_one_answer(event, q.format, q.answer))
-
-
-# 处理单条回答
-async def get_one_answer(event, format: str, _answer: str, all: bool = True) -> str:
-    path = data_dir / f"{event.group_id}"
-    placeholder_list = (
-        [
-            (x.split("<_s>")[0], x.split("<_s>")[1])
-            for x in format.split("<format>")[:-1]
-        ]
-        if format
-        else []
-    )
-    answer = ""
-    _a = _answer
-    if not placeholder_list:
-        answer = _a
-        return answer
-    else:
-        for idx, placeholder in placeholder_list:
-            if placeholder.endswith("jpg"):
-                change_img_md5(path / placeholder)
-                answer += _a[: _a.find(f"[__placeholder_{idx}]")] + image(
-                    path / placeholder
-                )
-            else:
-                if all:
-                    answer += _a[: _a.find(f"[__placeholder_{idx}]")] + at(int(placeholder))
-                else:
-                    q = await GroupInfoUser.get_member_info(
-                        int(placeholder), event.group_id)
-                    answer += _a[: _a.find(f"[__placeholder_{idx}]")] + "@" + q.user_name
-            _a = _a[_a.find(f"[__placeholder_{idx}]") + len(f"[__placeholder_{idx}]"):]
-    return answer + _a
-
-
-# 处理单条问题
-async def get_one_problem(event, problem: str, ) -> Tuple[str, str]:
-    strinfo = re.compile(f",subType=\d")
-    problem = strinfo.sub('', problem)
-    _problem = problem
-    _p = problem
-    problem = ''
-    for img in get_message_img(event.json()):
-        _x = img.split("?")[0]
-        r = re.search(rf"\[CQ:image,file=(.*),url={_x}.*?]", _p)
-        if r:
-            _problem = _problem.replace(
-                rf",url={img}",
-                f"",
+async def _(event: MessageEvent, state: T_State):
+    if problem := state.get("problem"):
+        if msg := await WordBank.get_answer(event, problem):
+            await message_handle.send(msg)
+            logger.info(
+                f"(USER {event.user_id}, GROUP "
+                f"{event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+                f" 触发词条 {problem}"
             )
-            problem += _p[: _p.find(f"[CQ:image,file={r.group(1)},url={img}]")] + image(img)
-            _p = _p[
-                 _p.find(f"[CQ:image,file={r.group(1)},url={img}]") + len(f"[CQ:image,file={r.group(1)},url={img}]"):]
-    for at_ in get_message_at(event.json()):
-        r = re.search(rf"\[CQ:at,qq={at_}]", problem)
-        if r:
-            q = await GroupInfoUser.get_member_info(
-                int(at_), event.group_id)
-            problem += _p[: _p.find(f"[CQ:at,qq={at_}]")] + "@" + q.user_name
-            _p = _p[_p.find(f"[CQ:at,qq={at_}]") + len(f"[CQ:at,qq={at_}]"):]
-    return _problem, problem + _p
-
-
-# 显示单条数据库问题
-async def get_one_image_problem(event, problem: str) -> str:
-    path = data_dir / f"{event.group_id}" / "problem"
-    placeholder_list = []
-    idx = 0
-    img_list = re.findall(rf"\[CQ:image,file=(.*?)]", problem)
-    at_list = re.findall(rf"\[CQ:at,qq=(.*?)]", problem)
-    if img_list:
-        for img in img_list:
-            problem = problem.replace(f'[CQ:image,file={img}]', f'[__placeholder_{idx}]', 1)
-            placeholder_list.append([idx, img])
-            idx += 1
-    if at_list:
-        for ats in at_list:
-            problem = problem.replace(f'[CQ:at,qq={ats}]', f'[__placeholder_{idx}]', 1)
-            placeholder_list.append([idx, ats])
-            idx += 1
-    _p = problem
-    problem = ''
-    if not placeholder_list:
-        problem = _p
-        return problem
-    else:
-        for idx, placeholder in placeholder_list:
-            if is_number(placeholder):
-                q = await GroupInfoUser.get_member_info(
-                    int(placeholder), event.group_id)
-                problem += _p[: _p.find(f"[__placeholder_{idx}]")] + "@" + q.user_name
-            else:
-                problem += _p[: _p.find(f"[__placeholder_{idx}]")] + image(
-                    path / f"{placeholder}.jpg"
-                )
-            _p = _p[_p.find(f"[__placeholder_{idx}]") + len(f"[__placeholder_{idx}]"):]
-
-    return problem + _p
-
-
-# 替换cq码
-async def replace_cq(group_id, msg: str, is_face: bool = True) -> str:
-    strinfo_img = re.compile(f"\[CQ:image.*?]")
-    msg = strinfo_img.sub('[图片]', msg)
-    at_list = re.findall(rf"\[CQ:at,qq=(.*?)]", msg)
-    if at_list:
-        for ats in at_list:
-            q = await GroupInfoUser.get_member_info(
-                int(ats), group_id)
-            msg = msg.replace(f'[CQ:at,qq={ats}]', "@" + q.user_name)
-    if is_face:
-        strinfo_face = re.compile(f"\[CQ:face,id=.*?]")
-        msg = strinfo_face.sub('[表情]', msg)
-    return msg
Index: basic_plugins/init_plugin_config/init_none_plugin_count_manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from utils.manager import (\r\n    none_plugin_count_manager,\r\n    plugins2count_manager,\r\n    plugins2cd_manager,\r\n    plugins2settings_manager,\r\n    plugins2block_manager,\r\n    plugins_manager,\r\n    resources_manager\r\n)\r\nfrom services.log import logger\r\nfrom utils.utils import get_matchers\r\n\r\ntry:\r\n    import ujson as json\r\nexcept ModuleNotFoundError:\r\n    import json\r\n\r\n\r\ndef init_none_plugin_count_manager():\r\n    \"\"\"\r\n    清除已删除插件数据\r\n    \"\"\"\r\n    modules = [x.plugin_name for x in get_matchers()]\r\n    plugins_manager_list = list(plugins_manager.keys())\r\n    for module in plugins_manager_list:\r\n        if module not in modules or none_plugin_count_manager.check(module):\r\n            try:\r\n                plugin_name = plugins_manager.get(module)[\"plugin_name\"]\r\n            except (AttributeError, KeyError):\r\n                plugin_name = \"\"\r\n            if none_plugin_count_manager.check(module):\r\n                try:\r\n                    plugins2settings_manager.delete(module)\r\n                    plugins2settings_manager.save()\r\n                    plugins2count_manager.delete(module)\r\n                    plugins2count_manager.save()\r\n                    plugins2cd_manager.delete(module)\r\n                    plugins2cd_manager.save()\r\n                    plugins2block_manager.delete(module)\r\n                    plugins2block_manager.save()\r\n                    plugins_manager.delete(module)\r\n                    plugins_manager.save()\r\n                    # resources_manager.remove_resource(module)\r\n                    none_plugin_count_manager.delete(module)\r\n                    logger.info(f\"{module}:{plugin_name} 插件疑似已删除，清除对应插件数据...\")\r\n                except Exception as e:\r\n                    logger.exception(\r\n                        f\"{module}:{plugin_name} 插件疑似已删除，清除对应插件数据失败...{type(e)}：{e}\")\r\n            else:\r\n                none_plugin_count_manager.add_count(module)\r\n                logger.info(\r\n                    f\"{module}:{plugin_name} 插件疑似已删除，加载{none_plugin_count_manager._max_count}次失败后将清除对应插件数据，当前次数：{none_plugin_count_manager._data[module]}\")\r\n        else:\r\n            none_plugin_count_manager.reset(module)\r\n    none_plugin_count_manager.save()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic_plugins/init_plugin_config/init_none_plugin_count_manager.py b/basic_plugins/init_plugin_config/init_none_plugin_count_manager.py
--- a/basic_plugins/init_plugin_config/init_none_plugin_count_manager.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/basic_plugins/init_plugin_config/init_none_plugin_count_manager.py	(date 1663665690883)
@@ -5,7 +5,6 @@
     plugins2settings_manager,
     plugins2block_manager,
     plugins_manager,
-    resources_manager
 )
 from services.log import logger
 from utils.utils import get_matchers
Index: plugins/bilibili_sub/data_source.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/bilibili_sub/data_source.py b/plugins/bilibili_sub/data_source.py
new file mode 100755
--- /dev/null	(date 1663666724600)
+++ b/plugins/bilibili_sub/data_source.py	(date 1663666724600)
@@ -0,0 +1,432 @@
+from bilireq.exceptions import ResponseCodeError
+from nonebot.adapters.onebot.v11 import MessageSegment
+
+from utils.manager import resources_manager
+from asyncio.exceptions import TimeoutError
+
+from utils.utils import get_bot
+from .model import BilibiliSub
+from bilireq.live import get_room_info_by_id
+from .utils import get_meta, get_user_card
+from utils.message_builder import image
+from bilireq.user import get_user_info
+from bilireq import dynamic
+from .utils import get_videos
+from typing import Optional, Tuple
+from configs.path_config import IMAGE_PATH
+from datetime import datetime
+from utils.browser import get_browser
+from services.db_context import db
+from services.log import logger
+from utils.http_utils import AsyncHttpx
+import random
+
+
+bilibili_search_url = "https://api.bilibili.com/x/web-interface/search/all/v2"
+
+dynamic_path = IMAGE_PATH / "bilibili_sub" / "dynamic"
+dynamic_path.mkdir(exist_ok=True, parents=True)
+
+
+resources_manager.add_temp_dir(dynamic_path)
+
+
+async def add_live_sub(live_id: int, sub_user: str) -> str:
+    """
+    添加直播订阅
+    :param live_id: 直播房间号
+    :param sub_user: 订阅用户 id # 7384933:private or 7384933:2342344(group)
+    :return:
+    """
+    try:
+        try:
+            """bilibili_api.live库的LiveRoom类中get_room_info改为bilireq.live库的get_room_info_by_id方法"""
+            live_info = await get_room_info_by_id(live_id)
+        except ResponseCodeError:
+            return f"未找到房间号Id：{live_id} 的信息，请检查Id是否正确"
+        uid = live_info["uid"]
+        room_id = live_info["room_id"]
+        short_id = live_info["short_id"]
+        title = live_info["title"]
+        live_status = live_info["live_status"]
+        if await BilibiliSub.add_bilibili_sub(
+            room_id,
+            "live",
+            sub_user,
+            uid=uid,
+            live_short_id=short_id,
+            live_status=live_status,
+        ):
+            await _get_up_status(room_id)
+            uname = (await BilibiliSub.get_sub(room_id)).uname
+            return (
+                "已成功订阅主播：\n"
+                f"\ttitle：{title}\n"
+                f"\tname： {uname}\n"
+                f"\tlive_id：{room_id}\n"
+                f"\tuid：{uid}"
+                )
+        else:
+            return "添加订阅失败..."
+    except Exception as e:
+        logger.error(f"订阅主播live_id：{live_id} 发生了错误 {type(e)}：{e}")
+    return "添加订阅失败..."
+
+
+async def add_up_sub(uid: int, sub_user: str) -> str:
+    """
+    添加订阅 UP
+    :param uid: UP uid
+    :param sub_user: 订阅用户
+    """
+    try:
+        async with db.transaction():
+            try:
+                """bilibili_api.user库中User类的get_user_info改为bilireq.user库的get_user_info方法"""
+                user_info = await get_user_card(uid)
+            except ResponseCodeError:
+                return f"未找到UpId：{uid} 的信息，请检查Id是否正确"
+            uname = user_info["name"]
+            """bilibili_api.user库中User类的get_dynamics改为bilireq.dynamic库的get_user_dynamics方法"""
+            dynamic_info = await dynamic.get_user_dynamics(uid)
+            dynamic_upload_time = 0
+            if dynamic_info.get("cards"):
+                dynamic_upload_time = dynamic_info["cards"][0]["desc"]["timestamp"]
+            """bilibili_api.user库中User类的get_videos改为bilireq.user库的get_videos方法"""
+            video_info = await get_videos(uid)
+            latest_video_created = 0
+            if video_info["list"].get("vlist"):
+                latest_video_created = video_info["list"]["vlist"][0]["created"]
+            if await BilibiliSub.add_bilibili_sub(
+                uid,
+                "up",
+                sub_user,
+                uid=uid,
+                uname=uname,
+                dynamic_upload_time=dynamic_upload_time,
+                latest_video_created=latest_video_created,
+            ):
+                return "已成功订阅UP：\n" f"\tname: {uname}\n" f"\tuid：{uid}"
+            else:
+                return "添加订阅失败..."
+    except Exception as e:
+        logger.error(f"订阅Up uid：{uid} 发生了错误 {type(e)}：{e}")
+    return "添加订阅失败..."
+
+
+async def add_season_sub(media_id: int, sub_user: str) -> str:
+    """
+    添加订阅 UP
+    :param media_id: 番剧 media_id
+    :param sub_user: 订阅用户
+    """
+    try:
+        async with db.transaction():
+            try:
+                """bilibili_api.bangumi库中get_meta改为bilireq.bangumi库的get_meta方法"""
+                season_info = await get_meta(media_id)
+            except ResponseCodeError:
+                return f"未找到media_id：{media_id} 的信息，请检查Id是否正确"
+            season_id = season_info["media"]["season_id"]
+            season_current_episode = season_info["media"]["new_ep"]["index"]
+            season_name = season_info["media"]["title"]
+            if await BilibiliSub.add_bilibili_sub(
+                media_id,
+                "season",
+                sub_user,
+                season_name=season_name,
+                season_id=season_id,
+                season_current_episode=season_current_episode,
+            ):
+                return (
+                    "已成功订阅番剧：\n"
+                    f"\ttitle: {season_name}\n"
+                    f"\tcurrent_episode: {season_current_episode}"
+                )
+            else:
+                return "添加订阅失败..."
+    except Exception as e:
+        logger.error(f"订阅番剧 media_id：{media_id} 发生了错误 {type(e)}：{e}")
+    return "添加订阅失败..."
+
+
+async def delete_sub(sub_id: str, sub_user: str) -> str:
+    """
+    删除订阅
+    :param sub_id: 订阅 id
+    :param sub_user: 订阅用户 id # 7384933:private or 7384933:2342344(group)
+    """
+    if await BilibiliSub.delete_bilibili_sub(int(sub_id), sub_user):
+        return f"已成功取消订阅：{sub_id}"
+    else:
+        return f"取消订阅：{sub_id} 失败，请检查是否订阅过该Id...."
+
+
+async def get_media_id(keyword: str) -> dict:
+    """
+    获取番剧的 media_id
+    :param keyword: 番剧名称
+    """
+    params = {"keyword": keyword}
+    for _ in range(3):
+        try:
+            _season_data = {}
+            response = await AsyncHttpx.get(
+                bilibili_search_url, params=params, timeout=5
+            )
+            if response.status_code == 200:
+                data = response.json()
+                if data.get("data"):
+                    for item in data["data"]["result"]:
+                        if item["result_type"] == "media_bangumi":
+                            idx = 0
+                            for x in item["data"]:
+                                _season_data[idx] = {
+                                    "media_id": x["media_id"],
+                                    "title": x["title"]
+                                    .replace('<em class="keyword">', "")
+                                    .replace("</em>", ""),
+                                }
+                                idx += 1
+                            return _season_data
+        except TimeoutError:
+            pass
+        return {}
+
+
+async def get_sub_status(id_: int, sub_type: str) -> Optional[str]:
+    """
+    获取订阅状态
+    :param id_: 订阅 id
+    :param sub_type: 订阅类型
+    """
+    try:
+        if sub_type == "live":
+            return await _get_live_status(id_)
+        elif sub_type == "up":
+            return await _get_up_status(id_)
+        elif sub_type == "season":
+            return await _get_season_status(id_)
+    except ResponseCodeError:
+        logger.error(f"Id：{id_} 获取信息失败...请检查订阅Id是否存在或稍后再试...")
+        return None
+        # return f"Id：{id_} 获取信息失败...请检查订阅Id是否存在或稍后再试..."
+    # except Exception as e:
+    #     logger.error(f"获取订阅状态发生预料之外的错误 id_：{id_} {type(e)}：{e}")
+    #     return "发生了预料之外的错误..请稍后再试或联系管理员....."
+
+
+async def _get_live_status(id_: int) -> Optional[str]:
+    """
+    获取直播订阅状态
+    :param id_: 直播间 id
+    """
+    """bilibili_api.live库的LiveRoom类中get_room_info改为bilireq.live库的get_room_info_by_id方法"""
+    live_info = await get_room_info_by_id(id_)
+    title = live_info["title"]
+    room_id = live_info["room_id"]
+    live_status = live_info["live_status"]
+    cover = live_info["user_cover"]
+    sub = await BilibiliSub.get_sub(id_)
+    if sub.live_status != live_status:
+        await BilibiliSub.update_sub_info(id_, live_status=live_status)
+    if sub.live_status == 0 and live_status == 1:
+        return (
+            f""
+            f"{image(cover)}\n"
+            f"{sub.uname} 开播啦！\n"
+            f"标题：{title}\n"
+            f"直链：https://live.bilibili.com/{room_id}"
+        )
+    return None
+
+
+async def _get_up_status(id_: int) -> Optional[str]:
+    """
+    获取用户投稿状态
+    :param id_: 订阅 id
+    :return:
+    """
+    _user = await BilibiliSub.get_sub(id_)
+    """bilibili_api.user库中User类的get_user_info改为bilireq.user库的get_user_info方法"""
+    user_info = await get_user_card(_user.uid)
+    uname = user_info["name"]
+    """bilibili_api.user库中User类的get_videos改为bilireq.user库的get_videos方法"""
+    video_info = await get_videos(_user.uid)
+    latest_video_created = 0
+    video = None
+    dividing_line = "\n-------------\n"
+    if _user.uname != uname:
+        await BilibiliSub.update_sub_info(id_, uname=uname)
+    dynamic_img, dynamic_upload_time, link = await get_user_dynamic(_user.uid, _user)
+    if video_info["list"].get("vlist"):
+        video = video_info["list"]["vlist"][0]
+        latest_video_created = video["created"]
+    rst = ""
+    if dynamic_img:
+        await BilibiliSub.update_sub_info(id_, dynamic_upload_time=dynamic_upload_time)
+        rst += f"{uname} 发布了动态！\n" f"{dynamic_img}\n{link}"
+    if (
+        latest_video_created
+        and _user.latest_video_created
+        and video
+        and _user.latest_video_created < latest_video_created
+    ):
+        rst = rst + dividing_line if rst else rst
+        await BilibiliSub.update_sub_info(
+            id_, latest_video_created=latest_video_created
+        )
+        rst += (
+            f'{image(video["pic"])}\n'
+            f"{uname} 投稿了新视频啦\n"
+            f'标题：{video["title"]}\n'
+            f'Bvid：{video["bvid"]}\n'
+            f'直链：https://www.bilibili.com/video/{video["bvid"]}'
+        )
+    rst = None if rst == dividing_line else rst
+    return rst
+
+
+async def _get_season_status(id_) -> Optional[str]:
+    """
+    获取 番剧 更新状态
+    :param id_: 番剧 id
+    """
+    """bilibili_api.bangumi库中get_meta改为bilireq.bangumi库的get_meta方法"""
+    season_info = await get_meta(id_)
+    title = season_info["media"]["title"]
+    _idx = (await BilibiliSub.get_sub(id_)).season_current_episode
+    new_ep = season_info["media"]["new_ep"]["index"]
+    if new_ep != _idx:
+        await BilibiliSub.update_sub_info(
+            id_, season_current_episode=new_ep, season_update_time=datetime.now()
+        )
+        return (
+            f'{image(season_info["media"]["cover"])}\n'
+            f"[{title}]更新啦\n"
+            f"最新集数：{new_ep}"
+        )
+    return None
+
+
+async def get_user_dynamic(
+    uid: int, local_user: BilibiliSub
+) -> Tuple[Optional[MessageSegment], int, str]:
+    """
+    获取用户动态
+    :param uid: 用户uid
+    :param local_user: 数据库存储的用户数据
+    :return: 最新动态截图与时间
+    """
+    """bilibili_api.user库中User类的get_dynamics改为bilireq.dynamic库的get_user_dynamics方法"""
+    dynamic_info = await dynamic.get_user_dynamics(uid)
+    browser = await get_browser()
+    if dynamic_info.get("cards") and browser:
+        dynamic_upload_time = dynamic_info["cards"][0]["desc"]["timestamp"]
+        dynamic_id = dynamic_info["cards"][0]["desc"]["dynamic_id"]
+        if local_user.dynamic_upload_time < dynamic_upload_time:
+            context = await browser.new_context()
+            page = await context.new_page()
+            try:
+                await page.goto(
+                    f"https://t.bilibili.com/{dynamic_id}",
+                    wait_until="networkidle",
+                    timeout=10000,
+                )
+                # await page.set_viewport_size({"width": 2560, "height": 1080, "timeout": 10000*20}) # timeout: 200s
+                # 删除置顶
+                # await page.evaluate(
+                #     """
+                #     xs = document.getElementsByClassName('bili-dyn-item__tag');
+                #     for (x of xs) {
+                #       x.parentNode.parentNode.remove();
+                #     }
+                # """
+                # )
+                # async with page.expect_popup() as popup_info:
+                #     await page.locator(".bili-rich-text__content").click()
+                # details_page = await popup_info.value
+                await page.set_viewport_size(
+                    {"width": 2560, "height": 1080, "timeout": 10000 * 20}
+                )
+                await page.wait_for_selector(".panel-area")
+                await page.evaluate(
+                    """
+                    xs = document.getElementById('internationalHeader');
+                    xs.remove();
+                    xs = document.getElementsByClassName('panel-area')
+                    xs[0].remove();
+                """
+                )
+                card = page.locator(".detail-card")
+                await card.wait_for()
+                await card.screenshot(
+                    path=dynamic_path / f"{local_user.sub_id}_{dynamic_upload_time}.jpg",
+                )
+            except Exception as e:
+                logger.error(f"B站订阅：获取用户动态 发送错误 {type(e)}：{e}")
+            finally:
+                await context.close()
+                await page.close()
+            return (
+                image(
+                    f"{local_user.sub_id}_{dynamic_upload_time}.jpg",
+                    "bilibili_sub/dynamic",
+                ),
+                dynamic_upload_time,
+                f"https://t.bilibili.com/{dynamic_id}"
+            )
+    return None, 0, ''
+
+
+class SubManager:
+    def __init__(self):
+        self.live_data = []
+        self.up_data = []
+        self.season_data = []
+        self.current_index = -1
+
+    async def reload_sub_data(self):
+        """
+        重载数据
+        """
+        if not self.live_data or not self.up_data or not self.season_data:
+            (
+                _live_data,
+                _up_data,
+                _season_data,
+            ) = await BilibiliSub.get_all_sub_data()
+            if not self.live_data:
+                self.live_data = _live_data
+            if not self.up_data:
+                self.up_data = _up_data
+            if not self.season_data:
+                self.season_data = _season_data
+
+    async def random_sub_data(self) -> Optional[BilibiliSub]:
+        """
+        随机获取一条数据
+        :return:
+        """
+        sub = None
+        if not self.live_data and not self.up_data and not self.season_data:
+            return sub
+        self.current_index += 1
+        if self.current_index == 0:
+            if self.live_data:
+                sub = random.choice(self.live_data)
+                self.live_data.remove(sub)
+        elif self.current_index == 1:
+            if self.up_data:
+                sub = random.choice(self.up_data)
+                self.up_data.remove(sub)
+        elif self.current_index == 2:
+            if self.season_data:
+                sub = random.choice(self.season_data)
+                self.season_data.remove(sub)
+        else:
+            self.current_index = -1
+        if sub:
+            return sub
+        await self.reload_sub_data()
+        return await self.random_sub_data()
Index: plugins/genshin/query_resource_points/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_resource_points/__init__.py b/plugins/genshin/query_resource_points/__init__.py
new file mode 100755
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_resource_points/__init__.py	(date 1663666724604)
@@ -0,0 +1,131 @@
+from nonebot import on_command, on_regex
+from .query_resource import get_resource_type_list, query_resource, init, check_resource_exists
+from nonebot.adapters.onebot.v11 import Bot, MessageEvent, GroupMessageEvent, Message
+from utils.utils import scheduler
+from services.log import logger
+from configs.config import NICKNAME
+from nonebot.permission import SUPERUSER
+from nonebot.params import CommandArg
+import re
+
+try:
+    import ujson as json
+except ModuleNotFoundError:
+    import json
+
+__zx_plugin_name__ = "原神资源查询"
+__plugin_usage__ = """
+usage：
+    不需要打开网页，就能帮你生成资源图片
+    指令：
+        原神资源查询 [资源名称]
+        原神资源列表
+        [资源名称]在哪
+        哪有[资源名称]
+""".strip()
+__plugin_superuser_usage__ = """
+usage：
+    更新原神资源信息
+    指令：
+        更新原神资源信息
+""".strip()
+__plugin_des__ = "原神大地图资源速速查看"
+__plugin_cmd__ = ["原神资源查询 [资源名称]", "原神资源列表", "[资源名称]在哪/哪有[资源名称]", "更新原神资源信息 [_superuser]"]
+__plugin_type__ = ("原神相关",)
+__plugin_version__ = 0.1
+__plugin_author__ = "HibiKier"
+__plugin_settings__ = {
+    "level": 5,
+    "default_status": True,
+    "limit_superuser": False,
+    "cmd": ["原神资源查询", "原神资源列表"],
+}
+__plugin_block_limit__ = {
+    "rst": "您有资源正在查询！"
+}
+
+qr = on_command("原神资源查询", aliases={"原神资源查找"}, priority=5, block=True)
+qr_lst = on_command("原神资源列表", priority=5, block=True)
+rex_qr = on_regex(".*?(在哪|在哪里|哪有|哪里有).*?", priority=5, block=True)
+update_info = on_regex("^更新原神资源信息$", permission=SUPERUSER, priority=1, block=True)
+
+
+@qr.handle()
+async def _(event: MessageEvent, arg: Message = CommandArg()):
+    resource_name = arg.extract_plain_text().strip()
+    if check_resource_exists(resource_name):
+        await qr.send("正在生成位置....")
+        resource = await query_resource(resource_name)
+        await qr.send(Message(resource), at_sender=True)
+        logger.info(
+            f"(USER {event.user_id}, GROUP {event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+            f" 查询原神材料:" + resource_name
+        )
+    else:
+        await qr.send(f"未查找到 {resource_name} 资源，可通过 “原神资源列表” 获取全部资源名称..")
+
+
+@rex_qr.handle()
+async def _(event: MessageEvent, arg: Message = CommandArg()):
+    msg = arg.extract_plain_text().strip()
+    if "在哪" in msg:
+        rs = re.search("(.*)在哪.*?", msg)
+        resource_name = rs.group(1) if rs else ""
+    else:
+        rs = re.search(".*?(哪有|哪里有)(.*)", msg)
+        resource_name = rs.group(2) if rs else ""
+    if check_resource_exists(resource_name):
+        await qr.send("正在生成位置....")
+        resource = await query_resource(resource_name)
+        if resource:
+            await rex_qr.send(Message(resource), at_sender=True)
+            logger.info(
+                f"(USER {event.user_id}, GROUP {event.group_id if isinstance(event, GroupMessageEvent) else 'private'})"
+                f" 查询原神材料:" + resource_name
+            )
+
+
+@qr_lst.handle()
+async def _(bot: Bot, event: MessageEvent):
+    txt = get_resource_type_list()
+    txt_list = txt.split("\n")
+    if isinstance(event, GroupMessageEvent):
+        mes_list = []
+        for txt in txt_list:
+            data = {
+                "type": "node",
+                "data": {
+                    "name": f"这里是{NICKNAME}酱",
+                    "uin": f"{bot.self_id}",
+                    "content": txt,
+                },
+            }
+            mes_list.append(data)
+        await bot.send_group_forward_msg(group_id=event.group_id, messages=mes_list)
+    else:
+        rst = ""
+        for i in range(len(txt_list)):
+            rst += txt_list[i] + "\n"
+            if i % 5 == 0:
+                if rst:
+                    await qr_lst.send(rst)
+                rst = ""
+
+
+@update_info.handle()
+async def _():
+    await init(True)
+    await update_info.send("更新原神资源信息完成...")
+
+
+@scheduler.scheduled_job(
+    "cron",
+    hour=5,
+    minute=1,
+)
+async def _():
+    try:
+        await init()
+        logger.info(f"每日更新原神材料信息成功！")
+    except Exception as e:
+        logger.error(f"每日更新原神材料信息错误：{e}")
Index: utils/image_utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import asyncio\nimport base64\nimport random\nimport re\nfrom io import BytesIO\nfrom math import ceil\nfrom pathlib import Path\nfrom typing import List, Literal, Optional, Tuple, Union\n\nimport cv2\nimport imagehash\nfrom configs.path_config import FONT_PATH, IMAGE_PATH\nfrom imagehash import ImageHash\nfrom matplotlib import pyplot as plt\nfrom PIL import Image, ImageDraw, ImageFile, ImageFilter, ImageFont\n\nfrom services import logger\n\nImageFile.LOAD_TRUNCATED_IMAGES = True\nImage.MAX_IMAGE_PIXELS = None\n\n\ndef compare_image_with_hash(\n    image_file1: str, image_file2: str, max_dif: int = 1.5\n) -> bool:\n    \"\"\"\n    说明:\n        比较两张图片的hash值是否相同\n    参数:\n        :param image_file1: 图片文件路径\n        :param image_file2: 图片文件路径\n        :param max_dif: 允许最大hash差值, 越小越精确,最小为0\n    \"\"\"\n    ImageFile.LOAD_TRUNCATED_IMAGES = True\n    hash_1 = get_img_hash(image_file1)\n    hash_2 = get_img_hash(image_file2)\n    dif = hash_1 - hash_2\n    if dif < 0:\n        dif = -dif\n    if dif <= max_dif:\n        return True\n    else:\n        return False\n\n\ndef get_img_hash(image_file: Union[str, Path]) -> ImageHash:\n    \"\"\"\n    说明:\n        获取图片的hash值\n    参数:\n        :param image_file: 图片文件路径\n    \"\"\"\n    with open(image_file, \"rb\") as fp:\n        hash_value = imagehash.average_hash(Image.open(fp))\n    return hash_value\n\n\ndef compressed_image(\n    in_file: Union[str, Path], out_file: Union[str, Path] = None, ratio: float = 0.9\n):\n    \"\"\"\n    说明:\n        压缩图片\n    参数:\n        :param in_file: 被压缩的文件路径\n        :param out_file: 压缩后输出的文件路径\n        :param ratio: 压缩率，宽高 * 压缩率\n    \"\"\"\n    in_file = IMAGE_PATH / in_file if isinstance(in_file, str) else in_file\n    if out_file:\n        out_file = IMAGE_PATH / out_file if isinstance(out_file, str) else out_file\n    else:\n        out_file = in_file\n    h, w, d = cv2.imread(str(in_file.absolute())).shape\n    img = cv2.resize(\n        cv2.imread(str(in_file.absolute())), (int(w * ratio), int(h * ratio))\n    )\n    cv2.imwrite(str(out_file.absolute()), img)\n\n\ndef alpha2white_pil(pic: Image) -> Image:\n    \"\"\"\n    说明:\n        将图片透明背景转化为白色\n    参数:\n        :param pic: 通过PIL打开的图片文件\n    \"\"\"\n    img = pic.convert(\"RGBA\")\n    width, height = img.size\n    for yh in range(height):\n        for xw in range(width):\n            dot = (xw, yh)\n            color_d = img.getpixel(dot)\n            if color_d[3] == 0:\n                color_d = (255, 255, 255, 255)\n                img.putpixel(dot, color_d)\n    return img\n\n\ndef pic2b64(pic: Image) -> str:\n    \"\"\"\n    说明:\n        PIL图片转base64\n    参数:\n        :param pic: 通过PIL打开的图片文件\n    \"\"\"\n    buf = BytesIO()\n    pic.save(buf, format=\"PNG\")\n    base64_str = base64.b64encode(buf.getvalue()).decode()\n    return \"base64://\" + base64_str\n\n\ndef fig2b64(plt_: plt) -> str:\n    \"\"\"\n    说明:\n        matplotlib图片转base64\n    参数:\n        :param plt_: matplotlib生成的图片\n    \"\"\"\n    buf = BytesIO()\n    plt_.savefig(buf, format=\"PNG\", dpi=100)\n    base64_str = base64.b64encode(buf.getvalue()).decode()\n    return \"base64://\" + base64_str\n\n\ndef is_valid(file: Union[str, Path]) -> bool:\n    \"\"\"\n    说明:\n        判断图片是否损坏\n    参数:\n        :param file: 图片文件路径\n    \"\"\"\n    valid = True\n    try:\n        Image.open(file).load()\n    except OSError:\n        valid = False\n    return valid\n\n\nclass BuildImage:\n    \"\"\"\n    快捷生成图片与操作图片的工具类\n    \"\"\"\n\n    def __init__(\n        self,\n        w: int,\n        h: int,\n        paste_image_width: int = 0,\n        paste_image_height: int = 0,\n        color: Union[str, Tuple[int, int, int], Tuple[int, int, int, int]] = None,\n        image_mode: str = \"RGBA\",\n        font_size: int = 10,\n        background: Union[Optional[str], BytesIO, Path] = None,\n        font: str = \"yz.ttf\",\n        ratio: float = 1,\n        is_alpha: bool = False,\n        plain_text: Optional[str] = None,\n        font_color: Optional[Union[str, Tuple[int, int, int]]] = None,\n    ):\n        \"\"\"\n        参数:\n            :param w: 自定义图片的宽度，w=0时为图片原本宽度\n            :param h: 自定义图片的高度，h=0时为图片原本高度\n            :param paste_image_width: 当图片做为背景图时，设置贴图的宽度，用于贴图自动换行\n            :param paste_image_height: 当图片做为背景图时，设置贴图的高度，用于贴图自动换行\n            :param color: 生成图片的颜色\n            :param image_mode: 图片的类型\n            :param font_size: 文字大小\n            :param background: 打开图片的路径\n            :param font: 字体，默认在 resource/ttf/ 路径下\n            :param ratio: 倍率压缩\n            :param is_alpha: 是否背景透明\n            :param plain_text: 纯文字文本\n        \"\"\"\n        self.w = int(w)\n        self.h = int(h)\n        self.paste_image_width = int(paste_image_width)\n        self.paste_image_height = int(paste_image_height)\n        self.current_w = 0\n        self.current_h = 0\n        self.font = ImageFont.truetype(str(FONT_PATH / font), int(font_size))\n        if not plain_text and not color:\n            color = (255, 255, 255)\n        self.background = background\n        if not background:\n            if plain_text:\n                if not color:\n                    color = (255, 255, 255, 0)\n                ttf_w, ttf_h = self.getsize(plain_text)\n                self.w = self.w if self.w > ttf_w else ttf_w\n                self.h = self.h if self.h > ttf_h else ttf_h\n            self.markImg = Image.new(image_mode, (self.w, self.h), color)\n            self.markImg.convert(image_mode)\n        else:\n            if not w and not h:\n                self.markImg = Image.open(background)\n                w, h = self.markImg.size\n                if ratio and ratio > 0 and ratio != 1:\n                    self.w = int(ratio * w)\n                    self.h = int(ratio * h)\n                    self.markImg = self.markImg.resize(\n                        (self.w, self.h), Image.ANTIALIAS\n                    )\n                else:\n                    self.w = w\n                    self.h = h\n            else:\n                self.markImg = Image.open(background).resize(\n                    (self.w, self.h), Image.ANTIALIAS\n                )\n        if is_alpha:\n            try:\n                array = self.markImg.load()\n                for i in range(w):\n                    for j in range(h):\n                        pos = array[i, j]\n                        is_edit = sum([1 for x in pos[0:3] if x > 240]) == 3\n                        if is_edit:\n                            array[i, j] = (255, 255, 255, 0)\n            except Exception as e:\n                logger.warning(f\"背景透明化发生错误..{type(e)}：{e}\")\n        self.draw = ImageDraw.Draw(self.markImg)\n        self.size = self.w, self.h\n        if plain_text:\n            fill = font_color if font_color else (0, 0, 0)\n            self.text((0, 0), plain_text, fill)\n        try:\n            self.loop = asyncio.get_event_loop()\n        except RuntimeError:\n            new_loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(new_loop)\n            self.loop = asyncio.get_event_loop()\n\n    async def apaste(\n        self,\n        img: \"BuildImage\" or Image,\n        pos: Tuple[int, int] = None,\n        alpha: bool = False,\n        center_type: Optional[Literal[\"center\", \"by_height\", \"by_width\"]] = None,\n    ):\n        \"\"\"\n        说明:\n            异步 贴图\n        参数:\n            :param img: 已打开的图片文件，可以为 BuildImage 或 Image\n            :param pos: 贴图位置（左上角）\n            :param alpha: 图片背景是否为透明\n            :param center_type: 居中类型，可能的值 center: 完全居中，by_width: 水平居中，by_height: 垂直居中\n        \"\"\"\n        await self.loop.run_in_executor(None, self.paste, img, pos, alpha, center_type)\n\n    def paste(\n        self,\n        img: \"BuildImage\" or Image,\n        pos: Tuple[int, int] = None,\n        alpha: bool = False,\n        center_type: Optional[Literal[\"center\", \"by_height\", \"by_width\"]] = None,\n    ):\n        \"\"\"\n        说明:\n            贴图\n        参数:\n            :param img: 已打开的图片文件，可以为 BuildImage 或 Image\n            :param pos: 贴图位置（左上角）\n            :param alpha: 图片背景是否为透明\n            :param center_type: 居中类型，可能的值 center: 完全居中，by_width: 水平居中，by_height: 垂直居中\n        \"\"\"\n        if center_type:\n            if center_type not in [\"center\", \"by_height\", \"by_width\"]:\n                raise ValueError(\n                    \"center_type must be 'center', 'by_width' or 'by_height'\"\n                )\n            width, height = 0, 0\n            if not pos:\n                pos = (0, 0)\n            if center_type == \"center\":\n                width = int((self.w - img.w) / 2)\n                height = int((self.h - img.h) / 2)\n            elif center_type == \"by_width\":\n                width = int((self.w - img.w) / 2)\n                height = pos[1]\n            elif center_type == \"by_height\":\n                width = pos[0]\n                height = int((self.h - img.h) / 2)\n            pos = (width, height)\n        if isinstance(img, BuildImage):\n            img = img.markImg\n        if self.current_w == self.w:\n            self.current_w = 0\n            self.current_h += self.paste_image_height\n        if not pos:\n            pos = (self.current_w, self.current_h)\n        if alpha:\n            try:\n                self.markImg.paste(img, pos, img)\n            except ValueError:\n                img = img.convert(\"RGBA\")\n                self.markImg.paste(img, pos, img)\n        else:\n            self.markImg.paste(img, pos)\n        self.current_w += self.paste_image_width\n\n    def getsize(self, msg: str) -> Tuple[int, int]:\n        \"\"\"\n        说明:\n            获取文字在该图片 font_size 下所需要的空间\n        参数:\n            :param msg: 文字内容\n        \"\"\"\n        return self.font.getsize(msg)\n\n    async def apoint(\n        self, pos: Tuple[int, int], fill: Optional[Tuple[int, int, int]] = None\n    ):\n        \"\"\"\n        说明:\n            异步 绘制多个或单独的像素\n        参数:\n            :param pos: 坐标\n            :param fill: 填错颜色\n        \"\"\"\n        await self.loop.run_in_executor(None, self.point, pos, fill)\n\n    def point(self, pos: Tuple[int, int], fill: Optional[Tuple[int, int, int]] = None):\n        \"\"\"\n        说明:\n            绘制多个或单独的像素\n        参数:\n            :param pos: 坐标\n            :param fill: 填错颜色\n        \"\"\"\n        self.draw.point(pos, fill=fill)\n\n    async def aellipse(\n        self,\n        pos: Tuple[int, int, int, int],\n        fill: Optional[Tuple[int, int, int]] = None,\n        outline: Optional[Tuple[int, int, int]] = None,\n        width: int = 1,\n    ):\n        \"\"\"\n        说明:\n            异步 绘制圆\n        参数:\n            :param pos: 坐标范围\n            :param fill: 填充颜色\n            :param outline: 描线颜色\n            :param width: 描线宽度\n        \"\"\"\n        await self.loop.run_in_executor(None, self.ellipse, pos, fill, outline, width)\n\n    def ellipse(\n        self,\n        pos: Tuple[int, int, int, int],\n        fill: Optional[Tuple[int, int, int]] = None,\n        outline: Optional[Tuple[int, int, int]] = None,\n        width: int = 1,\n    ):\n        \"\"\"\n        说明:\n            绘制圆\n        参数:\n            :param pos: 坐标范围\n            :param fill: 填充颜色\n            :param outline: 描线颜色\n            :param width: 描线宽度\n        \"\"\"\n        self.draw.ellipse(pos, fill, outline, width)\n\n    async def atext(\n        self,\n        pos: Union[Tuple[int, int], Tuple[float, float]],\n        text: str,\n        fill: Union[str, Tuple[int, int, int]] = (0, 0, 0),\n        center_type: Optional[Literal[\"center\", \"by_height\", \"by_width\"]] = None,\n    ):\n        \"\"\"\n        说明:\n            异步 在图片上添加文字\n        参数:\n            :param pos: 文字位置\n            :param text: 文字内容\n            :param fill: 文字颜色\n            :param center_type: 居中类型，可能的值 center: 完全居中，by_width: 水平居中，by_height: 垂直居中\n        \"\"\"\n        await self.loop.run_in_executor(None, self.text, pos, text, fill, center_type)\n\n    def text(\n        self,\n        pos: Union[Tuple[int, int], Tuple[float, float]],\n        text: str,\n        fill: Union[str, Tuple[int, int, int]] = (0, 0, 0),\n        center_type: Optional[Literal[\"center\", \"by_height\", \"by_width\"]] = None,\n    ):\n        \"\"\"\n        说明:\n            在图片上添加文字\n        参数:\n            :param pos: 文字位置\n            :param text: 文字内容\n            :param fill: 文字颜色\n            :param center_type: 居中类型，可能的值 center: 完全居中，by_width: 水平居中，by_height: 垂直居中\n        \"\"\"\n        if center_type:\n            if center_type not in [\"center\", \"by_height\", \"by_width\"]:\n                raise ValueError(\n                    \"center_type must be 'center', 'by_width' or 'by_height'\"\n                )\n            w, h = self.w, self.h\n            ttf_w, ttf_h = self.getsize(text)\n            if center_type == \"center\":\n                w = int((w - ttf_w) / 2)\n                h = int((h - ttf_h) / 2)\n            elif center_type == \"by_width\":\n                w = int((w - ttf_w) / 2)\n                h = pos[1]\n            elif center_type == \"by_height\":\n                h = int((h - ttf_h) / 2)\n                w = pos[0]\n            pos = (w, h)\n        self.draw.text(pos, text, fill=fill, font=self.font)\n\n    async def asave(self, path: Optional[Union[str, Path]] = None):\n        \"\"\"\n        说明:\n            异步 保存图片\n        参数:\n            :param path: 图片路径\n        \"\"\"\n        await self.loop.run_in_executor(None, self.save, path)\n\n    def save(self, path: Optional[Union[str, Path]] = None):\n        \"\"\"\n        说明:\n            保存图片\n        参数:\n            :param path: 图片路径\n        \"\"\"\n        if not path:\n            path = self.background\n        self.markImg.save(path)\n\n    def show(self):\n        \"\"\"\n        说明:\n            显示图片\n        \"\"\"\n        self.markImg.show(self.markImg)\n\n    async def aresize(self, ratio: float = 0, w: int = 0, h: int = 0):\n        \"\"\"\n        说明:\n            异步 压缩图片\n        参数:\n            :param ratio: 压缩倍率\n            :param w: 压缩图片宽度至 w\n            :param h: 压缩图片高度至 h\n        \"\"\"\n        await self.loop.run_in_executor(None, self.resize, ratio, w, h)\n\n    def resize(self, ratio: float = 0, w: int = 0, h: int = 0):\n        \"\"\"\n        说明:\n            压缩图片\n        参数:\n            :param ratio: 压缩倍率\n            :param w: 压缩图片宽度至 w\n            :param h: 压缩图片高度至 h\n        \"\"\"\n        if not w and not h and not ratio:\n            raise Exception(\"缺少参数...\")\n        if not w and not h and ratio:\n            w = int(self.w * ratio)\n            h = int(self.h * ratio)\n        self.markImg = self.markImg.resize((w, h), Image.ANTIALIAS)\n        self.w, self.h = self.markImg.size\n        self.size = self.w, self.h\n        self.draw = ImageDraw.Draw(self.markImg)\n\n    async def acrop(self, box: Tuple[int, int, int, int]):\n        \"\"\"\n        说明:\n            异步 裁剪图片\n        参数:\n            :param box: 左上角坐标，右下角坐标 (left, upper, right, lower)\n        \"\"\"\n        await self.loop.run_in_executor(None, self.crop, box)\n\n    def crop(self, box: Tuple[int, int, int, int]):\n        \"\"\"\n        说明:\n            裁剪图片\n        参数:\n            :param box: 左上角坐标，右下角坐标 (left, upper, right, lower)\n        \"\"\"\n        self.markImg = self.markImg.crop(box)\n        self.w, self.h = self.markImg.size\n        self.size = self.w, self.h\n        self.draw = ImageDraw.Draw(self.markImg)\n\n    def check_font_size(self, word: str) -> bool:\n        \"\"\"\n        说明:\n            检查文本所需宽度是否大于图片宽度\n        参数:\n            :param word: 文本内容\n        \"\"\"\n        return self.font.getsize(word)[0] > self.w\n\n    async def atransparent(self, alpha_ratio: float = 1, n: int = 0):\n        \"\"\"\n        说明:\n            异步 图片透明化\n        参数:\n            :param alpha_ratio: 透明化程度\n            :param n: 透明化大小内边距\n        \"\"\"\n        await self.loop.run_in_executor(None, self.transparent, alpha_ratio, n)\n\n    def transparent(self, alpha_ratio: float = 1, n: int = 0):\n        \"\"\"\n        说明:\n            图片透明化\n        参数:\n            :param alpha_ratio: 透明化程度\n            :param n: 透明化大小内边距\n        \"\"\"\n        self.markImg = self.markImg.convert(\"RGBA\")\n        x, y = self.markImg.size\n        for i in range(n, x - n):\n            for k in range(n, y - n):\n                color = self.markImg.getpixel((i, k))\n                color = color[:-1] + (int(100 * alpha_ratio),)\n                self.markImg.putpixel((i, k), color)\n        self.draw = ImageDraw.Draw(self.markImg)\n\n    def pic2bs4(self) -> str:\n        \"\"\"\n        说明:\n            BuildImage 转 base64\n        \"\"\"\n        buf = BytesIO()\n        self.markImg.save(buf, format=\"PNG\")\n        base64_str = base64.b64encode(buf.getvalue()).decode()\n        return base64_str\n\n    def convert(self, type_: str):\n        \"\"\"\n        说明:\n            修改图片类型\n        参数:\n            :param type_: 类型\n        \"\"\"\n        self.markImg = self.markImg.convert(type_)\n\n    async def arectangle(\n        self,\n        xy: Tuple[int, int, int, int],\n        fill: Optional[Tuple[int, int, int]] = None,\n        outline: str = None,\n        width: int = 1,\n    ):\n        \"\"\"\n        说明:\n            异步 画框\n        参数:\n            :param xy: 坐标\n            :param fill: 填充颜色\n            :param outline: 轮廓颜色\n            :param width: 线宽\n        \"\"\"\n        await self.loop.run_in_executor(None, self.rectangle, xy, fill, outline, width)\n\n    def rectangle(\n        self,\n        xy: Tuple[int, int, int, int],\n        fill: Optional[Tuple[int, int, int]] = None,\n        outline: str = None,\n        width: int = 1,\n    ):\n        \"\"\"\n        说明:\n            画框\n        参数:\n            :param xy: 坐标\n            :param fill: 填充颜色\n            :param outline: 轮廓颜色\n            :param width: 线宽\n        \"\"\"\n        self.draw.rectangle(xy, fill, outline, width)\n\n    async def apolygon(\n        self,\n        xy: List[Tuple[int, int]],\n        fill: Tuple[int, int, int] = (0, 0, 0),\n        outline: int = 1,\n    ):\n        \"\"\"\n        说明:\n            异步 画多边形\n        参数:\n            :param xy: 坐标\n            :param fill: 颜色\n            :param outline: 线宽\n        \"\"\"\n        await self.loop.run_in_executor(None, self.polygon, xy, fill, outline)\n\n    def polygon(\n        self,\n        xy: List[Tuple[int, int]],\n        fill: Tuple[int, int, int] = (0, 0, 0),\n        outline: int = 1,\n    ):\n        \"\"\"\n        说明:\n            画多边形\n        参数:\n            :param xy: 坐标\n            :param fill: 颜色\n            :param outline: 线宽\n        \"\"\"\n        self.draw.polygon(xy, fill, outline)\n\n    async def aline(\n        self,\n        xy: Tuple[int, int, int, int],\n        fill: Optional[Union[str, Tuple[int, int, int]]] = None,\n        width: int = 1,\n    ):\n        \"\"\"\n        说明:\n            异步 画线\n        参数:\n            :param xy: 坐标\n            :param fill: 填充\n            :param width: 线宽\n        \"\"\"\n        await self.loop.run_in_executor(None, self.line, xy, fill, width)\n\n    def line(\n        self,\n        xy: Tuple[int, int, int, int],\n        fill: Optional[Union[Tuple[int, int, int], str]] = None,\n        width: int = 1,\n    ):\n        \"\"\"\n        说明:\n            画线\n        参数:\n            :param xy: 坐标\n            :param fill: 填充\n            :param width: 线宽\n        \"\"\"\n        self.draw.line(xy, fill, width)\n\n    async def acircle(self):\n        \"\"\"\n        说明:\n            异步 将 BuildImage 图片变为圆形\n        \"\"\"\n        await self.loop.run_in_executor(None, self.circle)\n\n    def circle(self):\n        \"\"\"\n        说明:\n            使图像变圆\n        \"\"\"\n        self.markImg.convert(\"RGBA\")\n        size = self.markImg.size\n        r2 = min(size[0], size[1])\n        if size[0] != size[1]:\n            self.markImg = self.markImg.resize((r2, r2), Image.ANTIALIAS)\n        width = 1\n        antialias = 4\n        ellipse_box = [0, 0, r2 - 2, r2 - 2]\n        mask = Image.new(\n            size=[int(dim * antialias) for dim in self.markImg.size],\n            mode=\"L\",\n            color=\"black\",\n        )\n        draw = ImageDraw.Draw(mask)\n        for offset, fill in (width / -2.0, \"black\"), (width / 2.0, \"white\"):\n            left, top = [(value + offset) * antialias for value in ellipse_box[:2]]\n            right, bottom = [(value - offset) * antialias for value in ellipse_box[2:]]\n            draw.ellipse([left, top, right, bottom], fill=fill)\n        mask = mask.resize(self.markImg.size, Image.LANCZOS)\n        try:\n            self.markImg.putalpha(mask)\n        except ValueError:\n            pass\n\n    async def acircle_corner(self, radii: int = 30):\n        \"\"\"\n        说明:\n            异步 矩形四角变圆\n        参数:\n            :param radii: 半径\n        \"\"\"\n        await self.loop.run_in_executor(None, self.circle_corner, radii)\n\n    def circle_corner(self, radii: int = 30):\n        \"\"\"\n        说明:\n            矩形四角变圆\n        参数:\n            :param radii: 半径\n        \"\"\"\n        # 画圆（用于分离4个角）\n        circle = Image.new(\"L\", (radii * 2, radii * 2), 0)\n        draw = ImageDraw.Draw(circle)\n        draw.ellipse((0, 0, radii * 2, radii * 2), fill=255)\n        self.markImg = self.markImg.convert(\"RGBA\")\n        w, h = self.markImg.size\n        alpha = Image.new(\"L\", self.markImg.size, 255)\n        alpha.paste(circle.crop((0, 0, radii, radii)), (0, 0))\n        alpha.paste(circle.crop((radii, 0, radii * 2, radii)), (w - radii, 0))\n        alpha.paste(\n            circle.crop((radii, radii, radii * 2, radii * 2)), (w - radii, h - radii)\n        )\n        alpha.paste(circle.crop((0, radii, radii, radii * 2)), (0, h - radii))\n        self.markImg.putalpha(alpha)\n\n    async def arotate(self, angle: int, expand: bool = False):\n        \"\"\"\n        说明:\n            异步 旋转图片\n        参数:\n            :param angle: 角度\n            :param expand: 放大图片适应角度\n        \"\"\"\n        await self.loop.run_in_executor(None, self.rotate, angle, expand)\n\n    def rotate(self, angle: int, expand: bool = False):\n        \"\"\"\n        说明:\n            旋转图片\n        参数:\n            :param angle: 角度\n            :param expand: 放大图片适应角度\n        \"\"\"\n        self.markImg = self.markImg.rotate(angle, expand=expand)\n\n    async def atranspose(self, angle: int):\n        \"\"\"\n        说明:\n            异步 旋转图片(包括边框)\n        参数:\n            :param angle: 角度\n        \"\"\"\n        await self.loop.run_in_executor(None, self.transpose, angle)\n\n    def transpose(self, angle: int):\n        \"\"\"\n        说明:\n            旋转图片(包括边框)\n        参数:\n            :param angle: 角度\n        \"\"\"\n        self.markImg.transpose(angle)\n\n    async def afilter(self, filter_: str, aud: int = None):\n        \"\"\"\n        说明:\n            异步 图片变化\n        参数:\n            :param filter_: 变化效果\n            :param aud: 利率\n        \"\"\"\n        await self.loop.run_in_executor(None, self.filter, filter_, aud)\n\n    def filter(self, filter_: str, aud: int = None):\n        \"\"\"\n        说明:\n            图片变化\n        参数:\n            :param filter_: 变化效果\n            :param aud: 利率\n        \"\"\"\n        _x = None\n        if filter_ == \"GaussianBlur\":  # 高斯模糊\n            _x = ImageFilter.GaussianBlur\n        elif filter_ == \"EDGE_ENHANCE\":  # 锐化效果\n            _x = ImageFilter.EDGE_ENHANCE\n        elif filter_ == \"BLUR\":  # 模糊效果\n            _x = ImageFilter.BLUR\n        elif filter_ == \"CONTOUR\":  # 铅笔滤镜\n            _x = ImageFilter.CONTOUR\n        elif filter_ == \"FIND_EDGES\":  # 边缘检测\n            _x = ImageFilter.FIND_EDGES\n        if _x:\n            if aud:\n                self.markImg = self.markImg.filter(_x(aud))\n            else:\n                self.markImg = self.markImg.filter(_x)\n        self.draw = ImageDraw.Draw(self.markImg)\n\n    async def areplace_color_tran(\n        self,\n        src_color: Union[\n            Tuple[int, int, int], Tuple[Tuple[int, int, int], Tuple[int, int, int]]\n        ],\n        replace_color: Tuple[int, int, int],\n    ):\n        \"\"\"\n        说明:\n            异步 颜色替换\n        参数:\n            :param src_color: 目标颜色，或者使用列表，设置阈值\n            :param replace_color: 替换颜色\n        \"\"\"\n        self.loop.run_in_executor(\n            None, self.replace_color_tran, src_color, replace_color\n        )\n\n    def replace_color_tran(\n        self,\n        src_color: Union[\n            Tuple[int, int, int], Tuple[Tuple[int, int, int], Tuple[int, int, int]]\n        ],\n        replace_color: Tuple[int, int, int],\n    ):\n        \"\"\"\n        说明:\n            颜色替换\n        参数:\n            :param src_color: 目标颜色，或者使用元祖，设置阈值\n            :param replace_color: 替换颜色\n        \"\"\"\n        if isinstance(src_color, tuple):\n            start_ = src_color[0]\n            end_ = src_color[1]\n        else:\n            start_ = src_color\n            end_ = None\n        for i in range(self.w):\n            for j in range(self.h):\n                r, g, b = self.markImg.getpixel((i, j))\n                if not end_:\n                    if r == start_[0] and g == start_[1] and b == start_[2]:\n                        self.markImg.putpixel((i, j), replace_color)\n                else:\n                    if (\n                        start_[0] <= r <= end_[0]\n                        and start_[1] <= g <= end_[1]\n                        and start_[2] <= b <= end_[2]\n                    ):\n                        self.markImg.putpixel((i, j), replace_color)\n\n    #\n    def getchannel(self, type_):\n        self.markImg = self.markImg.getchannel(type_)\n\n\nclass BuildMat:\n    \"\"\"\n    针对 折线图/柱状图，基于 BuildImage 编写的 非常难用的 自定义画图工具\n    目前仅支持 正整数\n    \"\"\"\n\n    def __init__(\n        self,\n        y: List[int],\n        mat_type: str = \"line\",\n        *,\n        x_name: Optional[str] = None,\n        y_name: Optional[str] = None,\n        x_index: List[Union[str, int, float]] = None,\n        y_index: List[Union[str, int, float]] = None,\n        x_rotate: int = 0,\n        title: Optional[str] = None,\n        size: Tuple[int, int] = (1000, 1000),\n        font: str = \"msyh.ttf\",\n        font_size: Optional[int] = None,\n        display_num: bool = False,\n        is_grid: bool = False,\n        background: Optional[List[str]] = None,\n        background_filler_type: Optional[str] = \"center\",\n        bar_color: Optional[List[Union[str, Tuple[int, int, int]]]] = None,\n    ):\n        \"\"\"\n        说明:\n            初始化 BuildMat\n        参数:\n            :param y: 坐标值\n            :param mat_type: 图像类型 可能的值：[line]: 折线图，[bar]: 柱状图，[barh]: 横向柱状图\n            :param x_name: 横坐标名称\n            :param y_name: 纵坐标名称\n            :param x_index: 横坐标值\n            :param y_index: 纵坐标值\n            :param x_rotate: 横坐标旋转角度\n            :param title: 标题\n            :param size: 图像大小，建议默认\n            :param font: 字体\n            :param font_size: 字体大小，建议默认\n            :param display_num: 是否显示数值\n            :param is_grid: 是否添加栅格\n            :param background: 背景图片\n            :param background_filler_type: 图像填充类型\n            :param bar_color: 柱状图颜色，位 ['*'] 时替换位彩虹随机色\n        \"\"\"\n        self.mat_type = mat_type\n        self.markImg = None\n        self._check_value(y, y_index)\n        self.w = size[0]\n        self.h = size[1]\n        self.y = y\n        self.x_name = x_name\n        self.y_name = y_name\n        self.x_index = x_index\n        self.y_index = y_index\n        self.x_rotate = x_rotate\n        self.title = title\n        self.font = font\n        self.display_num = display_num\n        self.is_grid = is_grid\n        self.background = background\n        self.background_filler_type = background_filler_type\n        self.bar_color = bar_color if bar_color else [(0, 0, 0)]\n        self.size = size\n        self.padding_w = 120\n        self.padding_h = 120\n        self.line_length = 760\n        self._deviation = 0.905\n        self._color = {}\n        if not font_size:\n            self.font_size = int(25 * (1 - len(x_index) / 100))\n        else:\n            self.font_size = font_size\n        if self.bar_color == [\"*\"]:\n            self.bar_color = [\n                \"#FF0000\",\n                \"#FF7F00\",\n                \"#FFFF00\",\n                \"#00FF00\",\n                \"#00FFFF\",\n                \"#0000FF\",\n                \"#8B00FF\",\n            ]\n        if not x_index:\n            raise ValueError(\"缺少 x_index [横坐标值]...\")\n        self._x_interval = int((self.line_length - 70) / len(x_index))\n        self._bar_width = int(30 * (1 - (len(x_index) + 10) / 100))\n        # 没有 y_index 时自动生成\n        if not y_index:\n            _y_index = []\n            _max_value = int(max(y))\n            _max_value = ceil(\n                _max_value / eval(\"1\" + \"0\" * (len(str(_max_value)) - 1))\n            ) * eval(\"1\" + \"0\" * (len(str(_max_value)) - 1))\n            _max_value = _max_value if _max_value >= 10 else 100\n            _step = int(_max_value / 10)\n            for i in range(_step, _max_value + _step, _step):\n                _y_index.append(i)\n            self.y_index = _y_index\n        self._p = self.line_length / max(self.y_index)\n        self._y_interval = int((self.line_length - 70) / len(self.y_index))\n\n    def gen_graph(self):\n        \"\"\"\n        说明:\n            生成图像\n        \"\"\"\n        self.markImg = self._init_graph(\n            x_name=self.x_name,\n            y_name=self.y_name,\n            x_index=self.x_index,\n            y_index=self.y_index,\n            font_size=self.font_size,\n            is_grid=self.is_grid,\n        )\n        if self.mat_type == \"line\":\n            self._gen_line_graph(y=self.y, display_num=self.display_num)\n        elif self.mat_type == \"bar\":\n            self._gen_bar_graph(y=self.y, display_num=self.display_num)\n        elif self.mat_type == \"barh\":\n            self._gen_bar_graph(y=self.y, display_num=self.display_num, is_barh=True)\n\n    def set_y(self, y: List[int]):\n        \"\"\"\n        说明:\n            给坐标点设置新值\n        参数:\n            :param y: 坐标点\n        \"\"\"\n        self._check_value(y, self.y_index)\n        self.y = y\n\n    def set_y_index(self, y_index: List[Union[str, int, float]]):\n        \"\"\"\n        说明:\n            设置y轴坐标值\n        参数:\n            :param y_index: y轴坐标值\n        \"\"\"\n        self._check_value(self.y, y_index)\n        self.y_index = y_index\n\n    def set_title(self, title: str, color: Optional[Union[str, Tuple[int, int, int]]]):\n        \"\"\"\n        说明:\n            设置标题\n        参数:\n            :param title: 标题\n            :param color: 字体颜色\n        \"\"\"\n        self.title = title\n        if color:\n            self._color[\"title\"] = color\n\n    def set_background(\n        self, background: Optional[List[str]], type_: Optional[str] = None\n    ):\n        \"\"\"\n        说明:\n            设置背景图片\n        参数:\n            :param background: 图片路径列表\n            :param type_: 填充类型\n        \"\"\"\n        self.background = background\n        self.background_filler_type = type_ if type_ else self.background_filler_type\n\n    def show(self):\n        \"\"\"\n        说明:\n            展示图像\n        \"\"\"\n        self.markImg.show()\n\n    def pic2bs4(self) -> str:\n        \"\"\"\n        说明:\n            转base64\n        \"\"\"\n        return self.markImg.pic2bs4()\n\n    def resize(self, ratio: float = 0.9):\n        \"\"\"\n        说明:\n            调整图像大小\n        参数:\n            :param ratio: 比例\n        \"\"\"\n        self.markImg.resize(ratio)\n\n    def save(self, path: Union[str, Path]):\n        \"\"\"\n        说明:\n            保存图片\n        参数:\n            :param path: 路径\n        \"\"\"\n        self.markImg.save(path)\n\n    def _check_value(\n        self,\n        y: List[int],\n        y_index: List[Union[str, int, float]] = None,\n        x_index: List[Union[str, int, float]] = None,\n    ):\n        \"\"\"\n        说明:\n            检查值合法性\n        参数:\n            :param y: 坐标值\n            :param y_index: y轴坐标值\n            :param x_index: x轴坐标值\n        \"\"\"\n        if y_index:\n            _value = x_index if self.mat_type == \"barh\" else y_index\n            if max(y) > max(y_index):\n                raise ValueError(\"坐标点的值必须小于y轴坐标的最大值...\")\n            i = -9999999999\n            for y in y_index:\n                if y > i:\n                    i = y\n                else:\n                    raise ValueError(\"y轴坐标值必须有序...\")\n\n    def _gen_line_graph(\n        self,\n        y: List[Union[int, float]],\n        display_num: bool = False,\n    ):\n        \"\"\"\n        说明:\n            生成折线图\n        参数:\n            :param y: 坐标点\n            :param display_num: 显示该点的值\n        \"\"\"\n        _black_point = BuildImage(7, 7, color=random.choice(self.bar_color))\n        _black_point.circle()\n        x_interval = self._x_interval\n        current_w = self.padding_w + x_interval\n        current_h = self.padding_h + self.line_length\n        for i in range(len(y)):\n            if display_num:\n                w = int(self.markImg.getsize(str(y[i]))[0] / 2)\n                self.markImg.text(\n                    (\n                        current_w - w,\n                        current_h - int(y[i] * self._p * self._deviation) - 25 - 5,\n                    ),\n                    f\"{y[i]:.2f}\" if isinstance(y[i], float) else f\"{y[i]}\",\n                )\n            self.markImg.paste(\n                _black_point,\n                (\n                    current_w - 3,\n                    current_h - int(y[i] * self._p * self._deviation) - 3,\n                ),\n                True,\n            )\n            if i != len(y) - 1:\n                self.markImg.line(\n                    (\n                        current_w,\n                        current_h - int(y[i] * self._p * self._deviation),\n                        current_w + x_interval,\n                        current_h - int(y[i + 1] * self._p * self._deviation),\n                    ),\n                    fill=(0, 0, 0),\n                    width=2,\n                )\n            current_w += x_interval\n\n    def _gen_bar_graph(\n        self,\n        y: List[Union[int, float]],\n        display_num: bool = False,\n        is_barh: bool = False,\n    ):\n        \"\"\"\n        说明:\n            生成柱状图\n        参数:\n            :param y: 坐标值\n            :param display_num: 是否显示数值\n            :param is_barh: 横柱状图\n        \"\"\"\n        _interval = self._x_interval\n        if is_barh:\n            current_h = self.padding_h + self.line_length - _interval\n            current_w = self.padding_w\n        else:\n            current_w = self.padding_w + _interval\n            current_h = self.padding_h + self.line_length\n        for i in range(len(y)):\n            # 画出显示数字\n            if display_num:\n                # 横柱状图\n                if is_barh:\n                    font_h = self.markImg.getsize(str(y[i]))[1]\n                    self.markImg.text(\n                        (\n                            self.padding_w\n                            + int(y[i] * self._p * self._deviation)\n                            + 2\n                            + 5,\n                            current_h - int(font_h / 2) - 1,\n                        ),\n                        f\"{y[i]:.2f}\" if isinstance(y[i], float) else f\"{y[i]}\",\n                    )\n                else:\n                    w = int(self.markImg.getsize(str(y[i]))[0] / 2)\n                    self.markImg.text(\n                        (\n                            current_w - w,\n                            current_h - int(y[i] * self._p * self._deviation) - 25,\n                        ),\n                        f\"{y[i]:.2f}\" if isinstance(y[i], float) else f\"{y[i]}\",\n                    )\n            if i != len(y):\n                bar_color = random.choice(self.bar_color)\n                if is_barh:\n                    A = BuildImage(\n                        int(y[i] * self._p * self._deviation),\n                        self._bar_width,\n                        color=bar_color,\n                    )\n                    self.markImg.paste(\n                        A,\n                        (\n                            current_w + 2,\n                            current_h - int(self._bar_width / 2),\n                        ),\n                    )\n                else:\n                    A = BuildImage(\n                        self._bar_width,\n                        int(y[i] * self._p * self._deviation),\n                        color=bar_color,\n                    )\n                    self.markImg.paste(\n                        A,\n                        (\n                            current_w - int(self._bar_width / 2),\n                            current_h - int(y[i] * self._p * self._deviation),\n                        ),\n                    )\n            if is_barh:\n                current_h -= _interval\n            else:\n                current_w += _interval\n\n    def _init_graph(\n        self,\n        x_name: Optional[str] = None,\n        y_name: Optional[str] = None,\n        x_index: List[Union[str, int, float]] = None,\n        y_index: List[Union[str, int, float]] = None,\n        font_size: Optional[int] = None,\n        is_grid: bool = False,\n    ) -> BuildImage:\n        \"\"\"\n        说明:\n            初始化图像，生成xy轴\n        参数:\n            :param x_name: x轴名称\n            :param y_name: y轴名称\n            :param x_index: x轴坐标值\n            :param y_index: y轴坐标值\n            :param is_grid: 添加栅格\n        \"\"\"\n        padding_w = self.padding_w\n        padding_h = self.padding_h\n        line_length = self.line_length\n        background = random.choice(self.background) if self.background else None\n        A = BuildImage(\n            self.w, self.h, font_size=font_size, font=self.font, background=background\n        )\n        if background:\n            _tmp = BuildImage(self.w, self.h)\n            _tmp.transparent(2)\n            A.paste(_tmp, alpha=True)\n        if self.title:\n            title = BuildImage(\n                0,\n                0,\n                plain_text=self.title,\n                color=(255, 255, 255, 0),\n                font_size=35,\n                font_color=self._color.get(\"title\"),\n                font=self.font,\n            )\n            A.paste(title, (0, 25), True, \"by_width\")\n        A.line(\n            (\n                padding_w,\n                padding_h + line_length,\n                padding_w + line_length,\n                padding_h + line_length,\n            ),\n            (0, 0, 0),\n            2,\n        )\n        A.line(\n            (\n                padding_w,\n                padding_h,\n                padding_w,\n                padding_h + line_length,\n            ),\n            (0, 0, 0),\n            2,\n        )\n        _interval = self._x_interval\n        if self.mat_type == \"barh\":\n            tmp = x_index\n            x_index = y_index\n            y_index = tmp\n            _interval = self._y_interval\n        current_w = padding_w + _interval\n        _text_font = BuildImage(0, 0, font_size=self.font_size, font=self.font)\n        _grid = self.line_length if is_grid else 10\n        x_rotate_height = 0\n        for _x in x_index:\n            _p = BuildImage(1, _grid, color=\"#a9a9a9\")\n            A.paste(_p, (current_w, padding_h + line_length - _grid))\n            w = int(_text_font.getsize(f\"{_x}\")[0] / 2)\n            text = BuildImage(\n                0,\n                0,\n                plain_text=f\"{_x}\",\n                font_size=self.font_size,\n                color=(255, 255, 255, 0),\n                font=self.font,\n            )\n            text.rotate(self.x_rotate, True)\n            A.paste(text, (current_w - w, padding_h + line_length + 10), alpha=True)\n            current_w += _interval\n            x_rotate_height = text.h\n        _interval = self._x_interval if self.mat_type == \"barh\" else self._y_interval\n        current_h = padding_h + line_length - _interval\n        _text_font = BuildImage(0, 0, font_size=self.font_size, font=self.font)\n        for _y in y_index:\n            _p = BuildImage(_grid, 1, color=\"#a9a9a9\")\n            A.paste(_p, (padding_w + 2, current_h))\n            w, h = _text_font.getsize(f\"{_y}\")\n            h = int(h / 2)\n            text = BuildImage(\n                0,\n                0,\n                plain_text=f\"{_y}\",\n                font_size=self.font_size,\n                color=(255, 255, 255, 0),\n                font=self.font,\n            )\n            idx = 0\n            while text.size[0] > self.padding_w - 10 and idx < 3:\n                text = BuildImage(\n                    0,\n                    0,\n                    plain_text=f\"{_y}\",\n                    font_size=int(self.font_size * 0.75),\n                    color=(255, 255, 255, 0),\n                    font=self.font,\n                )\n                w, _ = text.getsize(f\"{_y}\")\n                idx += 1\n            A.paste(text, (padding_w - w - 10, current_h - h), alpha=True)\n            current_h -= _interval\n        if x_name:\n            A.text((int(padding_w / 2), int(padding_w / 2)), x_name)\n        if y_name:\n            A.text(\n                (\n                    int(padding_w + line_length + 50 - A.getsize(y_name)[0]),\n                    int(padding_h + line_length + 50 + x_rotate_height),\n                ),\n                y_name,\n            )\n        return A\n\n\nasync def text2image(\n    text: str,\n    auto_parse: bool = True,\n    font_size: int = 20,\n    color: Union[str, Tuple[int, int, int], Tuple[int, int, int, int]] = \"white\",\n    font: str = \"CJGaoDeGuo.otf\",\n    font_color: Union[str, Tuple[int, int, int]] = \"black\",\n    padding: Union[int, Tuple[int, int, int, int]] = 0,\n    _add_height: float = 0,\n) -> BuildImage:\n    \"\"\"\n    说明:\n        解析文本并转为图片\n        使用标签\n            <f> </f>\n        可选配置项\n            font: str -> 特殊文本字体\n            fs / font_size: int -> 特殊文本大小\n            fc / font_color: Union[str, Tuple[int, int, int]] -> 特殊文本颜色\n        示例\n            在不在，<f font=YSHaoShenTi-2.ttf font_size=30 font_color=red>HibiKi小姐</f>，\n            你最近还好吗，<f font_size=15 font_color=black>我非常想你</f>，这段时间我非常不好过，\n            <f font_size=25>抽卡抽不到金色</f>，这让我很痛苦\n    参数:\n        :param text: 文本\n        :param auto_parse: 是否自动解析，否则原样发送\n        :param font_size: 普通字体大小\n        :param color: 背景颜色\n        :param font: 普通字体\n        :param font_color: 普通字体颜色\n        :param padding: 文本外边距，元组类型时为 （上，左，下，右）\n        :param _add_height: 由于get_size无法返回正确的高度，采用手动方式额外添加高度\n    \"\"\"\n    pw = ph = top_padding = left_padding = 0\n    if padding:\n        if isinstance(padding, int):\n            pw = padding * 2\n            ph = padding * 2\n            top_padding = left_padding = padding\n        elif isinstance(padding, tuple):\n            pw = padding[0] + padding[2]\n            ph = padding[1] + padding[3]\n            top_padding = padding[0]\n            left_padding = padding[1]\n    if auto_parse and re.search(r\"<f(.*)>(.*)</f>\", text):\n        _data = []\n        new_text = \"\"\n        placeholder_index = 0\n        for s in text.split(\"</f>\"):\n            r = re.search(r\"<f(.*)>(.*)\", s)\n            if r:\n                start, end = r.span()\n                if start != 0 and (t := s[:start]):\n                    new_text += t\n                _data.append(\n                    [\n                        (start, end),\n                        f\"[placeholder_{placeholder_index}]\",\n                        r.group(1).strip(),\n                        r.group(2),\n                    ]\n                )\n                new_text += f\"[placeholder_{placeholder_index}]\"\n                placeholder_index += 1\n        new_text += text.split(\"</f>\")[-1]\n        image_list = []\n        current_placeholder_index = 0\n        # 切分换行，每行为单张图片\n        for s in new_text.split(\"\\n\"):\n            _tmp_text = s\n            img_height = BuildImage(0, 0, font_size=font_size).getsize(\"正\")[1]\n            img_width = 0\n            _tmp_index = current_placeholder_index\n            for _ in range(s.count(\"[placeholder_\")):\n                placeholder = _data[_tmp_index]\n                if \"font_size\" in placeholder[2]:\n                    r = re.search(r\"font_size=['\\\"]?(\\d+)\", placeholder[2])\n                    if r:\n                        w, h = BuildImage(0, 0, font_size=int(r.group(1))).getsize(\n                            placeholder[3]\n                        )\n                        img_height = img_height if img_height > h else h\n                        img_width += w\n                else:\n                    img_width += BuildImage(0, 0, font_size=font_size).getsize(\n                        placeholder[3]\n                    )[0]\n                _tmp_text = _tmp_text.replace(f\"[placeholder_{_tmp_index}]\", \"\")\n                _tmp_index += 1\n            img_width += BuildImage(0, 0, font_size=font_size).getsize(_tmp_text)[0]\n            # img_width += len(_tmp_text) * font_size\n            # 开始画图\n            A = BuildImage(\n                img_width, img_height, color=color, font=font, font_size=font_size\n            )\n            basic_font_h = A.getsize(\"正\")[1]\n            current_width = 0\n            # 遍历占位符\n            for _ in range(s.count(\"[placeholder_\")):\n                if not s.startswith(f\"[placeholder_{current_placeholder_index}]\"):\n                    slice_ = s.split(f\"[placeholder_{current_placeholder_index}]\")\n                    await A.atext(\n                        (current_width, A.h - basic_font_h - 1), slice_[0], font_color\n                    )\n                    current_width += A.getsize(slice_[0])[0]\n                placeholder = _data[current_placeholder_index]\n                # 解析配置\n                _font = font\n                _font_size = font_size\n                _font_color = font_color\n                for e in placeholder[2].split():\n                    if e.startswith(\"font=\"):\n                        _font = e.split(\"=\")[-1]\n                    if e.startswith(\"font_size=\") or e.startswith(\"fs=\"):\n                        _font_size = int(e.split(\"=\")[-1])\n                        if _font_size > 1000:\n                            _font_size = 1000\n                        if _font_size < 1:\n                            _font_size = 1\n                    if e.startswith(\"font_color\") or e.startswith(\"fc=\"):\n                        _font_color = e.split(\"=\")[-1]\n                text_img = BuildImage(\n                    0,\n                    0,\n                    plain_text=placeholder[3],\n                    font_size=_font_size,\n                    font_color=_font_color,\n                    font=_font,\n                )\n                _img_h = (\n                    int(A.h / 2 - text_img.h / 2)\n                    if new_text == \"[placeholder_0]\"\n                    else A.h - text_img.h\n                )\n                await A.apaste(text_img, (current_width, _img_h - 1), True)\n                current_width += text_img.w\n                s = s[\n                    s.index(f\"[placeholder_{current_placeholder_index}]\")\n                    + len(f\"[placeholder_{current_placeholder_index}]\") :\n                ]\n                current_placeholder_index += 1\n            if s:\n                slice_ = s.split(f\"[placeholder_{current_placeholder_index}]\")\n                await A.atext((current_width, A.h - basic_font_h), slice_[0])\n                current_width += A.getsize(slice_[0])[0]\n            A.crop((0, 0, current_width, A.h))\n            # A.show()\n            image_list.append(A)\n        height = 0\n        width = 0\n        for img in image_list:\n            height += img.h\n            width = width if width > img.w else img.w\n        width += pw\n        height += ph\n        A = BuildImage(width + left_padding, height + top_padding, color=color)\n        current_height = top_padding\n        for img in image_list:\n            await A.apaste(img, (left_padding, current_height), True)\n            current_height += img.h\n    else:\n        width = 0\n        height = 0\n        _tmp = BuildImage(0, 0, font=font, font_size=font_size)\n        _, h = _tmp.getsize(\"正\")\n        line_height = int(font_size / 3)\n        image_list = []\n        for x in text.split(\"\\n\"):\n            w, _ = _tmp.getsize(x.strip() or \"正\")\n            height += h + line_height\n            width = width if width > w else w\n            image_list.append(BuildImage(w, h, font=font, font_size=font_size, plain_text=x.strip(), color=color))\n        width += pw\n        height += ph\n        A = BuildImage(\n            width + left_padding,\n            height + top_padding + 2,\n            color=color,\n        )\n        cur_h = ph\n        for img in image_list:\n            await A.apaste(img, (pw, cur_h), True)\n            cur_h += img.h + line_height\n    return A\n\n\nif __name__ == \"__main__\":\n    pass\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/image_utils.py b/utils/image_utils.py
--- a/utils/image_utils.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/utils/image_utils.py	(date 1663665690887)
@@ -178,8 +178,8 @@
         self.h = int(h)
         self.paste_image_width = int(paste_image_width)
         self.paste_image_height = int(paste_image_height)
-        self.current_w = 0
-        self.current_h = 0
+        self._current_w = 0
+        self._current_h = 0
         self.font = ImageFont.truetype(str(FONT_PATH / font), int(font_size))
         if not plain_text and not color:
             color = (255, 255, 255)
@@ -287,11 +287,11 @@
             pos = (width, height)
         if isinstance(img, BuildImage):
             img = img.markImg
-        if self.current_w == self.w:
-            self.current_w = 0
-            self.current_h += self.paste_image_height
+        if self._current_w >= self.w:
+            self._current_w = 0
+            self._current_h += self.paste_image_height
         if not pos:
-            pos = (self.current_w, self.current_h)
+            pos = (self._current_w, self._current_h)
         if alpha:
             try:
                 self.markImg.paste(img, pos, img)
@@ -300,7 +300,7 @@
                 self.markImg.paste(img, pos, img)
         else:
             self.markImg.paste(img, pos)
-        self.current_w += self.paste_image_width
+        self._current_w += self.paste_image_width
 
     def getsize(self, msg: str) -> Tuple[int, int]:
         """
Index: plugins/mute.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from nonebot import on_message, on_command\r\nfrom nonebot.adapters.onebot.v11 import Bot, GroupMessageEvent, Message, ActionFailed\r\nfrom nonebot.adapters.onebot.v11.permission import GROUP\r\nfrom utils.utils import is_number, get_message_img, get_message_text\r\nfrom configs.path_config import DATA_PATH, TEMP_PATH\r\nfrom utils.image_utils import get_img_hash\r\nfrom services.log import logger\r\nfrom configs.config import NICKNAME, Config\r\nfrom utils.http_utils import AsyncHttpx\r\nfrom nonebot.params import CommandArg, Command\r\nfrom typing import Tuple, Dict, Any\r\nimport time\r\n\r\ntry:\r\n    import ujson as json\r\nexcept ModuleNotFoundError:\r\n    import json\r\n\r\n\r\n__zx_plugin_name__ = \"刷屏禁言 [Admin]\"\r\n__plugin_usage__ = f\"\"\"\r\nusage：\r\n    刷屏禁言相关操作，需要 {NICKNAME} 有群管理员权限\r\n    指令：\r\n        设置刷屏检测时间 [秒]\r\n        设置刷屏检测次数 [次数]\r\n        设置刷屏禁言时长 [分钟]\r\n        刷屏检测设置: 查看当前的刷屏检测设置\r\n        * 即 X 秒内发送同样消息 N 次，禁言 M 分钟 *\r\n\"\"\".strip()\r\n__plugin_des__ = \"刷屏禁言相关操作\"\r\n__plugin_cmd__ = [\"设置刷屏检测时间 [秒]\", \"设置刷屏检测次数 [次数]\", \"设置刷屏禁言时长 [分钟]\", \"刷屏检测设置\"]\r\n__plugin_version__ = 0.1\r\n__plugin_author__ = \"HibiKier\"\r\n__plugin_settings__ = {\"admin_level\": Config.get_config(\"mute\", \"MUTE_LEVEL\")}\r\n__plugin_configs__ = {\r\n    \"MUTE_LEVEL [LEVEL]\": {\"value\": 5, \"help\": \"更改禁言设置的管理权限\", \"default_value\": 5},\r\n    \"MUTE_DEFAULT_COUNT\": {\"value\": 10, \"help\": \"刷屏禁言默认检测次数\", \"default_value\": 10},\r\n    \"MUTE_DEFAULT_TIME\": {\"value\": 7, \"help\": \"刷屏检测默认规定时间\", \"default_value\": 7},\r\n    \"MUTE_DEFAULT_DURATION\": {\r\n        \"value\": 10,\r\n        \"help\": \"刷屏检测默禁言时长（分钟）\",\r\n        \"default_value\": 10,\r\n    },\r\n}\r\n\r\n\r\nmute = on_message(priority=1, block=False)\r\nmute_setting = on_command(\r\n    \"mute_setting\",\r\n    aliases={\"设置刷屏检测时间\", \"设置刷屏检测次数\", \"设置刷屏禁言时长\", \"刷屏检测设置\"},\r\n    permission=GROUP,\r\n    block=True,\r\n    priority=5,\r\n)\r\n\r\n\r\ndef get_data() -> Dict[Any, Any]:\r\n    try:\r\n        with open(DATA_PATH / \"group_mute_data.json\", \"r\", encoding=\"utf8\") as f:\r\n            data = json.load(f)\r\n    except (ValueError, FileNotFoundError):\r\n        data = {}\r\n    return data\r\n\r\n\r\ndef save_data():\r\n    global mute_data\r\n    with open(DATA_PATH / \"group_mute_data.json\", \"w\", encoding=\"utf8\") as f:\r\n        json.dump(mute_data, f, indent=4)\r\n\r\n\r\nasync def download_img_and_hash(url, group_id) -> str:\r\n    if await AsyncHttpx.download_file(url, TEMP_PATH / f\"mute_{group_id}_img.jpg\"):\r\n        return str(get_img_hash(TEMP_PATH / f\"mute_{group_id}_img.jpg\"))\r\n    return \"\"\r\n\r\n\r\nmute_dict = {}\r\nmute_data = get_data()\r\n\r\n\r\n@mute.handle()\r\nasync def _(bot: Bot, event: GroupMessageEvent):\r\n    group_id = str(event.group_id)\r\n    msg = get_message_text(event.json())\r\n    img_list = get_message_img(event.json())\r\n    img_hash = \"\"\r\n    for img in img_list:\r\n        img_hash += await download_img_and_hash(img, event.group_id)\r\n    msg += img_hash\r\n    if not mute_data.get(group_id):\r\n        mute_data[group_id] = {\r\n            \"count\": Config.get_config(\"mute\", \"MUTE_DEFAULT_COUNT\"),\r\n            \"time\": Config.get_config(\"mute\", \"MUTE_DEFAULT_TIME\"),\r\n            \"duration\": Config.get_config(\"mute\", \"MUTE_DEFAULT_DURATION\"),\r\n        }\r\n    if not mute_dict.get(event.user_id):\r\n        mute_dict[event.user_id] = {\"time\": time.time(), \"count\": 1, \"msg\": msg}\r\n    else:\r\n        if msg and msg.find(mute_dict[event.user_id][\"msg\"]) != -1:\r\n            mute_dict[event.user_id][\"count\"] += 1\r\n        else:\r\n            mute_dict[event.user_id][\"time\"] = time.time()\r\n            mute_dict[event.user_id][\"count\"] = 1\r\n        mute_dict[event.user_id][\"msg\"] = msg\r\n        if time.time() - mute_dict[event.user_id][\"time\"] > mute_data[group_id][\"time\"]:\r\n            mute_dict[event.user_id][\"time\"] = time.time()\r\n            mute_dict[event.user_id][\"count\"] = 1\r\n        if (\r\n            mute_dict[event.user_id][\"count\"] > mute_data[group_id][\"count\"]\r\n            and time.time() - mute_dict[event.user_id][\"time\"]\r\n            < mute_data[group_id][\"time\"]\r\n        ):\r\n            try:\r\n                if mute_data[group_id][\"duration\"] != 0:\r\n                    await bot.set_group_ban(\r\n                        group_id=event.group_id,\r\n                        user_id=event.user_id,\r\n                        duration=mute_data[group_id][\"duration\"] * 60,\r\n                    )\r\n                    await mute.send(f\"检测到恶意刷屏，{NICKNAME}要把你关进小黑屋！\", at_sender=True)\r\n                    mute_dict[event.user_id][\"count\"] = 0\r\n                    logger.info(\r\n                        f\"USER {event.user_id} GROUP {event.group_id} \"\r\n                        f'检测刷屏 被禁言 {mute_data[group_id][\"duration\"] / 60} 分钟'\r\n                    )\r\n            except ActionFailed:\r\n                pass\r\n\r\n\r\n@mute_setting.handle()\r\nasync def _(\r\n    event: GroupMessageEvent,\r\n    cmd: Tuple[str, ...] = Command(),\r\n    arg: Message = CommandArg(),\r\n):\r\n    global mute_data\r\n    group_id = str(event.group_id)\r\n    if not mute_data.get(group_id):\r\n        mute_data[group_id] = {\r\n            \"count\": Config.get_config(\"mute\", \"MUTE_DEFAULT_COUNT\"),\r\n            \"time\": Config.get_config(\"mute\", \"MUTE_DEFAULT_TIME\"),\r\n            \"duration\": Config.get_config(\"mute\", \"MUTE_DEFAULT_DURATION\"),\r\n        }\r\n    msg = arg.extract_plain_text().strip()\r\n    if cmd[0] == \"刷屏检测设置\":\r\n        await mute_setting.finish(\r\n            f'最大次数：{mute_data[group_id][\"count\"]} 次\\n'\r\n            f'规定时间：{mute_data[group_id][\"time\"]} 秒\\n'\r\n            f'禁言时长：{mute_data[group_id][\"duration\"]:.2f} 分钟\\n'\r\n            f\"【在规定时间内发送相同消息超过最大次数则禁言\\n当禁言时长为0时关闭此功能】\"\r\n        )\r\n    if not is_number(msg):\r\n        await mute.finish(\"设置的参数必须是数字啊！\", at_sender=True)\r\n    if cmd[0] == \"设置刷屏检测时间\":\r\n        mute_data[group_id][\"time\"] = int(msg)\r\n        msg += \"秒\"\r\n    if cmd[0] == \"设置刷屏检测次数\":\r\n        mute_data[group_id][\"count\"] = int(msg)\r\n        msg += \" 次\"\r\n    if cmd[0] == \"设置刷屏禁言时长\":\r\n        mute_data[group_id][\"duration\"] = int(msg)\r\n        msg += \" 分钟\"\r\n    await mute_setting.send(f\"刷屏检测：{cmd[0]}为 {msg}\")\r\n    logger.info(f\"USER {event.user_id} GROUP {group_id} {cmd[0]}：{msg}\")\r\n    save_data()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/mute.py b/plugins/mute.py
--- a/plugins/mute.py	(revision b61598af70a2685248e4f4c24047b5ed5f22fb39)
+++ b/plugins/mute.py	(date 1663665690883)
@@ -1,3 +1,7 @@
+from io import BytesIO
+
+import imagehash
+from PIL import Image
 from nonebot import on_message, on_command
 from nonebot.adapters.onebot.v11 import Bot, GroupMessageEvent, Message, ActionFailed
 from nonebot.adapters.onebot.v11.permission import GROUP
@@ -70,10 +74,8 @@
         json.dump(mute_data, f, indent=4)
 
 
-async def download_img_and_hash(url, group_id) -> str:
-    if await AsyncHttpx.download_file(url, TEMP_PATH / f"mute_{group_id}_img.jpg"):
-        return str(get_img_hash(TEMP_PATH / f"mute_{group_id}_img.jpg"))
-    return ""
+async def download_img_and_hash(url) -> str:
+    return str(imagehash.average_hash(Image.open(BytesIO((await AsyncHttpx.get(url)).content))))
 
 
 mute_dict = {}
@@ -87,7 +89,7 @@
     img_list = get_message_img(event.json())
     img_hash = ""
     for img in img_list:
-        img_hash += await download_img_and_hash(img, event.group_id)
+        img_hash += await download_img_and_hash(img)
     msg += img_hash
     if not mute_data.get(group_id):
         mute_data[group_id] = {
Index: plugins/genshin/query_user/query_role/draw_image.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/genshin/query_user/query_role/draw_image.py b/plugins/genshin/query_user/query_role/draw_image.py
new file mode 100644
--- /dev/null	(date 1663666724604)
+++ b/plugins/genshin/query_user/query_role/draw_image.py	(date 1663666724604)
@@ -0,0 +1,595 @@
+from configs.path_config import IMAGE_PATH, TEMP_PATH
+from utils.image_utils import BuildImage
+from typing import List, Dict, Optional
+from utils.message_builder import image
+from nonebot.adapters.onebot.v11 import MessageSegment
+from utils.http_utils import AsyncHttpx
+from utils.utils import get_user_avatar
+from io import BytesIO
+import random
+import asyncio
+import os
+
+
+image_path = IMAGE_PATH / "genshin" / "genshin_card"
+
+
+async def get_genshin_image(
+    user_id: int,
+    uid: str,
+    char_data_list: List[Dict],
+    role_data: Dict,
+    world_data_dict: Dict,
+    home_data_list: List[Dict],
+    char_detailed_dict: dict = None,
+    mys_data: Optional[List[Dict]] = None,
+    nickname: Optional[str] = None,
+) -> MessageSegment:
+    """
+    生成图片数据
+    :param user_id：用户qq
+    :param uid: 原神uid
+    :param char_data_list: 角色列表
+    :param role_data: 玩家数据
+    :param world_data_dict: 国家数据字典
+    :param home_data_list: 家园列表
+    :param char_detailed_dict: 角色武器字典
+    :param mys_data: 用户米游社数据
+    :param nickname: 用户昵称
+    """
+    user_ava = BytesIO(await get_user_avatar(user_id))
+    return await asyncio.get_event_loop().run_in_executor(
+        None,
+        _get_genshin_image,
+        uid,
+        char_data_list,
+        role_data,
+        world_data_dict,
+        home_data_list,
+        char_detailed_dict,
+        mys_data,
+        nickname,
+        user_ava,
+    )
+
+
+def _get_genshin_image(
+    uid: str,
+    char_data_list: List[Dict],
+    role_data: Dict,
+    world_data_dict: Dict,
+    home_data_list: List[Dict],
+    char_detailed_dict: dict = None,
+    mys_data: Optional[Dict] = None,
+    nickname: Optional[str] = None,
+    user_ava: Optional[BytesIO] = None,
+) -> MessageSegment:
+    """
+    生成图片数据
+    :param uid: 原神uid
+    :param char_data_list: 角色列表
+    :param role_data: 玩家数据
+    :param world_data_dict: 国家数据字典
+    :param home_data_list: 家园列表
+    :param char_detailed_dict: 角色武器字典
+    :param mys_data: 用户米游社数据
+    :param nickname: 用户昵称
+    :param user_ava：用户头像
+    """
+    user_image = get_user_data_image(uid, role_data, mys_data, nickname, user_ava)
+    home_image = get_home_data_image(home_data_list)
+    country_image = get_country_data_image(world_data_dict)
+    char_image = get_char_data_image(char_data_list, char_detailed_dict)
+    top_bk = BuildImage(user_image.w, user_image.h + max([home_image.h, country_image.h]) + 100, color="#F9F6F2")
+    top_bk.paste(user_image, alpha=True)
+    top_bk.paste(home_image, (0, user_image.h + 50), alpha=True)
+    top_bk.paste(country_image, (home_image.w + 100, user_image.h + 50), alpha=True)
+    bar = BuildImage(1600, 200, font_size=50, color="#F9F6F2", font="HYWenHei-85W.ttf")
+    bar.text((50, 10), "角色背包", (104, 103, 101))
+    bar.line((50, 90, 1550, 90), (227, 219, 209), width=10)
+
+    foot = BuildImage(1700, 87, background=image_path / "head.png")
+    head = BuildImage(1700, 87, background=image_path / "head.png")
+    head.rotate(180)
+    middle = BuildImage(
+        1700, top_bk.h + bar.h + char_image.h, background=image_path / "middle.png"
+    )
+    A = BuildImage(middle.w, middle.h + foot.h + head.h)
+    A.paste(head, (-5, 0), True)
+    A.paste(middle, (0, head.h), True)
+    A.paste(foot, (0, head.h + middle.h), True)
+    A.crop((0, 0, A.w - 5, A.h))
+    if A.h - top_bk.h - bar.h - char_image.h > 200:
+        _h = A.h - top_bk.h - bar.h - char_image.h - 200
+        A.crop((0, 0, A.w, A.h - _h))
+        A.paste(foot, (0, A.h - 87))
+    A.paste(top_bk, (0, 100), center_type="by_width")
+    A.paste(bar, (50, top_bk.h + 80))
+    A.paste(char_image, (0, top_bk.h + bar.h + 10), center_type="by_width")
+    rand = random.randint(1, 10000)
+    A.resize(0.8)
+    A.save(TEMP_PATH / f"genshin_user_card_{rand}.png")
+    return image(TEMP_PATH / f"genshin_user_card_{rand}.png")
+
+
+def get_user_data_image(
+    uid: str,
+    role_data: Dict,
+    mys_data: Optional[Dict] = None,
+    nickname: Optional[str] = None,
+    user_ava: Optional[BytesIO] = None,
+) -> BuildImage:
+    """
+    画出玩家基本数据
+    :param uid: 原神uid
+    :param role_data: 玩家数据
+    :param mys_data: 玩家米游社数据
+    :param nickname: 用户昵称
+    :param user_ava：用户头像
+    """
+    if mys_data:
+        nickname = [x["nickname"] for x in mys_data if x["game_id"] == 2][0]
+    region = BuildImage(1440, 560, color="#E3DBD1", font="HYWenHei-85W.ttf")
+    region.circle_corner(30)
+    uname_img = BuildImage(
+        0,
+        0,
+        plain_text=nickname,
+        font_size=40,
+        color=(255, 255, 255, 0),
+        font="HYWenHei-85W.ttf",
+    )
+    uid_img = BuildImage(
+        0,
+        0,
+        plain_text=f"UID: {uid}",
+        font_size=25,
+        color=(255, 255, 255, 0),
+        font="HYWenHei-85W.ttf",
+        font_color=(21, 167, 89),
+    )
+    ava_bk = BuildImage(270, 270, background=image_path / "cover.png")
+    # 用户头像
+    if user_ava:
+        ava_img = BuildImage(200, 200, background=user_ava)
+        ava_img.circle()
+        ava_bk.paste(ava_img, alpha=True, center_type="center")
+    else:
+        ava_img = BuildImage(
+            245,
+            245,
+            background=image_path
+            / "chars_ava"
+            / random.choice(os.listdir(image_path / "chars_ava")),
+        )
+        ava_bk.paste(ava_img, (12, 16), alpha=True)
+    region.paste(uname_img, (int(170 + uid_img.w / 2 - uname_img.w / 2), 365), True)
+    region.paste(uid_img, (170, 415), True)
+    region.paste(ava_bk, (int(550 / 2 - ava_bk.w / 2), 100), True)
+    data_img = BuildImage(
+        800, 510, color="#E3DBD1", font="HYWenHei-85W.ttf", font_size=40
+    )
+    _height = 0
+    keys = [
+        ["活跃天数", "成就达成", "获得角色", "解锁传送"],
+        ["风神瞳", "岩神瞳", "雷神瞳", "草神瞳"],
+        ["解锁秘境", "深境螺旋", "华丽宝箱", "珍贵宝箱"],
+        ["精致宝箱", "普通宝箱", "奇馈宝箱",],
+    ]
+    values = [
+        [
+            role_data["active_day_number"],
+            role_data["achievement_number"],
+            role_data["avatar_number"],
+            role_data["way_point_number"],
+        ],
+        [
+            role_data["anemoculus_number"],
+            role_data["geoculus_number"],
+            role_data["electroculus_number"],
+            role_data["dendroculus_number"],
+        ],
+        [
+            role_data["domain_number"],
+            role_data["spiral_abyss"],
+            role_data["luxurious_chest_number"],
+            role_data["precious_chest_number"],
+        ],
+        [
+            role_data["exquisite_chest_number"],
+            role_data["common_chest_number"],
+            role_data["magic_chest_number"],
+        ],
+    ]
+    for key, value in zip(keys, values):
+        _tmp_data_img = BuildImage(
+            800, 200, color="#E3DBD1", font="HYWenHei-85W.ttf", font_size=40
+        )
+        _width = 10
+        for k, v in zip(key, value):
+            t_ = BuildImage(
+                0,
+                0,
+                plain_text=k,
+                color=(255, 255, 255, 0),
+                font_color=(138, 143, 143),
+                font="HYWenHei-85W.ttf",
+                font_size=30,
+            )
+            tmp_ = BuildImage(
+                t_.w, t_.h + 70, color="#E3DBD1", font="HYWenHei-85W.ttf", font_size=40
+            )
+            tmp_.text((0, 0), str(v), center_type="by_width")
+            tmp_.paste(t_, (0, 50), True, "by_width")
+            _tmp_data_img.paste(tmp_, ((_width + 15) if keys.index(key) == 1 else _width, 0))
+            _width += 200
+        data_img.paste(_tmp_data_img, (0, _height))
+        _height += _tmp_data_img.h - 70
+    region.paste(data_img, (510, 50))
+    return region
+
+
+def get_home_data_image(home_data_list: List[Dict]) -> BuildImage:
+    """
+    画出家园数据
+    :param home_data_list: 家园列表
+    """
+    h = 130 + 340 * 4
+    region = BuildImage(
+        550, h, color="#E3DBD1", font="HYWenHei-85W.ttf", font_size=40
+    )
+    try:
+        region.text(
+            (0, 30), f'尘歌壶 Lv.{home_data_list[0]["level"]}', center_type="by_width"
+        )
+        region.text(
+            (0, region.h - 70), f'仙力: {home_data_list[0]["comfort_num"]}', center_type="by_width"
+        )
+    except (IndexError, KeyError):
+        region.text((0, 30), f"尘歌壶 Lv.0", center_type="by_width")
+        region.text((0, region.h - 70), f"仙力: 0", center_type="by_width")
+    region.circle_corner(30)
+    height = 100
+    homes = os.listdir(image_path / "homes")
+    homes.remove("lock.png")
+    homes.sort()
+    unlock_home = [x["name"] for x in home_data_list]
+    for i, file in enumerate(homes):
+        home_img = image_path / "homes" / file
+        x = BuildImage(500, 250, background=home_img)
+        if file.split(".")[0] not in unlock_home:
+            black_img = BuildImage(500, 250, color="black")
+            lock_img = BuildImage(0, 0, background=image_path / "homes" / "lock.png")
+            black_img.circle_corner(50)
+            black_img.transparent(1)
+            black_img.paste(lock_img, alpha=True, center_type="center")
+            x.paste(black_img, alpha=True)
+        else:
+            black_img = BuildImage(
+                500, 150, color="black", font="HYWenHei-85W.ttf", font_size=40
+            )
+            black_img.text((55, 55), file.split(".")[0], fill=(226, 211, 146))
+            black_img.transparent(1)
+            text_img = BuildImage(
+                0,
+                0,
+                plain_text="洞天等级",
+                font="HYWenHei-85W.ttf",
+                font_color=(203, 200, 184),
+                font_size=35,
+                color=(255, 255, 255, 0),
+            )
+            level_img = BuildImage(
+                0,
+                0,
+                plain_text=f'{home_data_list[0]["comfort_level_name"]}',
+                font="HYWenHei-85W.ttf",
+                font_color=(211, 213, 207),
+                font_size=30,
+                color=(255, 255, 255, 0),
+            )
+            black_img.paste(text_img, (270, 25), True)
+            black_img.paste(level_img, (278, 85), True)
+            x.paste(black_img, alpha=True, center_type="center")
+        x.circle_corner(50)
+        region.paste(x, (0, height), True, "by_width")
+        height += 340
+    return region
+
+
+def get_country_data_image(world_data_dict: Dict) -> BuildImage:
+    """
+    画出国家探索供奉等图像
+    :param world_data_dict: 国家数据字典
+    """
+    # 层岩巨渊 和 地下矿区 算一个
+    region = BuildImage(790, 267 * ((len(world_data_dict) - 1) if world_data_dict.get("层岩巨渊·地下矿区") else len(world_data_dict)), color="#F9F6F2")
+    height = 0
+    for country in ["蒙德", "龙脊雪山", "璃月", "层岩巨渊", "稻妻", "渊下宫", "须弥"]:
+        if not world_data_dict.get(country):
+            continue
+        x = BuildImage(790, 250, color="#3A4467")
+        logo = BuildImage(180, 180, background=image_path / "logo" / f"{country}.png")
+        tmp_bk = BuildImage(770, 230, color="#606779")
+        tmp_bk.circle_corner(10)
+        content_bk = BuildImage(
+            755, 215, color="#3A4467", font_size=40, font="HYWenHei-85W.ttf"
+        )
+        content_bk.paste(logo, (50, 0), True, "by_height")
+        if country in ["蒙德", "璃月"]:
+            content_bk.text((300, 40), "蒙德探索" if country == "蒙德" else "璃月探索", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 40),
+                f"{world_data_dict[country]['exploration_percentage'] / 10}%",
+                fill=(255, 255, 255),
+            )
+            content_bk.text((300, 120), "蒙德声望" if country == "蒙德" else "璃月声望", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 120),
+                f"Lv.{world_data_dict[country]['level']}",
+                fill=(255, 255, 255),
+            )
+        elif country in ["层岩巨渊"]:
+            content_bk.text((300, 20), "层岩巨渊探索", fill=(239, 211, 114))
+            content_bk.text(
+                (570, 20),
+                f"{world_data_dict['层岩巨渊']['exploration_percentage'] / 10}%",
+                fill=(255, 255, 255),
+            )
+            if world_data_dict.get('层岩巨渊·地下矿区'):
+                content_bk.text((300, 85), "地下矿区探索", fill=(239, 211, 114))
+                content_bk.text(
+                    (570, 85),
+                    f"{world_data_dict['层岩巨渊·地下矿区']['exploration_percentage'] / 10}%",
+                    fill=(255, 255, 255),
+                )
+                content_bk.text((300, 150), "流明石触媒", fill=(239, 211, 114))
+                content_bk.text(
+                    (570, 150),
+                    f"LV.{world_data_dict['层岩巨渊·地下矿区']['offerings'][0]['level']}",
+                    fill=(255, 255, 255),
+                )
+        elif country in ["龙脊雪山"]:
+            content_bk.text((300, 40), "雪山探索", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 40),
+                f"{world_data_dict[country]['exploration_percentage'] / 10}%",
+                fill=(255, 255, 255),
+            )
+            content_bk.text((300, 120), "忍冬之树", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 120),
+                f"Lv.{world_data_dict[country]['offerings'][0]['level']}",
+                fill=(255, 255, 255),
+            )
+        elif country in ["稻妻"]:
+            content_bk.text((300, 20), "稻妻探索", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 20),
+                f"{world_data_dict[country]['exploration_percentage'] / 10}%",
+                fill=(255, 255, 255),
+            )
+            content_bk.text((300, 85), "稻妻声望", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 85),
+                f"Lv.{world_data_dict[country]['level']}",
+                fill=(255, 255, 255),
+            )
+            content_bk.text((300, 150), "神樱眷顾", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 150),
+                f"Lv.{world_data_dict[country]['offerings'][0]['level']}",
+                fill=(255, 255, 255),
+            )
+        elif country in ["渊下宫"]:
+            content_bk.text((300, 0), "渊下宫探索", fill=(239, 211, 114), center_type="by_height")
+            content_bk.text(
+                (530, 20),
+                f"{world_data_dict[country]['exploration_percentage'] / 10}%",
+                fill=(255, 255, 255),
+                center_type="by_height",
+            )
+        elif country in ["须弥"]:
+            content_bk.text((300, 20), "须弥探索", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 20),
+                f"{world_data_dict[country]['exploration_percentage'] / 10}%",
+                fill=(255, 255, 255),
+            )
+            content_bk.text((300, 85), "须弥声望", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 85),
+                f"Lv.{world_data_dict[country]['level']}",
+                fill=(255, 255, 255),
+            )
+            content_bk.text((300, 150), "梦之树", fill=(239, 211, 114))
+            content_bk.text(
+                (500, 150),
+                f"Lv.{world_data_dict[country]['offerings'][0]['level']}",
+                fill=(255, 255, 255),
+            )
+            
+        x.paste(tmp_bk, alpha=True, center_type="center")
+        x.paste(content_bk, alpha=True, center_type="center")
+        x.circle_corner(20)
+        region.paste(x, (0, height), center_type="by_width")
+        height += 267
+    return region
+
+
+def get_char_data_image(
+    char_data_list: List[Dict], char_detailed_dict: dict
+) -> "BuildImage, int":
+    """
+    画出角色列表
+    :param char_data_list: 角色列表
+    :param char_detailed_dict: 角色武器
+    """
+    lens = len(char_data_list) / 7 if len(char_data_list) % 7 == 0 else len(char_data_list) / 7 + 1
+    x = 500
+    _h = int(x * lens)
+    region = BuildImage(
+        1600,
+        _h,
+        color="#F9F6F2",
+    )
+    width = 120
+    height = 0
+    idx = 0
+    for char in char_data_list:
+        if width + 230 > 1550:
+            width = 120
+            height += 420
+        idx += 1
+        char_img = image_path / "chars" / f'{char["name"]}.png'
+        char_bk = BuildImage(
+            270,
+            500,
+            background=image_path / "element.png",
+            font="HYWenHei-85W.ttf",
+            font_size=35,
+        )
+        char_img = BuildImage(0, 0, background=char_img)
+        actived_constellation_num = BuildImage(
+            0,
+            0,
+            plain_text=f"命之座: {char['actived_constellation_num']}层",
+            font="HYWenHei-85W.ttf",
+            font_size=25,
+            color=(255, 255, 255, 0),
+        )
+        level = BuildImage(
+            0,
+            0,
+            plain_text=f"Lv.{char['level']}",
+            font="HYWenHei-85W.ttf",
+            font_size=30,
+            color=(255, 255, 255, 0),
+            font_color=(21, 167, 89),
+        )
+        love_log = BuildImage(
+            0,
+            0,
+            plain_text="♥",
+            font="HWZhongSong.ttf",
+            font_size=40,
+            color=(255, 255, 255, 0),
+            font_color=(232, 31, 168),
+        )
+        fetter = BuildImage(
+            0,
+            0,
+            plain_text=f'{char["fetter"]}',
+            font="HYWenHei-85W.ttf",
+            font_size=30,
+            color=(255, 255, 255, 0),
+            font_color=(232, 31, 168),
+        )
+        if char_detailed_dict.get(char["name"]):
+            weapon = BuildImage(
+                100,
+                100,
+                background=image_path
+                / "weapons"
+                / f'{char_detailed_dict[char["name"]]["weapon"]}.png',
+            )
+            weapon_name = BuildImage(
+                0,
+                0,
+                plain_text=f"{char_detailed_dict[char['name']]['weapon']}",
+                font="HYWenHei-85W.ttf",
+                font_size=25,
+                color=(255, 255, 255, 0),
+            )
+            weapon_affix_level = BuildImage(
+                0,
+                0,
+                plain_text=f"精炼: {char_detailed_dict[char['name']]['affix_level']}",
+                font="HYWenHei-85W.ttf",
+                font_size=20,
+                color=(255, 255, 255, 0),
+            )
+            weapon_level = BuildImage(
+                0,
+                0,
+                plain_text=f"Lv.{char_detailed_dict[char['name']]['level']}",
+                font="HYWenHei-85W.ttf",
+                font_size=25,
+                color=(255, 255, 255, 0),
+                font_color=(21, 167, 89),
+            )
+            char_bk.paste(weapon, (20, 380), True)
+            char_bk.paste(
+                weapon_name,
+                (100 + int((char_bk.w - 22 - weapon.w - weapon_name.w) / 2 - 10), 390),
+                True,
+            )
+            char_bk.paste(
+                weapon_affix_level,
+                (
+                    (
+                        100
+                        + int(
+                            (char_bk.w - 10 - weapon.w - weapon_affix_level.w) / 2 - 10
+                        ),
+                        420,
+                    )
+                ),
+                True,
+            )
+            char_bk.paste(
+                weapon_level,
+                (
+                    (
+                        100
+                        + int((char_bk.w - 10 - weapon.w - weapon_level.w) / 2 - 10),
+                        450,
+                    )
+                ),
+                True,
+            )
+        char_bk.paste(char_img, (0, 5), alpha=True, center_type="by_width")
+        char_bk.text((0, 270), char["name"], center_type="by_width")
+        char_bk.paste(actived_constellation_num, (0, 310), True, "by_width")
+        char_bk.paste(level, (60, 340), True)
+        char_bk.paste(love_log, (155, 330), True)
+        char_bk.paste(fetter, (180, 340), True)
+        char_bk.resize(0.8)
+        region.paste(char_bk, (width, height), True)
+        width += 230
+    region.crop((0, 0, region.w, height + 430))
+    return region
+
+
+async def init_image(world_data_dict: Dict[str, Dict[str, str]], char_data_list: List[Dict[str, str]], char_detailed_dict: dict, home_data_list: List[Dict]):
+    """
+    下载头像
+    :param world_data_dict: 地图标志
+    :param char_data_list: 角色列表
+    :param char_detailed_dict: 角色武器
+    :param home_data_list: 家园列表
+    """
+    for world in world_data_dict:
+        file = image_path / "logo" / f'{world_data_dict[world]["name"]}.png'
+        file.parent.mkdir(parents=True, exist_ok=True)
+        if not file.exists():
+            await AsyncHttpx.download_file(world_data_dict[world]["icon"], file)
+    for char in char_data_list:
+        file = image_path / "chars" / f'{char["name"]}.png'
+        file.parent.mkdir(parents=True, exist_ok=True)
+        if not file.exists():
+            await AsyncHttpx.download_file(char["image"], file)
+    for char in char_detailed_dict.keys():
+        file = image_path / "weapons" / f'{char_detailed_dict[char]["weapon"]}.png'
+        file.parent.mkdir(parents=True, exist_ok=True)
+        if not file.exists():
+            await AsyncHttpx.download_file(
+                char_detailed_dict[char]["weapon_image"], file
+            )
+    for home in home_data_list:
+        file = image_path / "homes" / f'{home["name"]}.png'
+        file.parent.mkdir(parents=True, exist_ok=True)
+        if not file.exists():
+            await AsyncHttpx.download_file(
+                home["icon"], file
+            )
